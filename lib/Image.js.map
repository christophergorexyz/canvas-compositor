{"version":3,"sources":["../src/Image.js"],"names":["Image","options","unscaledImage","image","compoundScale","offset","top","y","left","x","bottom","scaleHeight","height","right","scaleWidth","width","scale","window","src","_prerenderingContext","style","PrimitiveComponent"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;IACaA,K;;;;;AACX;AACF;AACA;AACE,iBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA;AACJ;AACA;AACA;;AACI,UAAKC,aAAL,GAAqBD,OAAO,CAACE,KAA7B;AANmB;AAOpB;AAED;AACF;AACA;AACA;;;;;SACE,eAAkB;AAChB,UAAIC,aAAa,GAAG,KAAKA,aAAzB;AACA,UAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,aAAO;AACLC,QAAAA,GAAG,EAAED,MAAM,CAACE,CADP;AAELC,QAAAA,IAAI,EAAEH,MAAM,CAACI,CAFR;AAGLC,QAAAA,MAAM,EAAEL,MAAM,CAACE,CAAP,GAAYH,aAAa,CAACO,WAAd,GAA4B,KAAKT,aAAL,CAAmBU,MAH9D;AAILC,QAAAA,KAAK,EAAER,MAAM,CAACI,CAAP,GAAYL,aAAa,CAACU,UAAd,GAA2B,KAAKZ,aAAL,CAAmBa;AAJ5D,OAAP;AAMD;AAED;AACF;AACA;AACA;;;;WACE,kBAAS;AACP,UAAIC,KAAK,GAAG,KAAKZ,aAAjB;AACA,UAAID,KAAK,GAAG,IAAIc,MAAM,CAACjB,KAAX,EAAZ;AACAG,MAAAA,KAAK,CAACe,GAAN,GAAY,KAAKhB,aAAL,CAAmBgB,GAA/B;AACAf,MAAAA,KAAK,CAACY,KAAN,GAAc,KAAKb,aAAL,CAAmBa,KAAnB,GAA2BC,KAAK,CAACF,UAA/C;AACAX,MAAAA,KAAK,CAACS,MAAN,GAAe,KAAKV,aAAL,CAAmBU,MAAnB,GAA4BI,KAAK,CAACL,WAAjD;AACA,+BAAU,CAAV,EAAa,CAAb,EAAgBR,KAAhB,EAAuB,KAAKgB,oBAA5B,EAAkD,KAAKC,KAAvD;AACD;;;;EAvCwBC,uC","sourcesContent":["import { drawImage } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * an Image\n */\nexport class Image extends PrimitiveComponent {\n  /**\n   * @param {Object} options\n   */\n  constructor(options) {\n    super(options);\n    /**\n     * unscaledImage the original image\n     * @type {window.Image}\n     */\n    this.unscaledImage = options.image;\n  }\n\n  /**\n   * get the bounding box\n   * @type {{top: number, left: number, bottom: number, right:number}}\n   */\n  get boundingBox() {\n    let compoundScale = this.compoundScale;\n    let offset = this.offset;\n    return {\n      top: offset.y,\n      left: offset.x,\n      bottom: offset.y + (compoundScale.scaleHeight * this.unscaledImage.height),\n      right: offset.x + (compoundScale.scaleWidth * this.unscaledImage.width)\n    };\n  }\n\n  /**\n   * override the render function for images specifically\n   * @override\n   */\n  render() {\n    let scale = this.compoundScale;\n    let image = new window.Image();\n    image.src = this.unscaledImage.src;\n    image.width = this.unscaledImage.width * scale.scaleWidth;\n    image.height = this.unscaledImage.height * scale.scaleHeight;\n    drawImage(0, 0, image, this._prerenderingContext, this.style);\n  }\n}\n"],"file":"Image.js"}