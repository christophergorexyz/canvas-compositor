{"version":3,"sources":["../src/Image.js"],"names":["Image","options","unscaledImage","image","scale","compoundScale","window","src","width","scaleWidth","height","scaleHeight","_prerenderingContext","style","offset","top","y","left","x","bottom","right","PrimitiveComponent"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGaA,K;;;;;AACT;;;AAGA,iBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,+EAAMA,OAAN;AACA;;;;AAGA,UAAKC,aAAL,GAAqBD,OAAO,CAACE,KAA7B;AALiB;AAMpB;AAED;;;;;;;;;AAeA;;;;6BAIS;AACL,UAAIC,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIF,KAAK,GAAG,IAAIG,MAAM,CAACN,KAAX,EAAZ;AACAG,MAAAA,KAAK,CAACI,GAAN,GAAY,KAAKL,aAAL,CAAmBK,GAA/B;AACAJ,MAAAA,KAAK,CAACK,KAAN,GAAc,KAAKN,aAAL,CAAmBM,KAAnB,GAA2BJ,KAAK,CAACK,UAA/C;AACAN,MAAAA,KAAK,CAACO,MAAN,GAAe,KAAKR,aAAL,CAAmBQ,MAAnB,GAA4BN,KAAK,CAACO,WAAjD;AACA,+BAAU,CAAV,EAAa,CAAb,EAAgBR,KAAhB,EAAuB,KAAKS,oBAA5B,EAAkD,KAAKC,KAAvD;AACH;;;wBAtBiB;AACd,UAAIR,aAAa,GAAG,KAAKA,aAAzB;AACA,UAAIS,MAAM,GAAG,KAAKA,MAAlB;AACA,aAAO;AACHC,QAAAA,GAAG,EAAED,MAAM,CAACE,CADT;AAEHC,QAAAA,IAAI,EAAEH,MAAM,CAACI,CAFV;AAGHC,QAAAA,MAAM,EAAEL,MAAM,CAACE,CAAP,GAAYX,aAAa,CAACM,WAAd,GAA4B,KAAKT,aAAL,CAAmBQ,MAHhE;AAIHU,QAAAA,KAAK,EAAEN,MAAM,CAACI,CAAP,GAAYb,aAAa,CAACI,UAAd,GAA2B,KAAKP,aAAL,CAAmBM;AAJ9D,OAAP;AAMH;;;;EAzBsBa,uC","sourcesContent":["import { drawImage } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * an Image\n */\nexport class Image extends PrimitiveComponent {\n    /**\n     * @param {Object} options\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * @type {window.Image} unscaledImage the original image\n         */\n        this.unscaledImage = options.image;\n    }\n\n    /**\n     * get the bounding box\n     * @type {{top: number, left: number, bottom: number, right:number}} boundingBox\n     */\n    get boundingBox() {\n        let compoundScale = this.compoundScale;\n        let offset = this.offset;\n        return {\n            top: offset.y,\n            left: offset.x,\n            bottom: offset.y + (compoundScale.scaleHeight * this.unscaledImage.height),\n            right: offset.x + (compoundScale.scaleWidth * this.unscaledImage.width)\n        };\n    }\n\n    /**\n     * override the render function for images specifically\n     * @override\n     */\n    render() {\n        let scale = this.compoundScale;\n        let image = new window.Image();\n        image.src = this.unscaledImage.src;\n        image.width = this.unscaledImage.width * scale.scaleWidth;\n        image.height = this.unscaledImage.height * scale.scaleHeight;\n        drawImage(0, 0, image, this._prerenderingContext, this.style);\n    };\n}\n"],"file":"Image.js"}