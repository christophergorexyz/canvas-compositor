{"version":3,"sources":["../src/Compositor.js"],"names":["Compositor","canvas","_canvas","_context","getContext","style","window","getComputedStyle","_mouseX","_mouseY","borderLeft","getPropertyValue","parseFloat","paddingLeft","_leftPadding","borderTop","paddingTop","_topPadding","_currentTime","_lastFrameTimestamp","_targetObject","_scene","Composition","_bindEvents","_animationLoop","_framerate","requestAnimationFrame","bind","Date","scene","needsDraw","Renderer","clearRect","width","height","draw","parseInt","_cc","addEventListener","Events","MOUSEDOWN","e","dispatchEvent","MOUSEMOVE","MOUSEUP","MOUSEOUT","CLICK","_handleMouseDown","_handleMouseMove","_handleMouseUp","_handleMouseOut","_handleClick","preventDefault","x","offsetX","y","offsetY","canvasX","canvasY","clickedObject","childAt","children","c","val","EventEmitter"],"mappings":"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","sourcesContent":["import * as Renderer from './Renderer';\nimport {\n    Composition\n} from './Composition';\nimport {\n    PrimitiveComponent\n} from './PrimitiveComponent';\nimport {\n    Circle\n} from './Circle';\nimport {\n    Ellipse\n} from './Ellipse';\nimport {\n    Rectangle\n} from './Rectangle';\nimport {\n    Line\n} from './Line';\nimport {\n    VectorPath\n} from './VectorPath';\nimport {\n    Bezier\n} from './Bezier';\nimport {\n    Image\n} from './Image';\nimport {\n    Text\n} from './Text';\n\nimport * as Defaults from './Defaults';\n\nimport {\n    EventEmitter\n} from 'micro-mvc';\n\nimport * as Events from './Events';\n\n//const FPS_EPSILON = 10; // +/- 10ms for animation loop to determine if enough time has passed to render\n//const DEFAULT_TARGET_FPS = 1000 / 60; //amount of time that must pass before rendering\n\n/**\n * The Compositor class is the entry-point to usage of the `canvas-compositor`.\n * The application programmer is expected to hand over low-level control of the canvas\n * context to the high-level classes and methods exposed by CanvasCompositor.\n *\n * The Compositor class establishes an event dispatcher, animation loop, and scene graph for\n * compositions.\n */\nclass Compositor extends EventEmitter {\n    /**\n     * The Compositor class establishes an event dispatcher, animation loop, and scene graph for\n     * compositions\n     *\n     * @param {object} canvas This should be a canvas, either from the DOM or an equivalent API\n     *\n     * @example\n     * let cc = new Compositor(document.getElementById('myCanvas'));\n     */\n    constructor(canvas) {\n        super();\n        /**\n         * The canvas used by the compositor\n         */\n        this._canvas = canvas;\n        /**\n         * The context used by the compositor\n         */\n        this._context = this._canvas.getContext('2d');\n\n        //acquire the padding on the canvas â€“ this is necessary to properly\n        //locate the mouse position\n        //TODO: determine if border-box affects this, and adjust accordingly\n        let style = window.getComputedStyle(this._canvas);\n\n        /**\n         * The x coordinate of the mouse position within the canvas\n         * @type {number}\n         */\n        this._mouseX = null;\n\n        /**\n         * The y coordinate of the mouse position within the canvas\n         * @type {number}\n         */\n        this._mouseY = null;\n\n        let borderLeft = style.getPropertyValue('border-left') ? parseFloat(style.getPropertyValue('border-left')) : 0;\n        let paddingLeft = style.getPropertyValue('padding-left') ? parseFloat(style.getPropertyValue('padding-left')) : 0;\n\n        /**\n         * Any left padding and border added to the canvas must be known to calculate mouse position\n         * @type {number}\n         */\n        this._leftPadding = borderLeft + paddingLeft;\n\n        let borderTop = style.getPropertyValue('border-top') ? parseFloat(style.getPropertyValue('border-top')) : 0;\n        let paddingTop = style.getPropertyValue('padding-top') ? parseFloat(style.getPropertyValue('padding-top')) : 0;\n\n        /**\n         * Any top padding and border added to the canvas must be known to calculate mouse position\n         * @type {number}\n         */\n        this._topPadding = borderTop + paddingTop;\n\n        /**\n         * The timestamp of the current loop of animation\n         * @type {number}\n         */\n        this._currentTime = 0;\n\n        /**\n         * The timestamp of the last frame drawn by the animation loop\n         * @type {number}\n         */\n        this._lastFrameTimestamp = 0;\n\n        /**\n         * The timestamp of the last render performed by the animation loop\n         * @type {number}\n         */\n        //this._lastRenderTime = 0;\n\n        /**\n         * The object last granted \"focus\"\n         * @type {object}\n         */\n        this._targetObject = null;\n\n        /**\n         * The scene composition. This is the root object to be rendered, everything else rendered must be a child of the scene\n         * @type {object}\n         */\n        this._scene = new Composition(this.canvas);\n\n        this._bindEvents();\n\n        this._animationLoop();\n\n        /**\n         * The framerate of the animation loop\n         * @type {number}\n         */\n        this._framerate = 0;\n    }\n\n    /**\n     * retrieve the current framerate\n     * @type {number}\n     */\n    get framerate() {\n        //var framerateUpdatedEvent = new Event();\n        return this._framerate;\n    }\n\n    //TODO: multiple target objects? in reverse order of render? in order of composition?\n    /**\n     * the object currently selected for interaction\n     * @type {object}\n     */\n    get targetObject() {\n        return this._targetObject;\n    }\n    /**\n     * the object currently selected for interaction\n     * @param {object} val\n     * @type {object}\n     */\n    set targetObject(val) {\n        this._targetObject = val;\n    }\n\n    /**\n     * the root of the scene graph. add primitives to this to compose an image\n     * @type {object}\n     */\n    get scene() {\n        return this._scene;\n    }\n\n    /**\n     * get the X position of the mouse on the canvas\n     * @type {number}\n     */\n    get mouseX() {\n        return this._mouseX;\n    }\n\n    /**\n     * get the Y position of the mouse on the canvas\n     * @type {number}\n     */\n    get mouseY() {\n        return this._mouseY;\n    }\n\n    /**\n     * The animation loop for this instance of Compositor.\n     * Upon receipt of the animation frame from `requestAnimationFrame`, the loop will check\n     * whether enough time has passed to redraw for the target framerate.\n     * It will only draw if somewhere along the scene graph, an object needs updating.\n     * There is no need to invoke this directly, the constructor will do it.\n     */\n    _animationLoop() {\n        window.requestAnimationFrame(this._animationLoop.bind(this));\n        this._currentTime = +new Date();\n        //set maximum of 60 fps and only redraw if necessary\n        if ( /*this._currentTime - this._lastFrameTimestamp >= this._targetFPS &&*/ this.scene.needsDraw) {\n            //this._lastRenderTime = +new Date();\n            Renderer.clearRect(0, 0, this._canvas.width, this._canvas.height, this._context);\n            this.scene.draw(this._context);\n        }\n        this._framerate = parseInt(1000 / (this._currentTime - this._lastFrameTimestamp));\n        this._lastFrameTimestamp = +new Date();\n\n    }\n\n    /**\n     * attach interaction events to the canvas. the canvas compositor dispatches\n     * events to relevant objects through bridges to the scene graph\n     */\n    _bindEvents() {\n        //must bind to `this` to retain reference\n\n        let _cc = this;\n        this._canvas.addEventListener(Events.MOUSEDOWN, (e) => {\n            _cc.dispatchEvent(e);\n        });\n\n        this._canvas.addEventListener(Events.MOUSEMOVE, (e) => {\n            _cc.dispatchEvent(e);\n        });\n        this._canvas.addEventListener(Events.MOUSEUP, (e) => {\n            _cc.dispatchEvent(e);\n        });\n        this._canvas.addEventListener(Events.MOUSEOUT, (e) => {\n            _cc.dispatchEvent(e);\n        });\n        this._canvas.addEventListener(Events.CLICK, (e) => {\n            _cc.dispatchEvent(e);\n        });\n\n        this.addEventListener(Events.MOUSEDOWN, this._handleMouseDown);\n        this.addEventListener(Events.MOUSEMOVE, this._handleMouseMove);\n        this.addEventListener(Events.MOUSEUP, this._handleMouseUp);\n        this.addEventListener(Events.MOUSEOUT, this._handleMouseOut);\n        this.addEventListener(Events.CLICK, this._handleClick);\n    }\n\n    /**\n     * bridge the mouse down event on the canvas to the\n     * the objects in the scene graph\n     */\n    _handleMouseDown(e) {\n        e.preventDefault();\n\n        let x = e.offsetX - this._leftPadding;\n        let y = e.offsetY - this._topPadding;\n\n        //pass through x and y to propagated events\n        e.canvasX = x;\n        e.canvasY = y;\n\n        let clickedObject = this.scene.childAt(x, y);\n\n        if (clickedObject) {\n            clickedObject.dispatchEvent(e);\n        }\n    }\n\n    /**\n     * bridge the mouse up event on the canvas to the\n     * the objects in the scene graph\n     */\n    _handleMouseUp(e) {\n        e.preventDefault();\n\n        let x = e.offsetX - this._leftPadding;\n        let y = e.offsetY - this._topPadding;\n\n        //pass through x and y to propagated events\n        e.canvasX = x;\n        e.canvasY = y;\n\n        for (let c of this.scene.children) {\n            c.dispatchEvent(e);\n        }\n\n        let clickedObject = this.scene.childAt(x, y);\n\n        if (clickedObject) {\n            clickedObject.dispatchEvent(e);\n        }\n    };\n\n    /**\n     * bridge the mouse move event on the canvas to the\n     * the objects in the scene graph\n     */\n    _handleMouseMove(e) {\n        e.preventDefault();\n        this._mouseX = e.offsetX - this._leftPadding;\n        this._mouseY = e.offsetY - this._topPadding;\n\n        for (let c of this.scene.children) {\n            c.dispatchEvent(e)\n        }\n    };\n\n    /**\n     * bridge the click event on the canvas to the\n     * the objects in the scene graph\n     */\n    _handleClick(e) {\n        e.preventDefault();\n\n        let x = e.offsetX - this._leftPadding;\n        let y = e.offsetY - this._topPadding;\n\n        //pass through x and y to propagated events\n        e.canvasX = x;\n        e.canvasY = y;\n\n        let clickedObject = this.scene.childAt(x, y);\n        if (clickedObject) {\n            clickedObject.dispatchEvent(e);\n        }\n    };\n\n    /**\n     * bridge the mouse out event on the canvas to the\n     * the objects in the scene graph\n     */\n    _handleMouseOut(e) {\n        e.preventDefault();\n\n        for (let c of this.scene.children) {\n            c.dispatchEvent(e);\n        };\n    };\n}\n\nexport {\n    Renderer,\n    PrimitiveComponent,\n    Composition,\n    Circle,\n    Ellipse,\n    Rectangle,\n    Line,\n    VectorPath,\n    Bezier,\n    Image,\n    Text,\n    Defaults,\n    Events,\n    Compositor\n};\n"],"file":"Compositor.js"}