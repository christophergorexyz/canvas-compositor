{"version":3,"sources":["../src/Renderer.js"],"names":["DEFAULTS","fillStyle","strokeStyle","lineCap","lineWidth","lineJoin","miterLimit","font","textAlign","textBaseline","lineDash","Renderer","x","y","width","height","context","clearRect","vertices","style","Object","assign","beginPath","moveTo","v","length","lineTo","setLineDash","stroke","closePath","start","end","c1","c2","bezierCurveTo","rect","fill","radius","minorRadius","ellipse","Math","PI","arc","text","fillText","image","drawImage","measureText"],"mappings":"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","sourcesContent":["/**\n * Default style values for the renderer\n */\nexport const DEFAULTS = {\n    //direction: 'inherit',\n    fillStyle: 'black',\n    //filter: 'none',\n    strokeStyle: 'black',\n    lineCap: 'round',\n    lineWidth: 1.0,\n    lineJoin: 'round',\n    miterLimit: 10,\n    font: '10px sans-serif',\n    textAlign: 'start',\n    textBaseline: 'alphabetic',\n    lineDash: []\n}\n\n/**\n * A collection of high level static methods for drawing directly to canvas\n *\n */\nexport class Renderer {\n    /**\n     * Erase everything drawn on the supplied rectangle for the given context.\n     * @param {number} x the x coordinate of the top left corner\n     * @param {number} y the y coordinate of the top left corner\n     * @param {number} width the x coordinate\n     * @param {number} height the y coordinate\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     */\n    static clearRect(x, y, width, height, context) {\n        context.clearRect(x, y, width, height);\n    }\n\n    /**\n     * Draw a path, unclosed, with the given vertices\n     * @param {object} vertices the path of vertices to be drawn\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the path\n     */\n    static drawPath(vertices, context, style) {\n        Object.assign(context, style);\n        context.beginPath();\n        context.moveTo(vertices[0].x, vertices[0].y);\n        for (let v = 1; v < vertices.length; v++) {\n            context.lineTo(vertices[v].x, vertices[v].y);\n        }\n\n        context.setLineDash(style.lineDash);\n        context.stroke();\n    }\n\n    /**\n     * Draw a closed polygon with the given vertices\n     * @param {object} vertices the path of vertices to be drawn\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the polygon\n     */\n    static drawPolygon(vertices, context, style) {\n        Object.assign(context, style);\n        context.beginPath();\n        context.moveTo(vertices[0].x, vertices[0].y);\n        for (let v = 1; v < vertices.length; v++) {\n            context.lineTo(vertices[v].x, vertices[v].y);\n        }\n        context.closePath();\n        context.setLineDash(style.lineDash);\n        context.stroke();\n    }\n\n    static drawBezier(start, end, c1, c2, context, style) {\n        Object.assign(context, style);\n        //must `beginPath()` before `moveTo` to get correct starting position\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, end.x, end.y);\n        context.setLineDash(style.lineDash);\n        context.stroke();\n        context.closePath();\n    }\n\n    /**\n     * Draw a rectangle\n     * @param {number} x the x coordinate of the top let corner\n     * @param {number} y the y coordinate of the top left corner\n     * @param {number} width the x coordinate\n     * @param {number} height the y coordinate\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the rectangle\n     */\n    static drawRectangle(x, y, width, height, context, style) {\n        Object.assign(context, style);\n        context.rect(x, y, width, height);\n        context.fill();\n        context.setLineDash(style.lineDash);\n        context.stroke();\n    }\n\n    //TODO: provide support for rotation and startAngle parameters\n    /**\n     * Draw an ellipse\n     * @param {number} x the x coordinate of the center of the ellipse\n     * @param {number} y the y coordinate of the center of the ellipse\n     * @param {number} radius the larger radius of the ellipse\n     * @param {number} minorRadius the smaller radius of the ellipse\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the ellipse\n     */\n    static drawEllipse(x, y, radius, minorRadius, context, style) {\n        Object.assign(context, style);\n        //TODO: 2017-05-22 this is currently not supported by IE\n        context.ellipse(x, y, radius, minorRadius, 0, 0, 2 * Math.PI);\n        context.fill();\n        context.setLineDash(style.lineDash);\n        context.stroke();\n    }\n\n    /**\n     * Draw a circle\n     * @param {number} x the x coordinate of the center of the circle\n     * @param {number} y the y coordinate of the center of the circle\n     * @param {number} radius of the circle\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the circle\n     */\n    static drawCircle(x, y, radius, context, style) {\n        Object.assign(context, style);\n        context.arc(x, y, radius, 0, 2 * Math.PI);\n        //TODO: 2015-03-12 this is currently only supported by chrome & opera\n        //context.ellipse(x, y, radius, radius, 0, 0, 2 * Math.PI);\n        context.fill();\n        context.setLineDash(style.lineDash);\n        context.stroke();\n    }\n\n    /**\n     * Draw text\n     * @param {number} x the x coordinate of the top let corner\n     * @param {number} y the y coordinate of the top left corner\n     * @param {string} text the text to be drawn\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the text\n     */\n    static drawText(x, y, text, context, style) {\n        Object.assign(context, style);\n        context.fillText(text, x, y);\n        //TODO: implement stroke text if specified\n    }\n\n    /**\n     * Draw an image\n     * @param {number} x the x coordinate of the top let corner\n     * @param {number} y the y coordinate of the top left corner\n     * @param {object} image the image to be drawn to the canvas\n     * @param {object} context the 2D Context object for the canvas we're drawing onto\n     * @param {object} style the style options to be used when drawing the image\n     */\n    static drawImage(x, y, image, context, style) {\n        Object.assign(context, style);\n        //no reason to draw 0-sized images\n        if (image.width > 0 && image.height > 0) {\n            context.drawImage(image, x, y, image.width, image.height);\n        }\n    }\n\n    //TODO: this should probably be exposed elsewhere/differently\n    /**\n     * Measure the text\n     * @param {string} text the text to be measured\n     * @param {object} context the 2D Context object for a canvas - required for measurement to occur, but may be arbitrary\n     * @param {object} style the style options to be used when measuring the text\n     * @return {object} [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) object containing info like Width\n     */\n    static measureText(text, context, style) {\n        Object.assign(context, style);\n        return context.measureText(text);\n    }\n}\n"],"file":"Renderer.js"}