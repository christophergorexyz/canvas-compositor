{"version":3,"file":"renderer.js","names":["clearRect","x","y","width","height","context","drawPath","vertices","style","Object","assign","beginPath","moveTo","v","length","lineTo","setLineDash","lineDash","stroke","drawPolygon","closePath","drawBezier","start","end","c1","c2","bezierCurveTo","drawRectangle","rect","fill","drawEllipse","radius","minorRadius","ellipse","Math","PI","drawCircle","arc","drawText","text","fillText","drawImage","image"],"sources":["../../src/context-2d/renderer.mjs"],"sourcesContent":["/**\n * @module\n */\n\n/**\n * Erase everything drawn on the supplied rectangle for the given context.\n * @param {number} x the x coordinate of the top left corner\n * @param {number} y the y coordinate of the top left corner\n * @param {number} width the x coordinate\n * @param {number} height the y coordinate\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n */\nexport function clearRect(x, y, width, height, context) {\n  context.clearRect(x, y, width, height);\n}\n\n/**\n * Draw a path, unclosed, with the given vertices\n * @param {object} vertices the path of vertices to be drawn\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the path\n */\nexport function drawPath(vertices, context, style) {\n  Object.assign(context, style);\n  context.beginPath();\n  context.moveTo(vertices[0].x, vertices[0].y);\n  for (let v = 1; v < vertices.length; v++) {\n    context.lineTo(vertices[v].x, vertices[v].y);\n  }\n\n  context.setLineDash(style.lineDash);\n  context.stroke();\n}\n\n/**\n * Draw a closed polygon with the given vertices\n * @param {object} vertices the path of vertices to be drawn\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the polygon\n */\nexport function drawPolygon(vertices, context, style) {\n  Object.assign(context, style);\n  context.beginPath();\n  context.moveTo(vertices[0].x, vertices[0].y);\n  for (let v = 1; v < vertices.length; v++) {\n    context.lineTo(vertices[v].x, vertices[v].y);\n  }\n  context.closePath();\n  context.setLineDash(style.lineDash);\n  context.stroke();\n}\n\n/**\n * Draw a Bezier curve\n * @param {object} start the starting vertex\n * @param {object} end the ending vertext\n * @param {object} c1 control point 1\n * @param {object} c2 control point 2\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the curve\n */\nexport function drawBezier(start, end, c1, c2, context, style) {\n  Object.assign(context, style);\n  //must `beginPath()` before `moveTo` to get correct starting position\n  context.beginPath();\n  context.moveTo(start.x, start.y);\n  context.bezierCurveTo(c1.x, c1.y, c2.x, c2.y, end.x, end.y);\n  context.setLineDash(style.lineDash);\n  context.stroke();\n  context.closePath();\n}\n\n/**\n * Draw a rectangle\n * @param {number} x the x coordinate of the top let corner\n * @param {number} y the y coordinate of the top left corner\n * @param {number} width the x coordinate\n * @param {number} height the y coordinate\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the rectangle\n */\nexport function drawRectangle(x, y, width, height, context, style) {\n  Object.assign(context, style);\n  context.rect(x, y, width, height);\n  context.fill();\n  context.setLineDash(style.lineDash);\n  context.stroke();\n}\n\n//TODO: provide support for rotation and startAngle parameters\n/**\n * Draw an ellipse\n * @param {number} x the x coordinate of the center of the ellipse\n * @param {number} y the y coordinate of the center of the ellipse\n * @param {number} radius the larger radius of the ellipse\n * @param {number} minorRadius the smaller radius of the ellipse\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the ellipse\n */\nexport function drawEllipse(x, y, radius, minorRadius, context, style) {\n  Object.assign(context, style);\n  //TODO: 2017-05-22 this is currently not supported by IE\n  context.ellipse(x, y, radius, minorRadius, 0, 0, 2 * Math.PI);\n  context.fill();\n  context.setLineDash(style.lineDash);\n  context.stroke();\n}\n\n/**\n * Draw a circle\n * @param {number} x the x coordinate of the center of the circle\n * @param {number} y the y coordinate of the center of the circle\n * @param {number} radius of the circle\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the circle\n */\nexport function drawCircle(x, y, radius, context, style) {\n  Object.assign(context, style);\n  context.arc(x, y, radius, 0, 2 * Math.PI);\n  //TODO: 2015-03-12 this is currently only supported by chrome & opera\n  //context.ellipse(x, y, radius, radius, 0, 0, 2 * Math.PI);\n  context.fill();\n  context.setLineDash(style.lineDash);\n  context.stroke();\n}\n\n/**\n * Draw text\n * @param {number} x the x coordinate of the top let corner\n * @param {number} y the y coordinate of the top left corner\n * @param {string} text the text to be drawn\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the text\n */\nexport function drawText(x, y, text, context, style) {\n  Object.assign(context, style);\n  context.fillText(text, x, y);\n  //TODO: implement stroke text if specified\n}\n\n/**\n * Draw an image\n * @param {number} x the x coordinate of the top let corner\n * @param {number} y the y coordinate of the top left corner\n * @param {object} image the image to be drawn to the canvas\n * @param {object} context the 2D Context object for the canvas we're drawing onto\n * @param {object} style the style options to be used when drawing the image\n */\nexport function drawImage(x, y, image, context, style) {\n  Object.assign(context, style);\n  //no reason to draw 0-sized images\n  if (image.width > 0 && image.height > 0) {\n    context.drawImage(image, x, y, image.width, image.height);\n  }\n}\n"],"mappings":"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"}