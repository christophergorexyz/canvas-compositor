{"version":3,"file":"line.js","names":["Line","anchor","direction","p1","p2","Vector","add","l","intersection","l1","l2","x1","x","x2","x3","x4","y1","y","y2","y3","y4","denominator","xNumerator","yNumerator"],"sources":["../../src/context-2d/line.mjs"],"sourcesContent":["import { Vector } from 'vectorious';\n\n/**\n * A line\n */\nexport default class Line {\n  /**\n   * A Line can be defined by two points, p1 and p2, through\n   * which it passes. Here, an anchor point is supplied for p1,\n   * and a unit vector, direction, is added to it to provided\n   * the second.\n   * @param {object} anchor\n   * @param {object} direction\n   */\n  constructor(anchor, direction) {\n    /**\n     * a vector describing a point through which the line passes\n     * @type {object}\n     */\n    this.p1 = anchor;\n\n    /**\n     * a unit vector describing the direction from p1\n     * @type {object}\n     */\n    this.direction = direction;\n\n    /**\n     * a vector describing a second point through which the line passes\n     * @type {object}\n     */\n    this.p2 = Vector.add(this.p1, this.direction);\n  }\n\n  /**\n   * determine the location that this line intersects with another, if at all\n   * @param {object} l the Line to test for intersection against this Line\n   * @return {object} the vector of the location of intersection, or null if the lines are parallel\n   */\n  intersectionWith(l) {\n    return Line.intersection(this, l);\n  }\n\n  /**\n   * determine the location that these lines intersect, if at all\n   * @param {object} l1 the first Line to test for intersection\n   * @param {object} l2 the second Line to test for intersection\n   * @return {object} the vector of the location of intersection, or null if the lines are parallel\n   */\n  static intersection(l1, l2) {\n    let x1 = l1.p1.x,\n      x2 = l1.p2.x,\n      x3 = l2.p1.x,\n      x4 = l2.p2.x;\n    let y1 = l1.p1.y,\n      y2 = l1.p2.y,\n      y3 = l2.p1.y,\n      y4 = l2.p2.y;\n    let denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (denominator === 0) {\n      return null;\n    }\n\n    let xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    let yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    return new Vector([xNumerator / denominator, yNumerator / denominator]);\n  }\n}\n"],"mappings":";;;;;;AAAA;AAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpC;AACA;AACA;AAFA,IAGqBA,IAAI;EACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,cAAYC,MAAM,EAAEC,SAAS,EAAE;IAAA;IAC7B;AACJ;AACA;AACA;IACI,IAAI,CAACC,EAAE,GAAGF,MAAM;;IAEhB;AACJ;AACA;AACA;IACI,IAAI,CAACC,SAAS,GAAGA,SAAS;;IAE1B;AACJ;AACA;AACA;IACI,IAAI,CAACE,EAAE,GAAGC,kBAAM,CAACC,GAAG,CAAC,IAAI,CAACH,EAAE,EAAE,IAAI,CAACD,SAAS,CAAC;EAC/C;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,0BAAiBK,CAAC,EAAE;MAClB,OAAOP,IAAI,CAACQ,YAAY,CAAC,IAAI,EAAED,CAAC,CAAC;IACnC;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,sBAAoBE,EAAE,EAAEC,EAAE,EAAE;MAC1B,IAAIC,EAAE,GAAGF,EAAE,CAACN,EAAE,CAACS,CAAC;QACdC,EAAE,GAAGJ,EAAE,CAACL,EAAE,CAACQ,CAAC;QACZE,EAAE,GAAGJ,EAAE,CAACP,EAAE,CAACS,CAAC;QACZG,EAAE,GAAGL,EAAE,CAACN,EAAE,CAACQ,CAAC;MACd,IAAII,EAAE,GAAGP,EAAE,CAACN,EAAE,CAACc,CAAC;QACdC,EAAE,GAAGT,EAAE,CAACL,EAAE,CAACa,CAAC;QACZE,EAAE,GAAGT,EAAE,CAACP,EAAE,CAACc,CAAC;QACZG,EAAE,GAAGV,EAAE,CAACN,EAAE,CAACa,CAAC;MACd,IAAII,WAAW,GAAG,CAACV,EAAE,GAAGE,EAAE,KAAKM,EAAE,GAAGC,EAAE,CAAC,GAAG,CAACJ,EAAE,GAAGE,EAAE,KAAKJ,EAAE,GAAGC,EAAE,CAAC;MAC/D,IAAIM,WAAW,KAAK,CAAC,EAAE;QACrB,OAAO,IAAI;MACb;MAEA,IAAIC,UAAU,GAAG,CAACX,EAAE,GAAGO,EAAE,GAAGF,EAAE,GAAGH,EAAE,KAAKC,EAAE,GAAGC,EAAE,CAAC,GAAG,CAACJ,EAAE,GAAGE,EAAE,KAAKC,EAAE,GAAGM,EAAE,GAAGD,EAAE,GAAGJ,EAAE,CAAC;MAClF,IAAIQ,UAAU,GAAG,CAACZ,EAAE,GAAGO,EAAE,GAAGF,EAAE,GAAGH,EAAE,KAAKM,EAAE,GAAGC,EAAE,CAAC,GAAG,CAACJ,EAAE,GAAGE,EAAE,KAAKJ,EAAE,GAAGM,EAAE,GAAGD,EAAE,GAAGJ,EAAE,CAAC;MAClF,OAAO,IAAIV,kBAAM,CAAC,CAACiB,UAAU,GAAGD,WAAW,EAAEE,UAAU,GAAGF,WAAW,CAAC,CAAC;IACzE;EAAC;EAAA;AAAA;AAAA"}