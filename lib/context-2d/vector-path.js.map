{"version":3,"file":"vector-path.js","names":["VectorPath","options","_vertices","vertices","_zeroedBoundingBox","top","left","right","_right","_left","bottom","_bottom","_top","offset","y","style","lineWidth","x","verts","map","v","Vector","yCoordinates","xCoordinates","Math","min","apply","max","_zeroedVertices","subtract","d","inside","l","Line","compoundScale","i","length","j","_scaleVectorXY","scaleWidth","scaleHeight","add","w","edgeDirection","normalize","edge","intersection","intersectionWith","intersectToTheRight","Number","EPSILON","negativeX","negativeY","leftVertex","rightVertex","topVertex","bottomVertex","intersectWithinSegment","boundingBox","pathToDraw","vertex","drawPath","_prerenderingContext","PrimitiveComponent","vector","scaleX","scaleY"],"sources":["../../src/context-2d/vector-path.mjs"],"sourcesContent":["import { Vector } from 'vectorious';\n\nimport { drawPath } from './renderer.mjs';\nimport PrimitiveComponent from './primitive-component.mjs';\nimport Line from './line.mjs';\n\n\n\n//would name the file 'path', but damn near everything\n//relies on the filesystem 'path' module\n\n/**\n * An ordered set of vectors defining a path\n */\nexport default class VectorPath extends PrimitiveComponent {\n  /**\n   * see PrimitiveComponent for more options\n   * @param {Object} options the options for the object\n   * @param {Object[]} options.vertices the vertices\n   * @param {number} options.vertices[].x the y coordinate for a vertex\n   * @param {number} options.vertices[].y the y coordinate for a vertex\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * The sequence of vertices in the path\n     */\n    this._vertices = [];\n    this.vertices = options.vertices || [];\n\n    //this.unscaledLineWidth = this.style.lineWidth;\n\n    /**\n     * A zeroed bounding box where (left, top) is (0, 0)\n     */\n    this._zeroedBoundingBox = null;\n  }\n\n  /**\n   * get the bounding box for the vertices in the path\n   * @type {{top:number, left: number, bottom:number, right:number}}\n   */\n  get boundingBox() {\n    /**\n     * The bounding box zeroed\n     * @property {number} top always 0\n     * @property {number} left always 0\n     * @property {number} right the distance from the leftmost vector to the rightmost\n     * @property {number} bottom the distance from the topmost vector to the bottommost\n     */\n    this._zeroedBoundingBox = {\n      top: 0,\n      left: 0,\n      right: this._right - this._left,\n      bottom: this._bottom - this._top\n    };\n\n    //TODO: reimplement scaling\n    return {\n      top: this._zeroedBoundingBox.top + this.offset.y - this.style.lineWidth,\n      left: this._zeroedBoundingBox.left + this.offset.x - this.style.lineWidth,\n      bottom: this._zeroedBoundingBox.bottom + this.offset.y + this.style.lineWidth,\n      right: this._zeroedBoundingBox.right + this.offset.x + this.style.lineWidth\n    };\n  }\n\n  /**\n   * retrieve the sequence of vertices in the path\n   * @type {Array.<{x: number, y: number }>}\n   */\n  get vertices() {\n    return this._vertices;\n  }\n\n  /**\n   * set the list of vertices\n   * @param {Array.<{x: number, y: number }>} verts The list of vertices to be used\n   */\n  set vertices(verts) {\n    /**\n     * the list of vertices as vectorious Vectors\n     * @type {object[]}\n     */\n    this._vertices = verts.map(v => new Vector([v.x, v.y]));\n\n    let yCoordinates = this.vertices.map(v => v.y);\n    let xCoordinates = this.vertices.map(v => v.x);\n\n    //uses `apply` so we can supply the list as a list of arguments\n    /**\n     * the leftmost x-coordinate\n     * @type {number}\n     */\n    this._left = Math.min.apply(null, xCoordinates);\n\n    /**\n     * the topmost y-coordinate\n     * @type {number}\n     */\n    this._top = Math.min.apply(null, yCoordinates);\n\n    /**\n     * the rightmost x-coordinate\n     * @type {number}\n     */\n    this._right = Math.max.apply(null, xCoordinates);\n\n    /**\n     * the bottommost y-coordinate\n     * @type {number}\n     */\n    this._bottom = Math.max.apply(null, yCoordinates);\n\n    super.d = new Vector([this._left, this._top]);\n\n    /**\n     * Vertices zeroed against the displacement vector\n     */\n    this._zeroedVertices = this.vertices.map(v => v.subtract(this.d));\n\n    super.needsDraw = true;\n    super.needsRender = true;\n  }\n\n  /**\n   * determine whether the point is in the object\n   * even/odd line intersection test against the outer edge of the line-width\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @return {boolean} whether or not the point is in the object\n   */\n  pointIsInObject(x, y) {\n    let inside = false;\n\n    //only bother with this check if we already know we're within the bounding box\n    if (super.pointIsInObject(x, y)) {\n      //create a line that travels from this point in any direction\n      //if it intersects the polygon an odd number of times, it is inside\n\n      //a line can be described by a vertex and a direction\n      let l = new Line(new Vector([x, y]), new Vector([1, 0]));\n\n      let compoundScale = this.compoundScale;\n      let offset = this.offset;\n\n      for (let i = 0; i < this._zeroedVertices.length; i++) {\n        let j = (i + 1) >= this._zeroedVertices.length ? 0 : i + 1;\n\n        //TODO: reimplement scaling\n        let v = _scaleVectorXY(this._zeroedVertices[i], compoundScale.scaleWidth, compoundScale.scaleHeight)\n          .add(offset);\n\n        let w = _scaleVectorXY(this._zeroedVertices[j], compoundScale.scaleWidth, compoundScale.scaleHeight)\n          .add(offset);\n\n        //for some reason, the below doesn't work\n        //let v = this._zeroedVertices[i].add(offset);\n\n        //let w = this._zeroedVertices[j].add(offset);\n\n\n        //TODO: determine how to account for lineWidths.\n        //it becomes complicated to determine which side of\n        //the line forms the outside edge unless you already\n        //know you're \"inside\" the polygon path\n        let edgeDirection = Vector.subtract(w, v).normalize();\n        let edge = new Line(v, edgeDirection);\n        let intersection = edge.intersectionWith(l);\n\n        //if the lines are parallel/colocated, no need to count;\n        if (intersection === null) {\n          continue;\n        }\n\n        //TODO: should replace 0s with epsilons, where epsilon is\n        //the threshhold for considering two things as touching/intersecting\n        let intersectToTheRight = intersection.x - x >= Number.EPSILON;\n\n        //if the intersection is not to the right, no need to count\n        if (!intersectToTheRight) {\n          continue;\n        }\n\n        let negativeX = (edgeDirection.x < -Number.EPSILON);\n        let negativeY = (edgeDirection.y < -Number.EPSILON);\n\n        //technically speaking, bottom and top should be reversed,\n        //since y=0 is the top left corner of the screen - it's\n        //just easier to think about it mathematically this way\n        let leftVertex = negativeX ? w : v;\n        let rightVertex = negativeX ? v : w;\n        let topVertex = negativeY ? w : v;\n        let bottomVertex = negativeY ? v : w;\n\n        let intersectWithinSegment =\n          (intersection.x - leftVertex.x >= Number.EPSILON) &&\n          (rightVertex.x - intersection.x >= Number.EPSILON) &&\n          (intersection.y - topVertex.y >= Number.EPSILON) &&\n          (bottomVertex.y - intersection.y >= Number.EPSILON);\n\n        if (intersectWithinSegment) {\n          inside = !inside;\n        }\n      }\n    }\n    return inside;\n  }\n\n  /**\n   * override the render function for drawing vector paths specifically\n   * @override\n   */\n  render() {\n    let boundingBox = this.boundingBox;\n    let offset = this.offset;\n    //let compoundScale = this.compoundScale;\n    //zero the vertices (left- and top-most x/y-values should be 0 and 0)\n    //TODO: reimplement scaling\n    let pathToDraw = this._zeroedVertices.map(vertex =>\n      vertex.subtract(new Vector([boundingBox.left, boundingBox.top])).add(offset));\n    drawPath(pathToDraw, this._prerenderingContext, this.style);\n  }\n}\n\n\n//for scaling a vector\n//TODO: reimplement scaling\n/**\n * scale the vectors\n * @param {object} vector the vector to scale\n * @param {number} scaleX the amount to scale the x component of the vector\n * @param {number} scaleY the amount to scale the y component of the vector\n */\nfunction _scaleVectorXY(vector, scaleX, scaleY) {\n  return new Vector([vector.x * scaleX, vector.y * scaleY]);\n}\n"],"mappings":"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"}