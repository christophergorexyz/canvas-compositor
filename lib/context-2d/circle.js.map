{"version":3,"file":"circle.js","names":["Circle","options","radius","offset","scale","compoundScale","top","y","scaleHeight","style","lineWidth","left","x","scaleWidth","bottom","right","drawCircle","_prerenderingContext","a","b","c","PrimitiveComponent"],"sources":["../../src/context-2d/circle.mjs"],"sourcesContent":["import { drawCircle } from './renderer.mjs';\nimport PrimitiveComponent from './primitive-component.mjs';\n\n/**\n * A circle\n */\nexport default class Circle extends PrimitiveComponent {\n  //TODO: provide details about options for docs - link to a separate page\n  /**\n   * PrimitiveComponent constructor\n   * @param {object} options object settings\n   */\n  constructor(options) {\n    super(options);\n    /**\n     * the radius of the circle\n     * @type {number}\n     */\n    this.radius = options.radius || 0;\n  }\n\n  /**\n   * get the bounding box of the circle;\n   * @type {{top:number, left: number, bottom:number, right:number}}\n   */\n  get boundingBox() {\n    //TODO: possibly memory-inefficient - need to research:\n    //strokes are (were?) centered over the mathematical perimeter -\n    //so half the stroke laid within the perimeter, and the\n    //other half laid outside. for some reason, this doesn't\n    //work for (0 < lineWidth < 2.0).\n    //\n    //it's just a pixel, but when a thousand objects are on screen,\n    //that'll make a difference\n    let offset = this.offset;\n    let scale = this.compoundScale;\n    return {\n      top: offset.y -\n        ((this.radius * scale.scaleHeight) +\n          (this.style.lineWidth)),\n      left: offset.x -\n        ((this.radius * scale.scaleWidth) +\n          (this.style.lineWidth)),\n      bottom: offset.y +\n        (this.radius * scale.scaleHeight) +\n        (this.style.lineWidth),\n      right: offset.x +\n        (this.radius * scale.scaleWidth) +\n        (this.style.lineWidth)\n    };\n  }\n\n  /**\n   * override the render function for drawing circles specifically\n   * @override\n   */\n  render() {\n    //the below is to ensure the proper placement when scaling/line widths are accounted for\n    let scale = this.compoundScale;\n    let lineWidth = this.style.lineWidth;\n    drawCircle(\n      (this.radius * scale.scaleWidth) + lineWidth,\n      (this.radius * scale.scaleHeight) + lineWidth,\n      (this.radius * scale.scaleWidth),\n      this._prerenderingContext,\n      this.style\n    );\n  }\n\n  /**\n   * determine whether the point is in the object\n   * basically just the pythagorean theorem\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @return {boolean} whether or not the point is in the object\n   */\n  pointIsInObject(x, y) {\n\n    let offset = this.offset;\n\n    //don't bother checking the bounding box because\n    //pythagorean formula is closed-form\n    let a = x - offset.x;\n    let b = y - offset.y;\n    let c = this.radius;\n\n    //thanks pythagoras~!\n    return (a * a) + (b * b) <= (c * c);\n    //use the below when scaling is reimplemented\n    /*\n    return (\n      CanvasObject.prototype.PointIsInObject.call(this, x, y) &&\n      Math.pow((x - this.offset.x), 2) / Math.pow((this.radius * this.GlobalScale.scaleWidth), 2) + Math.pow((y - this.offset.y), 2) / Math.pow((this.radius * this.GlobalScale.scaleHeight), 2) <= 1\n    );*/\n  }\n}\n"],"mappings":";;;;;;;AAAA;AACA;AAA2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3D;AACA;AACA;AAFA,IAGqBA,MAAM;EAAA;EAAA;EACzB;EACA;AACF;AACA;AACA;EACE,gBAAYC,OAAO,EAAE;IAAA;IAAA;IACnB,0BAAMA,OAAO;IACb;AACJ;AACA;AACA;IACI,MAAKC,MAAM,GAAGD,OAAO,CAACC,MAAM,IAAI,CAAC;IAAC;EACpC;;EAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,KAIA,eAAkB;MAChB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAIC,MAAM,GAAG,IAAI,CAACA,MAAM;MACxB,IAAIC,KAAK,GAAG,IAAI,CAACC,aAAa;MAC9B,OAAO;QACLC,GAAG,EAAEH,MAAM,CAACI,CAAC,IACT,IAAI,CAACL,MAAM,GAAGE,KAAK,CAACI,WAAW,GAC9B,IAAI,CAACC,KAAK,CAACC,SAAU,CAAC;QAC3BC,IAAI,EAAER,MAAM,CAACS,CAAC,IACV,IAAI,CAACV,MAAM,GAAGE,KAAK,CAACS,UAAU,GAC7B,IAAI,CAACJ,KAAK,CAACC,SAAU,CAAC;QAC3BI,MAAM,EAAEX,MAAM,CAACI,CAAC,GACb,IAAI,CAACL,MAAM,GAAGE,KAAK,CAACI,WAAY,GAChC,IAAI,CAACC,KAAK,CAACC,SAAU;QACxBK,KAAK,EAAEZ,MAAM,CAACS,CAAC,GACZ,IAAI,CAACV,MAAM,GAAGE,KAAK,CAACS,UAAW,GAC/B,IAAI,CAACJ,KAAK,CAACC;MAChB,CAAC;IACH;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,kBAAS;MACP;MACA,IAAIN,KAAK,GAAG,IAAI,CAACC,aAAa;MAC9B,IAAIK,SAAS,GAAG,IAAI,CAACD,KAAK,CAACC,SAAS;MACpC,IAAAM,oBAAU,EACP,IAAI,CAACd,MAAM,GAAGE,KAAK,CAACS,UAAU,GAAIH,SAAS,EAC3C,IAAI,CAACR,MAAM,GAAGE,KAAK,CAACI,WAAW,GAAIE,SAAS,EAC5C,IAAI,CAACR,MAAM,GAAGE,KAAK,CAACS,UAAU,EAC/B,IAAI,CAACI,oBAAoB,EACzB,IAAI,CAACR,KAAK,CACX;IACH;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA;IAAA,OAOA,yBAAgBG,CAAC,EAAEL,CAAC,EAAE;MAEpB,IAAIJ,MAAM,GAAG,IAAI,CAACA,MAAM;;MAExB;MACA;MACA,IAAIe,CAAC,GAAGN,CAAC,GAAGT,MAAM,CAACS,CAAC;MACpB,IAAIO,CAAC,GAAGZ,CAAC,GAAGJ,MAAM,CAACI,CAAC;MACpB,IAAIa,CAAC,GAAG,IAAI,CAAClB,MAAM;;MAEnB;MACA,OAAQgB,CAAC,GAAGA,CAAC,GAAKC,CAAC,GAAGA,CAAE,IAAKC,CAAC,GAAGA,CAAE;MACnC;MACA;AACJ;AACA;AACA;AACA;IACE;EAAC;EAAA;AAAA,EAxFiCC,8BAAkB;AAAA"}