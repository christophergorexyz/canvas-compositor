{"version":3,"sources":["../../src/core/Composition.js"],"names":["Composition","options","_children","children","top","Infinity","left","bottom","right","c","boundingBox","Math","min","max","x","y","filter","PointIsInObject","length","pointIsInObject","child","parent","push","addChild","index","indexOf","splice","offset","draw","_prerenderingContext","Component"],"mappings":"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","sourcesContent":["import Component from './Component';\n\n/**\n * The Composition class is an extension of the Primitive that is\n * composed of other extensions of the Primitive. The Composition\n * is used to establish the Scene graph as the parent of all other\n * objects on screen. This is the key abstraction of the [composite\n * pattern](https://en.wikipedia.org/wiki/Composite_pattern): an\n * action taken on the parent element acts upon all of the children,\n * and transatively, all of their children.\n */\nexport default class Composition extends Component {\n  /**\n   * @param {object} options object settings\n   */\n  constructor(options) {\n    super(options);\n    options = options || {};\n    /**\n     * The children of this composition\n     */\n    this._children = options.children || [];\n  }\n\n  /**\n   * children of this composition\n   * @type {Array} children the which compose this object\n   */\n  get children() {\n    return this._children;\n  }\n\n  /**\n   * the bounding box of the composition (i.e., the containing bounds of all the children of this composition)\n   * @type {{top:number, left:number, right:number, bottom:number}} boundingBox\n   */\n  get boundingBox() {\n    let top = Infinity,\n      left = Infinity,\n      bottom = -Infinity,\n      right = -Infinity;\n\n    for (let c of this.children) {\n      let boundingBox = c.boundingBox;\n      top = Math.min(boundingBox.top, top);\n      left = Math.min(boundingBox.left, left);\n      bottom = Math.max(boundingBox.bottom, bottom);\n      right = Math.max(boundingBox.right, right);\n    };\n\n    return {\n      top: top,\n      left: left,\n      bottom: bottom,\n      right: right\n    };\n  }\n\n\n  /**\n   * the an array of children that are found at (x, y)\n   * @return {object} childrenAt all the children below the point\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   */\n  childrenAt(x, y) {\n    return this.children.filter((c) => c.PointIsInObject(x, y));\n  }\n\n  /**\n   * get the top-most child at the (x, y)\n   * @return {object} childAt the first child below the point\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   */\n  childAt(x, y) {\n    //loop over the children in reverse because drawing order\n    for (var c = this.children.length - 1; c >= 0; c--) {\n      if (this.children[c].pointIsInObject(x, y)) {\n        return this.children[c];\n      }\n    }\n  }\n\n  /**\n   * add a child to this composition\n   * @param {object} child the child to be added\n   */\n  addChild(child) {\n    child.parent = this;\n    this.children.push(child);\n    super.needsRender = true;\n    super.needsDraw = true;\n    //TODO: make this hook more generic\n    //by using a registry\n    //if (this.onchildadded) {\n    //  this.onchildadded();\n    //}\n  }\n\n  /**\n   * add multiple children to the composition\n   * @param {object} children the list of children to be added\n   */\n  addChildren(children) {\n    for (let c of children) {\n      this.addChild(c);\n    }\n  }\n\n  /**\n   * remove a child from this composition\n   * @param {object} child the child to be removed\n   * @return {object} the child removed\n   */\n  removeChild(child) {\n    if (child) {\n      var index = this.children.indexOf(child);\n      if (index >= 0) {\n        super.needsRender = true;\n        super.needsDraw = true;\n        return this.children.splice(index, 1);\n      }\n    }\n  };\n\n  /**\n   * @override\n   * override the render functiont to render the children onto this compositions prerendering canvas\n   */\n  render() {\n    // required to make sure that the drawing occurs within the bounds of this composition\n    let boundingBox = this.boundingBox;\n    var offset = {\n      top: -boundingBox.top,\n      left: -boundingBox.left,\n      bottom: -boundingBox.bottom,\n      right: -boundingBox.right\n    };\n\n    for (let c of this.children) {\n      c.draw(this._prerenderingContext, offset);\n    };\n\n    // `destination-out` will erase things\n    //this._prerenderingContext.globalCompositeOperation = 'destination-out';\n    //_.each(this.masks, function (m) {\n    //m.draw(renderContext, contextOffset);\n    //});\n    //renderContext.globalCompositeOperation = 'normal';\n  };\n}\n"],"file":"Composition.js"}