{"version":3,"sources":["../../src/core/Composition.js"],"names":["Composition","options","_children","children","_boundingBox","reduce","acc","c","top","Math","min","boundingBox","left","bottom","max","right","Infinity","x","y","filter","PointIsInObject","length","pointIsInObject","child","parent","push","dispatchEvent","Event","CHILD_ADDED","addChild","index","indexOf","splice","offset","draw","prerenderingContext","Component"],"mappings":"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","sourcesContent":["import { CHILD_ADDED } from '../events/Events';\nimport Component from './Component';\n\n/**\n * The Composition class is an extension of the Primitive that is\n * composed of other extensions of the Primitive. The Composition\n * is used to establish the Scene graph as the parent of all other\n * objects on screen. This is the key abstraction of the [composite\n * pattern](https://en.wikipedia.org/wiki/Composite_pattern): an\n * action taken on the parent element acts upon all of the children,\n * and transatively, all of their children.\n */\nexport default class Composition extends Component {\n  /**\n   * @param {object} options object settings\n   */\n  constructor(options) {\n    super(options);\n    options = options || {};\n    /**\n     * The children of this composition\n     */\n    this._children = options.children || [];\n  }\n\n  /**\n   * children of this composition\n   * @type {Array} children the which compose this object\n   */\n  get children() {\n    return this._children;\n  }\n\n  /**\n   * the bounding box of the composition (i.e., the containing bounds of all the children of this composition)\n   * @type {{top:number, left:number, right:number, bottom:number}} boundingBox\n   */\n  get boundingBox() {\n    // TODO: determine how to handle dimension changes\n    // will need to be updated if d, scale, x, or y have changed,\n    // or any such properties of the children have changed,\n    // or if children are aadded or removed\n    //if (this._boundingBox) return this._boundingBox;\n\n    this._boundingBox = this.children.reduce((acc, c) => {\n      return {\n        ...acc, ...{\n          top: Math.min(c.boundingBox.top, acc.top),\n          left: Math.min(c.boundingBox.left, acc.left),\n          bottom: Math.max(c.boundingBox.bottom, acc.bottom),\n          right: Math.max(c.boundingBox.right, acc.right)\n        }\n      }\n    }, { top: Infinity, left: Infinity, bottom: -Infinity, right: -Infinity })\n\n    return this._boundingBox;\n  }\n\n  /**\n   * the an array of children that are found at (x, y)\n   * @return {object} childrenAt all the children below the point\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   */\n  childrenAt(x, y) {\n    return this.children.filter((c) => c.PointIsInObject(x, y));\n  }\n\n  /**\n   * get the top-most child at the (x, y)\n   * @return {object} childAt the first child below the point\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   */\n  childAt(x, y) {\n    //loop over the children in reverse because drawing order\n    for (var c = this.children.length - 1; c >= 0; c--) {\n      if (this.children[c].pointIsInObject(x, y)) {\n        return this.children[c];\n      }\n    }\n  }\n\n  /**\n   * add a child to this composition\n   * @param {object} child the child to be added\n   */\n  addChild(child) {\n    child.parent = this;\n    this.children.push(child);\n    super.needsRender = true;\n    super.needsDraw = true;\n\n    this.dispatchEvent(new Event(CHILD_ADDED), child);\n  }\n\n  /**\n   * add multiple children to the composition\n   * @param {object} children the list of children to be added\n   */\n  addChildren(children) {\n    for (let c of children) {\n      this.addChild(c);\n    }\n  }\n\n  /**\n   * remove a child from this composition\n   * @param {object} child the child to be removed\n   * @return {object} the child removed\n   */\n  removeChild(child) {\n    if (child) {\n      var index = this.children.indexOf(child);\n      if (index >= 0) {\n        super.needsRender = true;\n        super.needsDraw = true;\n        return this.children.splice(index, 1);\n      }\n    }\n  };\n\n  /**\n   * @override\n   * override the render functiont to render the children onto this compositions prerendering canvas\n   */\n  render() {\n    // required to make sure that the drawing occurs within the bounds of this composition\n    let boundingBox = this.boundingBox;\n    var offset = {\n      top: -boundingBox.top,\n      left: -boundingBox.left,\n      bottom: -boundingBox.bottom,\n      right: -boundingBox.right\n    };\n\n    for (let c of this.children) {\n      c.draw(this.prerenderingContext, offset);\n    };\n\n    // `destination-out` will erase things\n    //this.prerenderingContext.globalCompositeOperation = 'destination-out';\n    //_.each(this.masks, function (m) {\n    //m.draw(renderContext, contextOffset);\n    //});\n    //renderContext.globalCompositeOperation = 'normal';\n  };\n}\n"],"file":"Composition.js"}