{"version":3,"sources":["../../src/core/Application.js"],"names":["Application","canvas","_canvas","_context","getContext","style","window","getComputedStyle","_mouseX","_mouseY","borderLeft","getPropertyValue","parseFloat","paddingLeft","_leftPadding","borderTop","paddingTop","_topPadding","_currentTime","_lastFrameTimestamp","_targetObject","_scene","Composition","_bindEvents","_animationLoop","_framerate","val","requestAnimationFrame","bind","Date","scene","needsDraw","width","height","draw","parseInt","_cc","addEventListener","Events","MOUSEDOWN","e","dispatchEvent","MOUSEMOVE","MOUSEUP","MOUSEOUT","CLICK","_handleMouseDown","_handleMouseMove","_handleMouseUp","_handleMouseOut","_handleClick","preventDefault","x","offsetX","y","offsetY","canvasX","canvasY","clickedObject","childAt","children","c","EventEmitter"],"mappings":"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","sourcesContent":["import EventEmitter from '../events/EventEmitter';\nimport * as Events from '../events/Events';\nimport Composition from './Composition';\nimport { clearRect } from '../graphics/Renderer';\n\n//const FPS_EPSILON = 10; // +/- 10ms for animation loop to determine if enough time has passed to render\n//const DEFAULT_TARGET_FPS = 1000 / 60; //amount of time that must pass before rendering\n\n/**\n * The Compositor class is the entry-point to usage of the `canvas-compositor`.\n * The application programmer is expected to hand over low-level control of the canvas\n * context to the high-level classes and methods exposed by CanvasCompositor.\n *\n * The Compositor class establishes an event dispatcher, animation loop, and scene graph for\n * compositions.\n */\nexport default class Application extends EventEmitter {\n  /**\n   * The Compositor class establishes an event dispatcher, animation loop, and scene graph for\n   * compositions\n   *\n   * @param {object} canvas This should be a canvas, either from the DOM or an equivalent API\n   *\n   * @example\n   * let cc = new Compositor(document.getElementById('myCanvas'));\n   */\n  constructor(canvas) {\n    super();\n    /**\n     * The canvas used by the compositor\n     */\n    this._canvas = canvas;\n    /**\n     * The context used by the compositor\n     */\n    this._context = this._canvas.getContext('2d');\n\n    //acquire the padding on the canvas â€“ this is necessary to properly\n    //locate the mouse position\n    //TODO: determine if border-box affects this, and adjust accordingly\n    let style = window.getComputedStyle(this._canvas);\n\n    /**\n     * The x coordinate of the mouse position within the canvas\n     * @type {number}\n     */\n    this._mouseX = null;\n\n    /**\n     * The y coordinate of the mouse position within the canvas\n     * @type {number}\n     */\n    this._mouseY = null;\n\n    let borderLeft = style.getPropertyValue('border-left') ? parseFloat(style.getPropertyValue('border-left')) : 0;\n    let paddingLeft = style.getPropertyValue('padding-left') ? parseFloat(style.getPropertyValue('padding-left')) : 0;\n\n    /**\n     * Any left padding and border added to the canvas must be known to calculate mouse position\n     * @todo determine if this is affected by borderbox\n     * @type {number}\n     */\n    this._leftPadding = borderLeft + paddingLeft;\n\n    let borderTop = style.getPropertyValue('border-top') ? parseFloat(style.getPropertyValue('border-top')) : 0;\n    let paddingTop = style.getPropertyValue('padding-top') ? parseFloat(style.getPropertyValue('padding-top')) : 0;\n\n    /**\n     * Any top padding and border added to the canvas must be known to calculate mouse position\n     * @type {number}\n     */\n    this._topPadding = borderTop + paddingTop;\n\n    /**\n     * The timestamp of the current loop of animation\n     * @type {number}\n     */\n    this._currentTime = 0;\n\n    /**\n     * The timestamp of the last frame drawn by the animation loop\n     * @type {number}\n     */\n    this._lastFrameTimestamp = 0;\n\n    /**\n     * The timestamp of the last render performed by the animation loop\n     * @type {number}\n     */\n    //this._lastRenderTime = 0;\n\n    /**\n     * The object last granted \"focus\"\n     * @type {object}\n     */\n    this._targetObject = null;\n\n    /**\n     * The scene composition. This is the root object to be rendered, everything else rendered must be a child of the scene\n     * @type {object}\n     */\n    this._scene = new Composition(this.canvas);\n\n    this._bindEvents();\n\n    this._animationLoop();\n\n    /**\n     * The framerate of the animation loop\n     * @type {number}\n     */\n    this._framerate = 0;\n  }\n\n  /**\n   * retrieve the current framerate\n   * @type {number}\n   */\n  get framerate() {\n    //var framerateUpdatedEvent = new Event();\n    return this._framerate;\n  }\n\n  //TODO: multiple target objects? in reverse order of render? in order of composition?\n  /**\n   * the object currently selected for interaction\n   * @type {object}\n   */\n  get targetObject() {\n    return this._targetObject;\n  }\n  /**\n   * the object currently selected for interaction\n   * @param {object} val\n   * @type {object}\n   */\n  set targetObject(val) {\n    this._targetObject = val;\n  }\n\n  /**\n   * the root of the scene graph. add primitives to this to compose an image\n   * @type {object}\n   */\n  get scene() {\n    return this._scene;\n  }\n\n  /**\n   * get the X position of the mouse on the canvas\n   * @type {number}\n   */\n  get mouseX() {\n    return this._mouseX;\n  }\n\n  /**\n   * get the Y position of the mouse on the canvas\n   * @type {number}\n   */\n  get mouseY() {\n    return this._mouseY;\n  }\n\n  /**\n   * The animation loop for this instance of Compositor.\n   * Upon receipt of the animation frame from `requestAnimationFrame`, the loop will check\n   * whether enough time has passed to redraw for the target framerate.\n   * It will only draw if somewhere along the scene graph, an object needs updating.\n   * There is no need to invoke this directly, the constructor will do it.\n   */\n  _animationLoop() {\n    window.requestAnimationFrame(this._animationLoop.bind(this));\n    this._currentTime = +new Date();\n    //set maximum of 60 fps and only redraw if necessary\n    if ( /*this._currentTime - this._lastFrameTimestamp >= this._targetFPS &&*/ this.scene.needsDraw) {\n      //this._lastRenderTime = +new Date();\n      clearRect(0, 0, this._canvas.width, this._canvas.height, this._context);\n      this.scene.draw(this._context);\n    }\n    this._framerate = parseInt(1000 / (this._currentTime - this._lastFrameTimestamp));\n    this._lastFrameTimestamp = +new Date();\n\n  }\n\n  /**\n   * attach interaction events to the canvas. the canvas compositor dispatches\n   * events to relevant objects through bridges to the scene graph\n   */\n  _bindEvents() {\n    //must bind to `this` to retain reference\n\n    let _cc = this;\n    this._canvas.addEventListener(Events.MOUSEDOWN, (e) => {\n      _cc.dispatchEvent(e);\n    });\n\n    this._canvas.addEventListener(Events.MOUSEMOVE, (e) => {\n      _cc.dispatchEvent(e);\n    });\n    this._canvas.addEventListener(Events.MOUSEUP, (e) => {\n      _cc.dispatchEvent(e);\n    });\n    this._canvas.addEventListener(Events.MOUSEOUT, (e) => {\n      _cc.dispatchEvent(e);\n    });\n    this._canvas.addEventListener(Events.CLICK, (e) => {\n      _cc.dispatchEvent(e);\n    });\n\n    this.addEventListener(Events.MOUSEDOWN, this._handleMouseDown);\n    this.addEventListener(Events.MOUSEMOVE, this._handleMouseMove);\n    this.addEventListener(Events.MOUSEUP, this._handleMouseUp);\n    this.addEventListener(Events.MOUSEOUT, this._handleMouseOut);\n    this.addEventListener(Events.CLICK, this._handleClick);\n  }\n\n  /**\n   * bridge the mouse down event on the canvas to the\n   * the objects in the scene graph\n   */\n  _handleMouseDown(e) {\n    e.preventDefault();\n\n    let x = e.offsetX - this._leftPadding;\n    let y = e.offsetY - this._topPadding;\n\n    //pass through x and y to propagated events\n    e.canvasX = x;\n    e.canvasY = y;\n\n    let clickedObject = this.scene.childAt(x, y);\n\n    if (clickedObject) {\n      clickedObject.dispatchEvent(e);\n    }\n  }\n\n  /**\n   * bridge the mouse up event on the canvas to the\n   * the objects in the scene graph\n   */\n  _handleMouseUp(e) {\n    e.preventDefault();\n\n    let x = e.offsetX - this._leftPadding;\n    let y = e.offsetY - this._topPadding;\n\n    //pass through x and y to propagated events\n    e.canvasX = x;\n    e.canvasY = y;\n\n    for (let c of this.scene.children) {\n      c.dispatchEvent(e);\n    }\n\n    let clickedObject = this.scene.childAt(x, y);\n\n    if (clickedObject) {\n      clickedObject.dispatchEvent(e);\n    }\n  };\n\n  /**\n   * bridge the mouse move event on the canvas to the\n   * the objects in the scene graph\n   */\n  _handleMouseMove(e) {\n    e.preventDefault();\n    this._mouseX = e.offsetX - this._leftPadding;\n    this._mouseY = e.offsetY - this._topPadding;\n\n    for (let c of this.scene.children) {\n      c.dispatchEvent(e)\n    }\n  };\n\n  /**\n   * bridge the click event on the canvas to the\n   * the objects in the scene graph\n   */\n  _handleClick(e) {\n    e.preventDefault();\n\n    let x = e.offsetX - this._leftPadding;\n    let y = e.offsetY - this._topPadding;\n\n    //pass through x and y to propagated events\n    e.canvasX = x;\n    e.canvasY = y;\n\n    let clickedObject = this.scene.childAt(x, y);\n    if (clickedObject) {\n      clickedObject.dispatchEvent(e);\n    }\n  };\n\n  /**\n   * bridge the mouse out event on the canvas to the\n   * the objects in the scene graph\n   */\n  _handleMouseOut(e) {\n    e.preventDefault();\n\n    for (let c of this.scene.children) {\n      c.dispatchEvent(e);\n    };\n  };\n}\n"],"file":"Application.js"}