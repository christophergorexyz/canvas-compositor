{"version":3,"sources":["../src/Line.js"],"names":["Line","anchor","direction","p1","p2","Vector","add","l","intersection","l1","l2","x1","x","x2","x3","x4","y1","y","y2","y3","y4","denominator","xNumerator","yNumerator"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;;;IAGaA,I;;;AACT;;;;;;;;AAQA,gBAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAC3B;;;AAGA,SAAKC,EAAL,GAAUF,MAAV;AAEA;;;;AAGA,SAAKC,SAAL,GAAiBA,SAAjB;AAEA;;;;AAGA,SAAKE,EAAL,GAAUC,mBAAOC,GAAP,CAAW,KAAKH,EAAhB,EAAoB,KAAKD,SAAzB,CAAV;AACH;AAED;;;;;;;;;qCAKiBK,C,EAAG;AAChB,aAAOP,IAAI,CAACQ,YAAL,CAAkB,IAAlB,EAAwBD,CAAxB,CAAP;AACH;AAED;;;;;;;;;iCAMoBE,E,EAAIC,E,EAAI;AACxB,UAAIC,EAAE,GAAGF,EAAE,CAACN,EAAH,CAAMS,CAAf;AAAA,UACIC,EAAE,GAAGJ,EAAE,CAACL,EAAH,CAAMQ,CADf;AAAA,UAEIE,EAAE,GAAGJ,EAAE,CAACP,EAAH,CAAMS,CAFf;AAAA,UAGIG,EAAE,GAAGL,EAAE,CAACN,EAAH,CAAMQ,CAHf;AAIA,UAAII,EAAE,GAAGP,EAAE,CAACN,EAAH,CAAMc,CAAf;AAAA,UACIC,EAAE,GAAGT,EAAE,CAACL,EAAH,CAAMa,CADf;AAAA,UAEIE,EAAE,GAAGT,EAAE,CAACP,EAAH,CAAMc,CAFf;AAAA,UAGIG,EAAE,GAAGV,EAAE,CAACN,EAAH,CAAMa,CAHf;AAIA,UAAII,WAAW,GAAG,CAACV,EAAE,GAAGE,EAAN,KAAaM,EAAE,GAAGC,EAAlB,IAAwB,CAACJ,EAAE,GAAGE,EAAN,KAAaJ,EAAE,GAAGC,EAAlB,CAA1C;;AACA,UAAIM,WAAW,KAAK,CAApB,EAAuB;AACnB,eAAO,IAAP;AACH;;AAED,UAAIC,UAAU,GAAG,CAACX,EAAE,GAAGO,EAAL,GAAUF,EAAE,GAAGH,EAAhB,KAAuBC,EAAE,GAAGC,EAA5B,IAAkC,CAACJ,EAAE,GAAGE,EAAN,KAAaC,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGJ,EAA5B,CAAnD;AACA,UAAIQ,UAAU,GAAG,CAACZ,EAAE,GAAGO,EAAL,GAAUF,EAAE,GAAGH,EAAhB,KAAuBM,EAAE,GAAGC,EAA5B,IAAkC,CAACJ,EAAE,GAAGE,EAAN,KAAaJ,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGJ,EAA5B,CAAnD;AACA,aAAO,IAAIV,kBAAJ,CAAW,CAACiB,UAAU,GAAGD,WAAd,EAA2BE,UAAU,GAAGF,WAAxC,CAAX,CAAP;AACH","sourcesContent":["import { Vector } from 'vectorious';\r\n\r\n/**\r\n * A line\r\n */\r\nexport class Line {\r\n    /**\r\n     * A Line can be defined by two points, p1 and p2, through\r\n     * which it passes. Here, an anchor point is supplied for p1,\r\n     * and a unit vector, direction, is added to it to provided\r\n     * the second.\r\n     * @param {object} anchor\r\n     * @param {object} direction\r\n     */\r\n    constructor(anchor, direction) {\r\n        /**\r\n         * @type {object} p1 a vector describing a point through which the line passes\r\n         */\r\n        this.p1 = anchor;\r\n\r\n        /**\r\n         * @type {object} direction a unit vector describing the direction from p1\r\n         */\r\n        this.direction = direction;\r\n\r\n        /**\r\n         * @type {object} a vector describing a second point through which the line passes\r\n         */\r\n        this.p2 = Vector.add(this.p1, this.direction);\r\n    }\r\n\r\n    /**\r\n     * determine the location that this line intersects with another, if at all\r\n     * @param {object} l the Line to test for intersection against this Line\r\n     * @return {object} the vector of the location of intersection, or null if the lines are parallel\r\n     */\r\n    intersectionWith(l) {\r\n        return Line.intersection(this, l);\r\n    }\r\n\r\n    /**\r\n     * determine the location that these lines intersect, if at all\r\n     * @param {object} l1 the first Line to test for intersection\r\n     * @param {object} l2 the second Line to test for intersection\r\n     * @return {object} the vector of the location of intersection, or null if the lines are parallel\r\n     */\r\n    static intersection(l1, l2) {\r\n        let x1 = l1.p1.x,\r\n            x2 = l1.p2.x,\r\n            x3 = l2.p1.x,\r\n            x4 = l2.p2.x;\r\n        let y1 = l1.p1.y,\r\n            y2 = l1.p2.y,\r\n            y3 = l2.p1.y,\r\n            y4 = l2.p2.y;\r\n        let denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\r\n        if (denominator === 0) {\r\n            return null;\r\n        }\r\n\r\n        let xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\r\n        let yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\r\n        return new Vector([xNumerator / denominator, yNumerator / denominator]);\r\n    }\r\n}\r\n"],"file":"Line.js"}