{"version":3,"sources":["../src/Text.js"],"names":["Text","options","text","fontSize","TextDefaults","FONT_SIZE","fontFamily","fontStyle","FONT_STYLE","fontVariant","FONT_VARIANT","fontWeight","FONT_WEIGHT","lineHeight","LINE_HEIGHT","textAlign","TEXT_ALIGN","textBaseline","TEXT_BASELINE","_textMetricsNeedUpdate","_textMetrics","Object","assign","style","font","fontString","_updateStyle","textMetrics","ascent","_prerenderingContext","TextUtils","formatFontString","measureText","getTextHeight","top","offset","y","left","x","bottom","descent","right","width","PrimitiveComponent"],"mappings":"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","sourcesContent":["import {\n    drawText\n} from './Renderer';\nimport {\n    PrimitiveComponent\n} from './PrimitiveComponent';\n\nimport * as TextUtils from './TextUtilities';\n\nimport * as TextDefaults from './TextDefaults';\n\n/**\n * A text object\n */\nexport class Text extends PrimitiveComponent {\n    /**\n     * @param {object} options the options for the text object\n     */\n    constructor(options) {\n        super(options);\n\n        /**\n         * the text to be rendered\n         * @type {string}\n         */\n        this.text = options.text;\n\n        /**\n         * the font size at which to render the text\n         * @type {string}\n         */\n        this.fontSize = options.fontSize || TextDefaults.FONT_SIZE;\n\n        /**\n         * the font family in which to render the text\n         * @type {string}\n         */\n        this.fontFamily = options.fontFamily || TextDefaults.fontFamily;\n\n        /**\n         * the font style with which to render the text\n         * @type {string}\n         */\n        this.fontStyle = options.fontStyle || TextDefaults.FONT_STYLE;\n\n        /**\n         * the font variant in which to render the text\n         * @type {string}\n         */\n        this.fontVariant = options.fontVariant || TextDefaults.FONT_VARIANT;\n\n        /**\n         * the font weight at which to render the text\n         * @type {string}\n         */\n        this.fontWeight = options.fontWeight || TextDefaults.FONT_WEIGHT;\n\n        /**\n         * the line height of the text\n         * @type {string}\n         */\n        this.lineHeight = options.lineHeight || TextDefaults.LINE_HEIGHT;\n\n        /**\n         * the alignment with which to render the text\n         * @type {string}\n         */\n        this.textAlign = options.textAlign || TextDefaults.TEXT_ALIGN;\n\n        /**\n         * the baseline for the text\n         * @type {string}\n         */\n        this.textBaseline = options.textBaseline || TextDefaults.TEXT_BASELINE;\n\n        /**\n         * lets textMetrics getter know if it needs to update its data\n         * @type {boolean}\n         */\n        this._textMetricsNeedUpdate = true;\n\n        /**\n         * a [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) object\n         * with additional height information\n         * @type {object}\n         */\n        this._textMetrics = null;\n\n        //TODO: write out this function for optimization\n        //this._updateTextMetrics(this.fontString);\n    }\n\n    /**\n     * get the longform representation\n     * @type {string}\n     */\n    get fontString() {\n        return TextUtils.formatFontString(this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.lineHeight, this.fontFamily);\n    }\n\n    /**\n     * compute the height data and add it to the textMetrics object from the canvas context\n     * @type {object}\n     */\n    get textMetrics() {\n        if (this._textMetricsNeedUpdate || this._textMetrics === null) {\n            this._updateStyle();\n            this._textMetrics = TextUtils.measureText(this.text, this._prerenderingContext, this.style);\n            Object.assign(this._textMetrics, TextUtils.getTextHeight(this.style.font));\n            this._textMetricsNeedUpdate = false;\n        }\n        return this._textMetrics;\n    }\n\n    /**\n     * get the bounding box of the text object\n     * @type {top: number, left: number, bottom: number, right: number}\n     */\n    get boundingBox() {\n        return {\n            top: this.offset.y - this.textMetrics.ascent,\n            left: this.offset.x,\n            bottom: this.offset.y + this.textMetrics.descent,\n            right: this.offset.x + this.textMetrics.width\n        };\n    }\n\n    /**\n     * update the style options for the text\n     * @param {object} options\n     */\n    _updateStyle(options) {\n        Object.assign(this.style, options, {\n            font: this.fontString,\n            textAlign: this.textAlign,\n            textBaseline: this.textBaseline\n        });\n    }\n\n\n    /**\n     * override the render function for text objects\n     * @override\n     */\n    render() {\n        this._textMetricsNeedUpdate = true;\n        this._updateStyle();\n        drawText(0, this.textMetrics.ascent, this.text, this._prerenderingContext, this.style);\n\n        /*if (this.flags.DEBUG) {\n            Renderer.drawPath(this._prerenderingContext, [{\n                x: 0,\n                y: this.textMetrics.ascent\n            }, {\n                x: this.textMetrics.width,\n                y: this.textMetrics.ascent\n            }], {\n                strokeStyle: 'Blue'\n            });\n            Renderer.drawCircle(this._prerenderingContext, 0, this.textMetrics.ascent, 3, {\n                strokeStyle: 'Blue',\n                fillStyle: 'Blue'\n            });\n        }*/\n    }\n}\n"],"file":"Text.js"}