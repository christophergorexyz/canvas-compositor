{"version":3,"sources":["../src/Text.js"],"names":["Text","options","text","fontSize","TextDefaults","FONT_SIZE","fontFamily","FONT_FAMILY","fontStyle","FONT_STYLE","fontVariant","FONT_VARIANT","fontWeight","FONT_WEIGHT","lineHeight","LINE_HEIGHT","textAlign","TEXT_ALIGN","textBaseline","TEXT_BASELINE","_textMetricsNeedUpdate","_textMetrics","TextUtils","formatFontString","_updateStyle","measureText","_prerenderingContext","style","Object","assign","getTextHeight","font","top","offset","y","textMetrics","ascent","left","x","bottom","descent","right","width","fontString","PrimitiveComponent"],"mappings":";;;;;;;;;AAAA;;AAGA;;AAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;IACaA,I;;;;;AACX;AACF;AACA;AACE,gBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,IAAL,GAAYD,OAAO,CAACC,IAApB;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,QAAL,GAAgBF,OAAO,CAACE,QAAR,IAAoBC,YAAY,CAACC,SAAjD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,UAAL,GAAkBL,OAAO,CAACK,UAAR,IAAsBF,YAAY,CAACG,WAArD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,SAAL,GAAiBP,OAAO,CAACO,SAAR,IAAqBJ,YAAY,CAACK,UAAnD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,WAAL,GAAmBT,OAAO,CAACS,WAAR,IAAuBN,YAAY,CAACO,YAAvD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,UAAL,GAAkBX,OAAO,CAACW,UAAR,IAAsBR,YAAY,CAACS,WAArD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,UAAL,GAAkBb,OAAO,CAACa,UAAR,IAAsBV,YAAY,CAACW,WAArD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,SAAL,GAAiBf,OAAO,CAACe,SAAR,IAAqBZ,YAAY,CAACa,UAAnD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,YAAL,GAAoBjB,OAAO,CAACiB,YAAR,IAAwBd,YAAY,CAACe,aAAzD;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,sBAAL,GAA8B,IAA9B;AAEA;AACJ;AACA;AACA;AACA;;AACI,UAAKC,YAAL,GAAoB,IAApB,CApEmB,CAsEnB;AACA;;AAvEmB;AAwEpB;AAED;AACF;AACA;AACA;;;;;SACE,eAAiB;AACf,aAAOC,SAAS,CAACC,gBAAV,CAA2B,KAAKf,SAAhC,EAA2C,KAAKE,WAAhD,EAA6D,KAAKE,UAAlE,EAA8E,KAAKT,QAAnF,EAA6F,KAAKW,UAAlG,EAA8G,KAAKR,UAAnH,CAAP;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAkB;AAChB,UAAI,KAAKc,sBAAL,IAA+B,KAAKC,YAAL,KAAsB,IAAzD,EAA+D;AAC7D,aAAKG,YAAL;;AACA,aAAKH,YAAL,GAAoBC,SAAS,CAACG,WAAV,CAAsB,KAAKvB,IAA3B,EAAiC,KAAKwB,oBAAtC,EAA4D,KAAKC,KAAjE,CAApB;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAc,KAAKR,YAAnB,EAAiCC,SAAS,CAACQ,aAAV,CAAwB,KAAKH,KAAL,CAAWI,IAAnC,CAAjC;AACA,aAAKX,sBAAL,GAA8B,KAA9B;AACD;;AACD,aAAO,KAAKC,YAAZ;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAkB;AAChB,aAAO;AACLW,QAAAA,GAAG,EAAE,KAAKC,MAAL,CAAYC,CAAZ,GAAgB,KAAKC,WAAL,CAAiBC,MADjC;AAELC,QAAAA,IAAI,EAAE,KAAKJ,MAAL,CAAYK,CAFb;AAGLC,QAAAA,MAAM,EAAE,KAAKN,MAAL,CAAYC,CAAZ,GAAgB,KAAKC,WAAL,CAAiBK,OAHpC;AAILC,QAAAA,KAAK,EAAE,KAAKR,MAAL,CAAYK,CAAZ,GAAgB,KAAKH,WAAL,CAAiBO;AAJnC,OAAP;AAMD;AAED;AACF;AACA;AACA;;;;WACE,sBAAazC,OAAb,EAAsB;AACpB2B,MAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,KAAnB,EAA0B1B,OAA1B,EAAmC;AACjC8B,QAAAA,IAAI,EAAE,KAAKY,UADsB;AAEjC3B,QAAAA,SAAS,EAAE,KAAKA,SAFiB;AAGjCE,QAAAA,YAAY,EAAE,KAAKA;AAHc,OAAnC;AAKD;AAGD;AACF;AACA;AACA;;;;WACE,kBAAS;AACP,WAAKE,sBAAL,GAA8B,IAA9B;;AACA,WAAKI,YAAL;;AACA,8BAAS,CAAT,EAAY,KAAKW,WAAL,CAAiBC,MAA7B,EAAqC,KAAKlC,IAA1C,EAAgD,KAAKwB,oBAArD,EAA2E,KAAKC,KAAhF;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACG;;;;EAtJuBiB,uC","sourcesContent":["import {\n  drawText\n} from './Renderer';\nimport {\n  PrimitiveComponent\n} from './PrimitiveComponent';\n\nimport * as TextUtils from './TextUtilities';\n\nimport * as TextDefaults from './TextDefaults';\n\n/**\n * A text object\n */\nexport class Text extends PrimitiveComponent {\n  /**\n   * @param {object} options the options for the text object\n   */\n  constructor(options) {\n    super(options);\n\n    /**\n     * the text to be rendered\n     * @type {string}\n     */\n    this.text = options.text;\n\n    /**\n     * the font size at which to render the text\n     * @type {string}\n     */\n    this.fontSize = options.fontSize || TextDefaults.FONT_SIZE;\n\n    /**\n     * the font family in which to render the text\n     * @type {string}\n     */\n    this.fontFamily = options.fontFamily || TextDefaults.FONT_FAMILY;\n\n    /**\n     * the font style with which to render the text\n     * @type {string}\n     */\n    this.fontStyle = options.fontStyle || TextDefaults.FONT_STYLE;\n\n    /**\n     * the font variant in which to render the text\n     * @type {string}\n     */\n    this.fontVariant = options.fontVariant || TextDefaults.FONT_VARIANT;\n\n    /**\n     * the font weight at which to render the text\n     * @type {string}\n     */\n    this.fontWeight = options.fontWeight || TextDefaults.FONT_WEIGHT;\n\n    /**\n     * the line height of the text\n     * @type {string}\n     */\n    this.lineHeight = options.lineHeight || TextDefaults.LINE_HEIGHT;\n\n    /**\n     * the alignment with which to render the text\n     * @type {string}\n     */\n    this.textAlign = options.textAlign || TextDefaults.TEXT_ALIGN;\n\n    /**\n     * the baseline for the text\n     * @type {string}\n     */\n    this.textBaseline = options.textBaseline || TextDefaults.TEXT_BASELINE;\n\n    /**\n     * lets textMetrics getter know if it needs to update its data\n     * @type {boolean}\n     */\n    this._textMetricsNeedUpdate = true;\n\n    /**\n     * a [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) object\n     * with additional height information\n     * @type {object}\n     */\n    this._textMetrics = null;\n\n    //TODO: write out this function for optimization\n    //this._updateTextMetrics(this.fontString);\n  }\n\n  /**\n   * get the longform representation\n   * @type {string}\n   */\n  get fontString() {\n    return TextUtils.formatFontString(this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.lineHeight, this.fontFamily);\n  }\n\n  /**\n   * compute the height data and add it to the textMetrics object from the canvas context\n   * @type {object}\n   */\n  get textMetrics() {\n    if (this._textMetricsNeedUpdate || this._textMetrics === null) {\n      this._updateStyle();\n      this._textMetrics = TextUtils.measureText(this.text, this._prerenderingContext, this.style);\n      Object.assign(this._textMetrics, TextUtils.getTextHeight(this.style.font));\n      this._textMetricsNeedUpdate = false;\n    }\n    return this._textMetrics;\n  }\n\n  /**\n   * get the bounding box of the text object\n   * @type {{top: number, left: number, bottom: number, right: number}}\n   */\n  get boundingBox() {\n    return {\n      top: this.offset.y - this.textMetrics.ascent,\n      left: this.offset.x,\n      bottom: this.offset.y + this.textMetrics.descent,\n      right: this.offset.x + this.textMetrics.width\n    };\n  }\n\n  /**\n   * update the style options for the text\n   * @param {object} options\n   */\n  _updateStyle(options) {\n    Object.assign(this.style, options, {\n      font: this.fontString,\n      textAlign: this.textAlign,\n      textBaseline: this.textBaseline\n    });\n  }\n\n\n  /**\n   * override the render function for text objects\n   * @override\n   */\n  render() {\n    this._textMetricsNeedUpdate = true;\n    this._updateStyle();\n    drawText(0, this.textMetrics.ascent, this.text, this._prerenderingContext, this.style);\n\n    /*if (this.flags.DEBUG) {\n            Renderer.drawPath(this._prerenderingContext, [{\n                x: 0,\n                y: this.textMetrics.ascent\n            }, {\n                x: this.textMetrics.width,\n                y: this.textMetrics.ascent\n            }], {\n                strokeStyle: 'Blue'\n            });\n            Renderer.drawCircle(this._prerenderingContext, 0, this.textMetrics.ascent, 3, {\n                strokeStyle: 'Blue',\n                fillStyle: 'Blue'\n            });\n        }*/\n  }\n}\n"],"file":"Text.js"}