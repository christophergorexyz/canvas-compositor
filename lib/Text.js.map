{"version":3,"sources":["../src/Text.js"],"names":["ALL_CHARS","DEFAULTS","fontSize","fontFamily","fontStyle","fontVariant","fontWeight","lineHeight","textAlign","textBaseline","_getTextHeight","font","fontHolder","document","createElement","innerText","style","baselineRuler","display","width","height","verticalAlign","wrapper","appendChild","whiteSpace","body","fontRect","getBoundingClientRect","baselineRect","fontTop","top","scrollTop","fontBottom","baseline","removeChild","ascentFromBaseline","descentFromBaseline","ascent","descent","Text","options","text","_textMetricsNeedUpdate","Object","assign","_updateStyle","Renderer","drawText","textMetrics","_prerenderingContext","_textMetrics","measureText","offset","y","left","x","bottom","right","PrimitiveComponent"],"mappings":"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","sourcesContent":["import { Renderer } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\nconst ALL_CHARS = `1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm.,\\`~;:'\"!?@#$%^&*()_+={}[]|\\<>/`;\n\nconst DEFAULTS = {\n    fontSize: '16px',\n    fontFamily: 'sans-serif',\n    fontStyle: 'normal',\n    fontVariant: 'normal',\n    fontWeight: 'normal',\n    lineHeight: 'normal',\n    textAlign: 'start',\n    textBaseline: 'alphabetic'\n};\n\nfunction _getTextHeight(font) {\n    //this is a version of:\n    //http://stackoverflow.com/questions/1134586/how-can-you-find-the-height-of-text-on-an-html-canvas\n    //it's a pretty awful hack.\n    //TODO: figure out how cross-browser this is\n\n    //create an element with every character in it with this font\n    let fontHolder = document.createElement('span');\n    fontHolder.innerText = ALL_CHARS;\n    fontHolder.style.font = font;\n\n    //create an inline-block to place after the element\n    let baselineRuler = document.createElement('div');\n    baselineRuler.style.display = 'inline-block';\n    baselineRuler.style.width = '1px';\n    baselineRuler.style.height = '0';\n    baselineRuler.style.verticalAlign = 'baseline';\n\n    //place them in a wrapper and add it to the body\n    let wrapper = document.createElement('div');\n    wrapper.appendChild(fontHolder);\n    wrapper.appendChild(baselineRuler);\n    wrapper.style.whiteSpace = 'nowrap';\n    document.body.appendChild(wrapper);\n\n    //get their bounding rectangles and...\n    let fontRect = fontHolder.getBoundingClientRect();\n    let baselineRect = baselineRuler.getBoundingClientRect();\n\n    //calculate their offset from top\n    let fontTop = fontRect.top + document.body.scrollTop;\n    let fontBottom = fontTop + fontRect.height;\n\n    let baseline = baselineRect.top + document.body.scrollTop;\n\n    document.body.removeChild(wrapper);\n\n    //ascent equals the baseline location minus text top location\n    let ascentFromBaseline = baseline - fontTop;\n\n    //decent equals the text bottom location minuse the baseline location\n    let descentFromBaseline = fontBottom - baseline;\n\n    return {\n        height: fontRect.height,\n        ascent: ascentFromBaseline,\n        descent: descentFromBaseline\n    };\n}\n\n/**\n * A text object\n */\nexport class Text extends PrimitiveComponent {\n    /**\n     * @param {object} options the options for the text object\n     */\n    constructor(options) {\n        super(options);\n\n        /**\n         * @type {string} text the text to be rendered\n         */\n        this.text = options.text;\n\n        /**\n         * @type {string} fontSize the font size at which to render the text\n         */\n        this.fontSize = options.fontSize || DEFAULTS.fontSize;\n\n        /**\n         * @type {string} fontFamily the font family in which to render the text\n         */\n        this.fontFamily = options.fontFamily || DEFAULTS.fontFamily;\n\n        /**\n         * @type {string} fontStyle the font style with which to render the text\n         */\n        this.fontStyle = options.fontStyle || DEFAULTS.fontStyle;\n\n        /**\n         * @type {string} fontVariant the font variant in which to render the text\n         */\n        this.fontVariant = options.fontVariant || DEFAULTS.fontVariant;\n\n        /**\n         * @type {string} fontWeight the font weight at which to render the text\n         */\n        this.fontWeight = options.fontWeight || DEFAULTS.fontWeight;\n\n        /**\n         * @type {string} lineHeight the line height of the text\n         */\n        this.lineHeight = options.lineHeight || DEFAULTS.lineHeight;\n\n        /**\n         * @type {string} textAlign the alignment with which to render the text\n         */\n        this.textAlign = options.textAlign || DEFAULTS.textAlign;\n\n        /**\n         * @type {string} textBaseline the baseline for the text\n         */\n        this.textBaseline = options.textBaseline || DEFAULTS.textBaseline;\n\n        this._textMetricsNeedUpdate = true;\n    }\n\n    /**\n     * compute the height data and add it to the textMetrics object from the canvas context\n     * @type {object} textMetrics\n     */\n    get textMetrics() {\n        if (this._textMetricsNeedUpdate || this._textMetrics === null) {\n            this._updateStyle();\n            this._textMetrics = Renderer.measureText(this.text, this._prerenderingContext, this.style);\n            Object.assign(this._textMetrics, _getTextHeight(this.style.font));\n            this._textMetricsNeedUpdate = false;\n        }\n        return this._textMetrics;\n    }\n\n    /**\n     * get the bounding box of the text object\n     * @type {top: number, left: number, bottom: number, right: number}\n     */\n    get boundingBox() {\n        return {\n            top: this.offset.y - this.textMetrics.ascent,\n            left: this.offset.x,\n            bottom: this.offset.y + this.textMetrics.descent,\n            right: this.offset.x + this.textMetrics.width\n        };\n    }\n\n    _updateStyle(options) {\n        Object.assign(this.style, options, {\n            font: `${this.fontStyle} ${this.fontVariant} ${this.fontWeight} ${this.fontSize}/${this.lineHeight} ${this.fontFamily}`,\n            textAlign: this.textAlign,\n            textBaseline: this.textBaseline\n        });\n    }\n\n\n    /**\n     * override the render function for text objects\n     * @override\n     */\n    render() {\n        this._textMetricsNeedUpdate = true;\n        this._updateStyle();\n        Renderer.drawText(0, this.textMetrics.ascent, this.text, this._prerenderingContext, this.style);\n\n        /*if (this.flags.DEBUG) {\n            Renderer.drawPath(this._prerenderingContext, [{\n                x: 0,\n                y: this.textMetrics.ascent\n            }, {\n                x: this.textMetrics.width,\n                y: this.textMetrics.ascent\n            }], {\n                strokeStyle: 'Blue'\n            });\n            Renderer.drawCircle(this._prerenderingContext, 0, this.textMetrics.ascent, 3, {\n                strokeStyle: 'Blue',\n                fillStyle: 'Blue'\n            });\n        }*/\n    }\n}\n"],"file":"Text.js"}