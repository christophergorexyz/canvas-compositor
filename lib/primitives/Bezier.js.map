{"version":3,"sources":["../../src/primitives/Bezier.js"],"names":["_cubicBezier","start","c1","c2","end","t","_getExtremes","a","b","c","solutions","localExtrema","disc","Math","abs","push","sqrt","Error","Bezier","options","Vector","x","y","control1","control2","_boundingBox","_boundingBoxNeedsUpdate","xExtrema","yExtrema","min","apply","_start","subtract","d","_end","_control1","_control2","lineWidth","style","offset","add","top","right","max","bottom","left","prerenderingContext","Component"],"mappings":"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","sourcesContent":["\nimport { Vector } from 'vectorious';\nimport Component from '../core/Component';\nimport { drawBezier } from '../graphics/Renderer';\n\n// TODO: There are multiple optimizations that can be done here, specifically with regard to calculating\n// things only once. the extrema don't necessarily need recomputing just to get the bounding box. the\n// bounding box itself could be stored within the PrimitiveComponent for all types\n\n/**\n * A helper function for finding local extrema given possible solutions\n * @param {object} start a component of the starting coordinate\n * @param {object} c1 a component of the first control point\n * @param {object} c2 a component of the second control point\n * @param {object} end a component of the ending coordinate\n * @param {object} t a possible solution\n */\nfunction _cubicBezier(start, c1, c2, end, t) {\n  //uhh... i looked up *SO* much stuff on this, and even tried to work out the math myself,\n  //but this is ridiculous - where does this come from?\n  return start * (1 - t) * (1 - t) * (1 - t) + 3 * c1 * t * (1 - t) * (1 - t) + 3 * c2 * t * t * (1 - t) + end * t * t * t;\n}\n\n/**\n * return the local extremes of the curve\n * @param {object} start a component of the starting vector\n * @param {object} c1 a component of the first control point\n * @param {object} c2 a component of the second control point\n * @param {object} end a component of the ending vector\n */\nfunction _getExtremes(start, c1, c2, end) {\n  let a = 3 * end - 9 * c2 + 9 * c1 - 3 * start;\n  let b = 6 * c2 - 12 * c1 + 6 * start;\n  let c = 3 * c1 - 3 * start;\n\n  let solutions = [];\n  let localExtrema = [];\n\n  //\"discriminant\"\n  let disc = b * b - 4 * a * c;\n\n  if (disc >= 0) {\n    if (!Math.abs(a) > 0 && Math.abs(b) > 0) {\n      solutions.push(-c / b);\n    } else if (Math.abs(a) > 0) {\n      solutions.push((-b + Math.sqrt(disc)) / (2 * a));\n      solutions.push((-b - Math.sqrt(disc)) / (2 * a));\n    } else {\n      throw new Error(\"no solutions!?!?!\");\n    }\n\n    for (let t of solutions) {\n      if (0 <= t && t <= 1) {\n        localExtrema.push(_cubicBezier(start, c1, c2, end, t));\n      }\n    }\n  }\n\n  localExtrema.push(start, end);\n\n  return localExtrema;\n}\n\n/**\n * A Bezier curve\n */\nexport default class Bezier extends Component {\n\n  /**\n   * Bezier constructor\n   * @param {object} options the options for the bezier curve\n   */\n  constructor(options) {\n    super(options);\n\n    let start = new Vector([options.start.x, options.start.y]);\n    let end = new Vector([options.end.x, options.end.y]);\n    let control1 = new Vector([options.control1.x, options.control1.y]);\n    let control2 = new Vector([options.control2.x, options.control2.y]);\n\n    /**\n     * The bounding box of the curve\n     */\n    this._boundingBox = null;\n\n    /**\n     * Helper to update the bounding box\n     */\n    this._boundingBoxNeedsUpdate = true;\n\n    let xExtrema = _getExtremes(start.x, control1.x, control2, end.x);\n    let yExtrema = _getExtremes(start.y, control1.y, control2.y, end.y);\n    super.d = new Vector([Math.min.apply(null, xExtrema), Math.min.apply(null, yExtrema)])\n\n    /**\n     * The starting point of the curve\n     */\n    this._start = Vector.subtract(start, this.d);\n\n    /**\n     * The ending point of the curve\n     */\n    this._end = Vector.subtract(end, this.d);\n\n    /**\n     * The first control point\n     */\n    this._control1 = Vector.subtract(control1, this.d);\n\n    /**\n     * The second control point\n     */\n    this._control2 = Vector.subtract(control2, this.d);\n  }\n\n  /**\n   * get the bounding box of the bezier\n   * @type {{top:number, left:number, bottom:number, right:number}} boundingBox\n   */\n  get boundingBox() {\n    //if (this._boundingBox === null || this._boundingBoxNeedsUpdate) {\n    let lineWidth = this.style.lineWidth;\n\n    let offset = this.offset;\n    let start = Vector.add(this._start, offset);\n    let control1 = Vector.add(this._control1, offset);\n    let control2 = Vector.add(this._control2, offset);\n    let end = Vector.add(this._end, offset);\n\n    let xExtrema = _getExtremes(start.x, control1.x, control2, end.x);\n    let yExtrema = _getExtremes(start.y, control1.y, control2.y, end.y);\n    this._boundingBox = {\n      top: Math.min.apply(null, yExtrema) - lineWidth,\n      right: Math.max.apply(null, xExtrema) + lineWidth,\n      bottom: Math.max.apply(null, yExtrema) + lineWidth,\n      left: Math.min.apply(null, xExtrema) - lineWidth\n    }\n    this._boundingBoxNeedsUpdate = false;\n    //}\n    return this._boundingBox;\n  }\n\n  /**\n   * render the bezier curve\n   */\n  render() {\n    drawBezier(\n      this._start,\n      this._end,\n      this._control1,\n      this._control2,\n      this.prerenderingContext,\n      this.style\n    );\n  }\n}\n"],"file":"Bezier.js"}