{"version":3,"sources":["../../src/geometry/Line.js"],"names":["Line","anchor","direction","p1","p2","Vector","add","l","intersection","l1","l2","x1","x","x2","x3","x4","y1","y","y2","y3","y4","denominator","xNumerator","yNumerator"],"mappings":";;;;;;;AAAA;;;;;;;;AAEA;AACA;AACA;IACqBA,I;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACE,gBAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAC7B;AACJ;AACA;AACI,SAAKC,EAAL,GAAUF,MAAV;AAEA;AACJ;AACA;;AACI,SAAKC,SAAL,GAAiBA,SAAjB;AAEA;AACJ;AACA;;AACI,SAAKE,EAAL,GAAUC,mBAAOC,GAAP,CAAW,KAAKH,EAAhB,EAAoB,KAAKD,SAAzB,CAAV;AACD;AAED;AACF;AACA;AACA;AACA;;;;;WACE,0BAAiBK,CAAjB,EAAoB;AAClB,aAAOP,IAAI,CAACQ,YAAL,CAAkB,IAAlB,EAAwBD,CAAxB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,sBAAoBE,EAApB,EAAwBC,EAAxB,EAA4B;AAC1B,UAAIC,EAAE,GAAGF,EAAE,CAACN,EAAH,CAAMS,CAAf;AAAA,UACEC,EAAE,GAAGJ,EAAE,CAACL,EAAH,CAAMQ,CADb;AAAA,UAEEE,EAAE,GAAGJ,EAAE,CAACP,EAAH,CAAMS,CAFb;AAAA,UAGEG,EAAE,GAAGL,EAAE,CAACN,EAAH,CAAMQ,CAHb;AAIA,UAAII,EAAE,GAAGP,EAAE,CAACN,EAAH,CAAMc,CAAf;AAAA,UACEC,EAAE,GAAGT,EAAE,CAACL,EAAH,CAAMa,CADb;AAAA,UAEEE,EAAE,GAAGT,EAAE,CAACP,EAAH,CAAMc,CAFb;AAAA,UAGEG,EAAE,GAAGV,EAAE,CAACN,EAAH,CAAMa,CAHb;AAIA,UAAII,WAAW,GAAG,CAACV,EAAE,GAAGE,EAAN,KAAaM,EAAE,GAAGC,EAAlB,IAAwB,CAACJ,EAAE,GAAGE,EAAN,KAAaJ,EAAE,GAAGC,EAAlB,CAA1C;;AACA,UAAIM,WAAW,KAAK,CAApB,EAAuB;AACrB,eAAO,IAAP;AACD;;AAED,UAAIC,UAAU,GAAG,CAACX,EAAE,GAAGO,EAAL,GAAUF,EAAE,GAAGH,EAAhB,KAAuBC,EAAE,GAAGC,EAA5B,IAAkC,CAACJ,EAAE,GAAGE,EAAN,KAAaC,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGJ,EAA5B,CAAnD;AACA,UAAIQ,UAAU,GAAG,CAACZ,EAAE,GAAGO,EAAL,GAAUF,EAAE,GAAGH,EAAhB,KAAuBM,EAAE,GAAGC,EAA5B,IAAkC,CAACJ,EAAE,GAAGE,EAAN,KAAaJ,EAAE,GAAGM,EAAL,GAAUD,EAAE,GAAGJ,EAA5B,CAAnD;AACA,aAAO,IAAIV,kBAAJ,CAAW,CAACiB,UAAU,GAAGD,WAAd,EAA2BE,UAAU,GAAGF,WAAxC,CAAX,CAAP;AACD","sourcesContent":["import { Vector } from 'vectorious';\n\n/**\n * A line\n */\nexport default class Line {\n  /**\n   * A Line can be defined by two points, p1 and p2, through\n   * which it passes. Here, an `anchor` point is supplied for p1,\n   * and a unit vector, `direction`, is added to it to provide\n   * the second.\n   * @param {object} anchor the point through which the line is anchored\n   * @param {object} direction a direction that defines the\n   */\n  constructor(anchor, direction) {\n    /**\n     * @type {object} p1 a vector describing a point through which the line passes\n     */\n    this.p1 = anchor;\n\n    /**\n     * @type {object} direction a unit vector describing the direction from p1\n     */\n    this.direction = direction;\n\n    /**\n     * @type {object} a vector describing a second point through which the line passes\n     */\n    this.p2 = Vector.add(this.p1, this.direction);\n  }\n\n  /**\n   * determine the location that this line intersects with another, if at all\n   * @param {object} l the Line to test for intersection against this Line\n   * @return {object} the vector of the location of intersection, or null if the lines are parallel\n   */\n  intersectionWith(l) {\n    return Line.intersection(this, l);\n  }\n\n  /**\n   * determine the location that these lines intersect, if at all\n   * @param {object} l1 the first Line to test for intersection\n   * @param {object} l2 the second Line to test for intersection\n   * @return {object} the vector of the location of intersection, or null if the lines are parallel\n   */\n  static intersection(l1, l2) {\n    let x1 = l1.p1.x,\n      x2 = l1.p2.x,\n      x3 = l2.p1.x,\n      x4 = l2.p2.x;\n    let y1 = l1.p1.y,\n      y2 = l1.p2.y,\n      y3 = l2.p1.y,\n      y4 = l2.p2.y;\n    let denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (denominator === 0) {\n      return null;\n    }\n\n    let xNumerator = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);\n    let yNumerator = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);\n    return new Vector([xNumerator / denominator, yNumerator / denominator]);\n  }\n}\n"],"file":"Line.js"}