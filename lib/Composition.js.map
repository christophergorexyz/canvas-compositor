{"version":3,"sources":["../src/Composition.js"],"names":["Composition","options","_children","children","x","y","filter","c","PointIsInObject","length","pointIsInObject","child","parent","push","addChild","index","indexOf","splice","boundingBox","offset","top","left","bottom","right","draw","_prerenderingContext","Infinity","Math","min","max","PrimitiveComponent"],"mappings":"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","sourcesContent":["import { PrimitiveComponent } from './PrimitiveComponent';\r\n\r\n/**\r\n * The Composition class is an extension of the Primitive that is\r\n * composed of other extensions of the Primitive. The Composition\r\n * is used to establish the Scene graph as the parent of all other\r\n * objects on screen. This is the key abstraction of the [composite\r\n * pattern](https://en.wikipedia.org/wiki/Composite_pattern): an\r\n * action taken on the parent element acts upon all of the children,\r\n * and transatively, all of their children.\r\n */\r\nexport class Composition extends PrimitiveComponent {\r\n    /**\r\n     * @param {object} options object settings\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n        options = options || {};\r\n        /**\r\n         * The children of this composition\r\n         */\r\n        this._children = options.children || [];\r\n    }\r\n\r\n    /**\r\n     * children of this composition\r\n     * @type {Array} children the which compose this object\r\n     */\r\n    get children() {\r\n        return this._children;\r\n    }\r\n\r\n    /**\r\n     * the bounding box of the composition (i.e., the containing bounds of all the children of this composition)\r\n     * @type {{top:number, left:number, right:number, bottom:number}} boundingBox\r\n     */\r\n    get boundingBox() {\r\n        let top = Infinity,\r\n            left = Infinity,\r\n            bottom = -Infinity,\r\n            right = -Infinity;\r\n\r\n        for (let c of this.children) {\r\n            let boundingBox = c.boundingBox;\r\n            top = Math.min(boundingBox.top, top);\r\n            left = Math.min(boundingBox.left, left);\r\n            bottom = Math.max(boundingBox.bottom, bottom);\r\n            right = Math.max(boundingBox.right, right);\r\n        };\r\n\r\n        return {\r\n            top: top,\r\n            left: left,\r\n            bottom: bottom,\r\n            right: right\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * the an array of children that are found at (x, y)\r\n     * @return {object} childrenAt all the children below the point\r\n     * @param {number} x the x coordinate\r\n     * @param {number} y the y coordinate\r\n     */\r\n    childrenAt(x, y) {\r\n        return this.children.filter((c) => c.PointIsInObject(x, y));\r\n    }\r\n\r\n    /**\r\n     * get the top-most child at the (x, y)\r\n     * @return {object} childAt the first child below the point\r\n     * @param {number} x the x coordinate\r\n     * @param {number} y the y coordinate\r\n     */\r\n    childAt(x, y) {\r\n        //loop over the children in reverse because drawing order\r\n        for (var c = this.children.length - 1; c >= 0; c--) {\r\n            if (this.children[c].pointIsInObject(x, y)) {\r\n                return this.children[c];\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add a child to this composition\r\n     * @param {object} child the child to be added\r\n     */\r\n    addChild(child) {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n        super.needsRender = true;\r\n        super.needsDraw = true;\r\n        //TODO: make this hook more generic\r\n        //by using a registry\r\n        //if (this.onchildadded) {\r\n        //  this.onchildadded();\r\n        //}\r\n    }\r\n\r\n    /**\r\n     * add multiple children to the composition\r\n     * @param {object} children the list of children to be added\r\n     */\r\n    addChildren(children){\r\n        for (let c of children){\r\n            this.addChild(c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * remove a child from this composition\r\n     * @param {object} child the child to be removed\r\n     * @return {object} the child removed\r\n     */\r\n    removeChild(child) {\r\n        if (child) {\r\n            var index = this.children.indexOf(child);\r\n            if (index >= 0) {\r\n                super.needsRender = true;\r\n                super.needsDraw = true;\r\n                return this.children.splice(index, 1);\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @override\r\n     * override the render functiont to render the children onto this compositions prerendering canvas\r\n     */\r\n    render() {\r\n        // required to make sure that the drawing occurs within the bounds of this composition\r\n        let boundingBox = this.boundingBox;\r\n        var offset = {\r\n            top: -boundingBox.top,\r\n            left: -boundingBox.left,\r\n            bottom: -boundingBox.bottom,\r\n            right: -boundingBox.right\r\n        };\r\n\r\n        for (let c of this.children) {\r\n            c.draw(this._prerenderingContext, offset);\r\n        };\r\n\r\n        // `destination-out` will erase things\r\n        //this._prerenderingContext.globalCompositeOperation = 'destination-out';\r\n        //_.each(this.masks, function (m) {\r\n        //m.draw(renderContext, contextOffset);\r\n        //});\r\n        //renderContext.globalCompositeOperation = 'normal';\r\n    };\r\n}\r\n"],"file":"Composition.js"}