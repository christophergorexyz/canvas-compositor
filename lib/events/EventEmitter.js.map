{"version":3,"sources":["../../src/events/EventEmitter.js"],"names":["EventEmitter","_listeners","type","callback","push","stack","i","l","length","splice","event","payload","slice","call","defaultPrevented","indexOf","addEventListener","removeEventListener","prototype","on","off","emit","dispatchEvent"],"mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACqBA,Y;AACnB;AACF;AACA;AACE,0BAAc;AAAA;;AACZ;AACJ;AACA;AACA;AACI,SAAKC,UAAL,GAAkB,EAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;;;WACE,0BAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AAC/B,UAAI,EAAED,IAAI,IAAI,KAAKD,UAAf,CAAJ,EAAgC;AAC9B,aAAKA,UAAL,CAAgBC,IAAhB,IAAwB,EAAxB;AACD;;AACD,WAAKD,UAAL,CAAgBC,IAAhB,EAAsBE,IAAtB,CAA2BD,QAA3B;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,6BAAoBD,IAApB,EAA0BC,QAA1B,EAAoC;AAClC,UAAI,EAAED,IAAI,IAAI,KAAKD,UAAf,CAAJ,EAAgC;AAC9B;AACD;;AACD,UAAII,KAAK,GAAG,KAAKJ,UAAL,CAAgBC,IAAhB,CAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAID,KAAK,CAACC,CAAD,CAAL,KAAaH,QAAjB,EAA2B;AACzBE,UAAAA,KAAK,CAACI,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACA;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,uBAAcI,KAAd,EAAqBC,OAArB,EAA8B;AAC5B,UAAI,EAAED,KAAK,CAACR,IAAN,IAAc,KAAKD,UAArB,CAAJ,EAAsC;AACpC,eAAO,IAAP;AACD;;AACD,UAAII,KAAK,GAAG,KAAKJ,UAAL,CAAgBS,KAAK,CAACR,IAAtB,EAA4BU,KAA5B,EAAZ;;AAEA,WAAK,IAAIN,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5CD,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASO,IAAT,CAAc,IAAd,EAAoBH,KAApB,EAA2BC,OAA3B;AACD;;AACD,aAAO,CAACD,KAAK,CAACI,gBAAd;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,oBAAWZ,IAAX,EAAiB;AACf,aAAO,CAAC,CAAC,KAAKD,UAAL,CAAgBC,IAAhB,CAAT;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,qBAAYA,IAAZ,EAAkBC,QAAlB,EAA4B;AAC1B,aAAO,CAAC,CAAC,KAAKF,UAAL,CAAgBC,IAAhB,CAAF,GAA0B,KAAKD,UAAL,CAAgBC,IAAhB,EAAsBa,OAAtB,CAA8BZ,QAA9B,KAA2C,CAArE,GAAyE,KAAhF;AACD;;;WAED,cAAKD,IAAL,EAAWC,QAAX,EAAqB;AAAA;;AACnB,aAAO,KAAKa,gBAAL,CAAsBd,IAAtB,EAA4B,YAAa;AAC9CC,QAAAA,QAAQ,MAAR;;AACA,QAAA,KAAI,CAACc,mBAAL,OAAA,KAAI,YAAJ;AACD,OAHM,CAAP;AAKD;;;;;;;AAGHjB,YAAY,CAACkB,SAAb,CAAuBC,EAAvB,GAA4BnB,YAAY,CAACkB,SAAb,CAAuBF,gBAAnD;AACAhB,YAAY,CAACkB,SAAb,CAAuBE,GAAvB,GAA6BpB,YAAY,CAACkB,SAAb,CAAuBD,mBAApD;AACAjB,YAAY,CAACkB,SAAb,CAAuBG,IAAvB,GAA8BrB,YAAY,CAACkB,SAAb,CAAuBI,aAArD","sourcesContent":["/**\n * The EventEmitter class is modified from a snippet by MDN Contributers at\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget\n * Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/\n *\n * This enables custom classes to dispatch events, and is used by micro-mvc to establish observers\n * and fulfill the Model-View-Controller design pattern\n */\nexport default class EventEmitter {\n  /**\n   * This class is intended to be extended or composed into other classes.\n   */\n  constructor() {\n    /**\n     * Listeners for each event type\n     * @type {object}\n     */\n    this._listeners = {};\n  }\n\n  /**\n   * Add an event listener\n   * @param {string} type The name of the event\n   * @param {function} callback The function to execute upon occurence of the event\n   */\n  addEventListener(type, callback) {\n    if (!(type in this._listeners)) {\n      this._listeners[type] = [];\n    }\n    this._listeners[type].push(callback);\n  }\n\n  /**\n   * Remove an even listner\n   * @param {string} type The name of the event\n   * @param {function} callback The function to stop executing upon occurence of the event\n   */\n  removeEventListener(type, callback) {\n    if (!(type in this._listeners)) {\n      return;\n    }\n    var stack = this._listeners[type];\n    for (var i = 0, l = stack.length; i < l; i++) {\n      if (stack[i] === callback) {\n        stack.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Dispatch an event. Upon dispatching an event, all listeners are called\n   * @param {Event} event The `Event` that needs to be dispatched.\n   * @param {Object} payload An optional `Object` which can be used to transmit data\n   * @return {boolean} returns the inverse of `event.defaultPrevented`\n   */\n  dispatchEvent(event, payload) {\n    if (!(event.type in this._listeners)) {\n      return true;\n    }\n    var stack = this._listeners[event.type].slice();\n\n    for (var i = 0, l = stack.length; i < l; i++) {\n      stack[i].call(this, event, payload);\n    }\n    return !event.defaultPrevented;\n  }\n\n  /**\n   * Check whether the instance has listeners for the provided event type\n   * @return {boolean} true if there is a listener for this event type, otherwise false\n   * @param {string} type The type of event to check for\n   */\n  listensFor(type) {\n    return !!this._listeners[type];\n  }\n\n  /**\n   * Check whether the instance has a specific listener for the provided event type\n   * @return {boolean} true if the callback exists for this event type, otherwise false\n   * @param {string} type The type of event to check for\n   * @param {function} callback The specific callback to check for\n   */\n  hasListener(type, callback) {\n    return !!this._listeners[type] ? this._listeners[type].indexOf(callback) >= 0 : false;\n  }\n\n  once(type, callback) {\n    return this.addEventListener(type, (...args) => {\n      callback(...args);\n      this.removeEventListener(...args);\n    })\n\n  }\n}\n\nEventEmitter.prototype.on = EventEmitter.prototype.addEventListener;\nEventEmitter.prototype.off = EventEmitter.prototype.removeEventListener;\nEventEmitter.prototype.emit = EventEmitter.prototype.dispatchEvent;\n"],"file":"EventEmitter.js"}