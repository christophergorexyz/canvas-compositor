{"version":3,"sources":["../src/PrimitiveComponent.js"],"names":["PrimitiveComponent","options","_flags","DEBUG","debug","_needsDraw","_needsRender","_scaleWidth","_scaleHeight","_d","Vector","x","y","style","Object","assign","DEFAULTS","_prerenderingCanvas","document","createElement","_prerenderingContext","getContext","_parent","parent","context","offset","boundingBox","needsDraw","needsRender","render","width","right","left","height","bottom","top","beginPath","setLineDash","lineWidth","strokeStyle","strokeRect","closePath","Renderer","drawImage","pointIsInBoundingBox","index","children","indexOf","splice","length","UpdateChildrenLists","add","d","val","c","scaleWidth","scaleHeight","compoundScale","EventEmitter"],"mappings":"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","sourcesContent":["import { Vector } from 'vectorious';\nimport { DEFAULTS, Renderer } from './Renderer';\n\nimport { EventEmitter } from 'micro-mvc';\n\n/**\n * The base class of things that may be drawn on the canvas.\n * All drawable objects should inherit from this class.\n * Typically, it is unnecessary for application programmers to\n * call this directly, although they may wish to extend their own\n * classes with it.\n */\nexport class PrimitiveComponent extends EventEmitter {\n    /**\n     * @param {object} options\n     */\n    constructor(options) {\n        super();\n\n        options = options || {};\n\n        this._flags = {};\n        this._flags.DEBUG = options.debug || false;\n\n        /**\n         * does the object need to be redrawn?\n         * @type {boolean} _needsDraw\n         */\n        this._needsDraw = true;\n\n        /**\n         * does the object need to be rendered?\n         * @type {boolean} _needsRender\n         */\n        this._needsRender = true;\n\n        /**\n         * the horizontal scale of the object. defaults to 1\n         * @type {number} _scaleWidth\n         */\n        this._scaleWidth = 1;\n\n        /**\n         * the vertical scale of the object. defaults to 1\n         * @type {number} _scaleHeight\n         */\n        this._scaleHeight = 1;\n\n        /**\n         * d is for \"displacement\": a 2D Vector object representing cartesian coordinate\n         * position relative to its parent composition (or [0,0] if this is the scene composition)\n         * @type {object} d\n         */\n        this._d = new Vector([options.x || 0, options.y || 0]);\n\n        /**\n         * style options for this particular object. these are standard context styles\n         * @type {object} style\n         */\n        this.style = Object.assign({}, DEFAULTS, options.style);\n\n        //TODO: determine whether this is the best place to implement click passthrough -\n        //it might be better left implemented by consuming modules\n        /**\n         * objects with pressPassThrough set to true will allow mouse clicks to pass\n         * through to objects behind them\n         * @type {boolean} pressPassThrough\n         */\n        //this.pressPassThrough = options.pressPassThrough || false;\n\n        /**\n         * the prerendering canvas is used to avoid performing mutliple draw operations on the\n         * visible, main canvas. this minimizes the time needed to render by prerendering on a\n         * canvas only as large as necessary for the object\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingCanvas = document.createElement('canvas');\n\n        //TODO: enable alternative rendering contexts for WebGL and 3d\n        /**\n         * the 2D context of the prerendering canvas.\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingContext = this._prerenderingCanvas.getContext('2d');\n\n        /**\n         * the parent object of this object. with the exception of the scene composition itself,\n         * the root of all objects ancestry should be the scene composition\n         * @type {object} parent\n         */\n        this._parent = options.parent || null;\n    }\n\n    /**\n     * the global offset of the object on the canvas.\n     * this is the sum of this object's displacement\n     * and all of its ancestry.\n     * @type {object} offset a 2D Vector representing displacement from [0, 0]\n     */\n    get offset() {\n        return (this.parent ? Vector.add(this.d, this.parent.offset) : this.d);\n    }\n\n    /**\n     * returns true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    get needsDraw() {\n        return this._needsDraw;\n    }\n\n    /**\n     * set to true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    set needsDraw(val) {\n        if (this.parent && val) {\n            this.parent.needsDraw = val;\n            this.parent.needsRender = true; // if this needs to be redrawn, then the parent needs a full rerender\n        }\n        this._needsDraw = val;\n    }\n\n    /**\n     * returns true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    get needsRender() {\n        return this._needsRender;\n    }\n\n    /**\n     * set to true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    set needsRender(val) {\n        if (this.parent && val) {\n            this.parent.needsRender = val;\n        }\n        this._needsRender = val;\n    }\n\n    /**\n     * return the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    get scaleWidth() {\n        return this._scaleWidth;\n    }\n    /**\n     * set the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    set scaleWidth(val) {\n        this._scaleWidth = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     */\n    get scaleHeight() {\n        return this._scaleHeight;\n    }\n\n    /**\n     * set the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     * @param {number} val the vertical scale\n     */\n    set scaleHeight(val) {\n        this._scaleHeight = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return an object containing the vertical and horizontal scale\n     * @type {object} scale\n     */\n    get scale() {\n        return {\n            scaleWidth: this.scaleWidth,\n            scaleHeight: this.scaleHeight\n        };\n    }\n\n    /**\n     * set the scale width and height in one go\n     * @type {number} scale\n     */\n    set scale(val) {\n        this.scaleHeight = val;\n        this.scaleWidth = val;\n    }\n\n    /**\n     * return the scale of the object, compounded with the parent object's scale\n     * @type {{scaleWidth: number, scaleHeight: number}} compoundScale the scale multiplied by the compound scale of its parent or 1\n     */\n    get compoundScale() {\n        return {\n            scaleWidth: this.parent ? this.scaleWidth * this.parent.compoundScale.scaleWidth : this.scaleWidth,\n            scaleHeight: this.parent ? this.scaleHeight * this.parent.compoundScale.scaleHeight : this.scaleHeight\n        };\n    }\n\n    /**\n     * d is for displacement - returns a vector\n     * @type {object} d\n     */\n    get d() {\n        return this._d;\n    }\n\n    /**\n     * d is for displacement - accepts a vector\n     * @type {object} d\n     * @param {object} val a vector\n     */\n    set d(val) {\n        this._d = val;\n    }\n\n    /**\n     * get the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     */\n    get parent() {\n        return this._parent;\n    }\n    //TODO: provide links to things\n    /**\n     * set the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     * @param {object} val a composition\n     */\n    set parent(val) {\n        this._parent = val;\n    }\n\n    /**\n     * draw the object to canvas, render it if necessary\n     * @param {object} context the final canvas context where this will be drawn\n     * @param {object} offset the offset on the canvas - optional, used for prerendering\n     */\n    draw(context, offset) {\n        let boundingBox = this.boundingBox;\n\n        this.needsDraw = false;\n\n        if (this.needsRender && this.render) {\n            //ditch any old rendering artifacts - they are no longer viable\n            delete this._prerenderingCanvas;\n            delete this._prerenderingContext;\n\n            //create a new canvas and context for rendering\n            this._prerenderingCanvas = document.createElement('canvas');\n            this._prerenderingContext = this._prerenderingCanvas.getContext('2d'); //text needs prerendering context defined for boundingBox measurements\n\n            //make sure the new canvas has the appropriate dimensions\n            this._prerenderingCanvas.width = boundingBox.right - boundingBox.left;\n            this._prerenderingCanvas.height = boundingBox.bottom - boundingBox.top;\n\n            this.render();\n            this.needsRender = false;\n        }\n\n        //TODO: handle debug options\n        //draw bounding boxes\n        if (this._flags.DEBUG) {\n        \tthis._prerenderingContext.beginPath();\n            this._prerenderingContext.setLineDash([5, 15]);\n        \tthis._prerenderingContext.lineWidth=2.0;\n            this._prerenderingContext.strokeStyle='#FF0000';\n        \tthis._prerenderingContext.strokeStyle='#FF0000';\n        \tthis._prerenderingContext.strokeRect(0,0,this._prerenderingCanvas.width, this._prerenderingCanvas.height);\n        \tthis._prerenderingContext.closePath();\n        }\n\n        //offsets are for prerendering contexts of compositions\n        let x = boundingBox.left + (offset && offset.left ? offset.left : 0);\n        let y = boundingBox.top + (offset && offset.top ? offset.top : 0);\n        Renderer.drawImage(x, y, this._prerenderingCanvas, context, this.style);\n    }\n\n    //TODO: provide more doc details around this\n    /**\n     * this method must be overridden by a subclass.\n     *\n     * the render method should be implemented by subclasses\n     * @abstract\n     */\n    render() {}\n\n    /**\n     * check whether the point specified lies *inside* this objects bounding box\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is within the bounding box\n     */\n    pointIsInBoundingBox(x, y) {\n        let boundingBox = this.boundingBox;\n        return (\n            x > boundingBox.left &&\n            y > boundingBox.top &&\n            x < boundingBox.right &&\n            y < boundingBox.bottom\n        );\n    }\n\n    /**\n     * check whether the point is within the object.\n     * this method should be overridden by subclassess\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is in the object, as implemented by inheriting classes\n     */\n    pointIsInObject(x, y) {\n        return this.pointIsInBoundingBox(x, y);\n    }\n\n    /**\n     * move the object on top of other objects (render last)\n     */\n    moveToFront() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(this.parent.children.length, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object below the other objects (render first)\n     */\n    moveToBack() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(0, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n\n    /**\n     * move the object forward in the stack (drawn later)\n     */\n    moveForward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0 && index < this.parent.children.length - 1) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index + 1, 0, this); //if index + 1 > siblings.length, inserts it at end\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object backward in the stack (drawn sooner)\n     */\n    moveBackward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index > 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index - 1, 0, this);\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n}\n"],"file":"PrimitiveComponent.js"}