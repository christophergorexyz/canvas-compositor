{"version":3,"sources":["../src/PrimitiveComponent.js"],"names":["defaults","fillStyle","Defaults","FILL_STYLE","strokeStyle","STROKE_STYLE","lineCap","LINE_CAP","lineWidth","LINE_WIDTH","lineJoin","LINE_JOIN","miterLimit","MITER_LIMIT","font","FONT","textAlign","TEXT_ALIGN","textBaseline","TEXT_BASELINE","lineDash","PrimitiveComponent","options","_needsDraw","_needsRender","_scaleWidth","_scaleHeight","_d","Vector","x","y","style","Object","assign","_prerenderingCanvas","document","createElement","_prerenderingContext","getContext","_parent","parent","add","d","offset","val","needsDraw","needsRender","children","c","scaleWidth","scaleHeight","compoundScale","context","boundingBox","render","width","right","left","height","bottom","top","pointIsInBoundingBox","index","indexOf","splice","length","UpdateChildrenLists","EventEmitter"],"mappings":";;;;;;;;;AAAA;;AAIA;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAG;AACb;AACAC,EAAAA,SAAS,EAAEC,QAAQ,CAACC,UAFP;AAGb;AACAC,EAAAA,WAAW,EAAEF,QAAQ,CAACG,YAJT;AAKbC,EAAAA,OAAO,EAAEJ,QAAQ,CAACK,QALL;AAMbC,EAAAA,SAAS,EAAEN,QAAQ,CAACO,UANP;AAObC,EAAAA,QAAQ,EAAER,QAAQ,CAACS,SAPN;AAQbC,EAAAA,UAAU,EAAEV,QAAQ,CAACW,WARR;AASbC,EAAAA,IAAI,EAAEZ,QAAQ,CAACa,IATF;AAUbC,EAAAA,SAAS,EAAEd,QAAQ,CAACe,UAVP;AAWbC,EAAAA,YAAY,EAAEhB,QAAQ,CAACiB,aAXV;AAYbC,EAAAA,QAAQ,EAAE;AAZG,CAAf;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;;IACaC,kB;;;;;AACX;AACF;AACA;AACA;AACE,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB;AAEAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAHmB,CAKnB;AACA;AACA;;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,UAAL,GAAkB,IAAlB;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,YAAL,GAAoB,IAApB;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,WAAL,GAAmB,CAAnB;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,YAAL,GAAoB,CAApB;AAEA;AACJ;AACA;AACA;AACA;;AACI,UAAKC,EAAL,GAAU,IAAIC,kBAAJ,CAAW,CAACN,OAAO,CAACO,CAAR,IAAa,CAAd,EAAiBP,OAAO,CAACQ,CAAR,IAAa,CAA9B,CAAX,CAAV;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjC,QAAlB,EAA4BsB,OAAO,CAACS,KAApC,CAAb,CA5CmB,CA8CnB;AACA;;AACA;AACJ;AACA;AACA;AACA;AACI;;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,UAAKG,mBAAL,GAA2BC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA3B,CA7DmB,CA+DnB;;AACA;AACJ;AACA;AACA;;AACI,UAAKC,oBAAL,GAA4B,MAAKH,mBAAL,CAAyBI,UAAzB,CAAoC,IAApC,CAA5B;AAEA;AACJ;AACA;AACA;AACA;;AACI,UAAKC,OAAL,GAAejB,OAAO,CAACkB,MAAR,IAAkB,IAAjC;AA3EmB;AA4EpB;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;;;SACE,eAAa;AACX,aAAQ,KAAKA,MAAL,GAAcZ,mBAAOa,GAAP,CAAW,KAAKC,CAAhB,EAAmB,KAAKF,MAAL,CAAYG,MAA/B,CAAd,GAAuD,KAAKD,CAApE;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACE,eAAgB;AACd,aAAO,KAAKnB,UAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACE,aAAcqB,GAAd,EAAmB;AACjB,UAAI,KAAKJ,MAAL,IAAeI,GAAnB,EAAwB;AACtB,aAAKJ,MAAL,CAAYK,SAAZ,GAAwBD,GAAxB;AACA,aAAKJ,MAAL,CAAYM,WAAZ,GAA0B,IAA1B,CAFsB,CAEU;AACjC;;AACD,WAAKvB,UAAL,GAAkBqB,GAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;SACE,eAAkB;AAChB,aAAO,KAAKpB,YAAZ;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;SACE,aAAgBoB,GAAhB,EAAqB;AACnB,UAAI,KAAKJ,MAAL,IAAeI,GAAnB,EAAwB;AACtB,aAAKJ,MAAL,CAAYM,WAAZ,GAA0BF,GAA1B;AACD;;AACD,WAAKpB,YAAL,GAAoBoB,GAApB;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAiB;AACf,aAAO,KAAKnB,WAAZ;AACD;AACD;AACF;AACA;AACA;;SACE,aAAemB,GAAf,EAAoB;AAClB,WAAKnB,WAAL,GAAmBmB,GAAnB;AACA,WAAKE,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;;AAHkB,iDAIJ,KAAKE,QAJD;AAAA;;AAAA;AAIlB,4DAA6B;AAAA,cAApBC,CAAoB;AAC3BA,UAAAA,CAAC,CAACF,WAAF,GAAgB,IAAhB;AACAE,UAAAA,CAAC,CAACH,SAAF,GAAc,IAAd;AACD;AAPiB;AAAA;AAAA;AAAA;AAAA;AAQnB;AAED;AACF;AACA;AACA;;;;SACE,eAAkB;AAChB,aAAO,KAAKnB,YAAZ;AACD;AAED;AACF;AACA;AACA;;SACE,aAAgBkB,GAAhB,EAAqB;AACnB,WAAKlB,YAAL,GAAoBkB,GAApB;AACA,WAAKE,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;;AAHmB,kDAIL,KAAKE,QAJA;AAAA;;AAAA;AAInB,+DAA6B;AAAA,cAApBC,CAAoB;AAC3BA,UAAAA,CAAC,CAACF,WAAF,GAAgB,IAAhB;AACAE,UAAAA,CAAC,CAACH,SAAF,GAAc,IAAd;AACD;AAPkB;AAAA;AAAA;AAAA;AAAA;AAQpB;AAED;AACF;AACA;AACA;;;;SACE,eAAY;AACV,aAAO;AACLI,QAAAA,UAAU,EAAE,KAAKA,UADZ;AAELC,QAAAA,WAAW,EAAE,KAAKA;AAFb,OAAP;AAID;AAED;AACF;AACA;AACA;;SACE,aAAUN,GAAV,EAAe;AACb,WAAKM,WAAL,GAAmBN,GAAnB;AACA,WAAKK,UAAL,GAAkBL,GAAlB;AACD;AAED;AACF;AACA;AACA;AACA;;;;SACE,eAAoB;AAClB,aAAO;AACLK,QAAAA,UAAU,EAAE,KAAKT,MAAL,GAAc,KAAKS,UAAL,GAAkB,KAAKT,MAAL,CAAYW,aAAZ,CAA0BF,UAA1D,GAAuE,KAAKA,UADnF;AAELC,QAAAA,WAAW,EAAE,KAAKV,MAAL,GAAc,KAAKU,WAAL,GAAmB,KAAKV,MAAL,CAAYW,aAAZ,CAA0BD,WAA3D,GAAyE,KAAKA;AAFtF,OAAP;AAID;AAED;AACF;AACA;AACA;;;;SACE,eAAQ;AACN,aAAO,KAAKvB,EAAZ;AACD;AAED;AACF;AACA;AACA;;SACE,aAAMiB,GAAN,EAAW;AACT,WAAKjB,EAAL,GAAUiB,GAAV;AACD;AAED;AACF;AACA;AACA;;;;SACE,eAAa;AACX,aAAO,KAAKL,OAAZ;AACD,K,CACD;;AACA;AACF;AACA;AACA;;SACE,aAAWK,GAAX,EAAgB;AACd,WAAKL,OAAL,GAAeK,GAAf;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,cAAKQ,OAAL,EAAcT,MAAd,EAAsB;AACpB,UAAIU,WAAW,GAAG,KAAKA,WAAvB;AAEA,WAAKR,SAAL,GAAiB,KAAjB;;AAEA,UAAI,KAAKC,WAAL,IAAoB,KAAKQ,MAA7B,EAAqC;AACnC;AACN;AACA;AACA;AACM;AACA;AAEA;AACA;AACA;AAEA;AACA,aAAKpB,mBAAL,CAAyBqB,KAAzB,GAAiCF,WAAW,CAACG,KAAZ,GAAoBH,WAAW,CAACI,IAAjE;AACA,aAAKvB,mBAAL,CAAyBwB,MAAzB,GAAkCL,WAAW,CAACM,MAAZ,GAAqBN,WAAW,CAACO,GAAnE,CAdmC,CAenC;;AACA,iCAAU,CAAV,EAAa,CAAb,EAAgB,KAAK1B,mBAAL,CAAyBqB,KAAzC,EAAgD,KAAKrB,mBAAL,CAAyBwB,MAAzE,EAAiF,KAAKrB,oBAAtF;AAEA,aAAKiB,MAAL;AACA,aAAKR,WAAL,GAAmB,KAAnB;AACD,OAzBmB,CA2BpB;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;;AACA,UAAIjB,CAAC,GAAGwB,WAAW,CAACI,IAAZ,IAAoBd,MAAM,IAAIA,MAAM,CAACc,IAAjB,GAAwBd,MAAM,CAACc,IAA/B,GAAsC,CAA1D,CAAR;AACA,UAAI3B,CAAC,GAAGuB,WAAW,CAACO,GAAZ,IAAmBjB,MAAM,IAAIA,MAAM,CAACiB,GAAjB,GAAuBjB,MAAM,CAACiB,GAA9B,GAAoC,CAAvD,CAAR;AACA,+BAAU/B,CAAV,EAAaC,CAAb,EAAgB,KAAKI,mBAArB,EAA0CkB,OAA1C,EAAmD,KAAKrB,KAAxD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;;WACE,kBAAS,CAAE;AAEX;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,8BAAqBF,CAArB,EAAwBC,CAAxB,EAA2B;AACzB,UAAIuB,WAAW,GAAG,KAAKA,WAAvB;AACA,aACExB,CAAC,GAAGwB,WAAW,CAACI,IAAhB,IACM3B,CAAC,GAAGuB,WAAW,CAACO,GADtB,IAEM/B,CAAC,GAAGwB,WAAW,CAACG,KAFtB,IAGM1B,CAAC,GAAGuB,WAAW,CAACM,MAJxB;AAMD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,yBAAgB9B,CAAhB,EAAmBC,CAAnB,EAAsB;AACpB,aAAO,KAAK+B,oBAAL,CAA0BhC,CAA1B,EAA6BC,CAA7B,CAAP;AACD;AAED;AACF;AACA;;;;WACE,uBAAc;AACZ,UAAI,KAAKU,MAAT,EAAiB;AACf,YAAIsB,KAAK,GAAG,KAAKtB,MAAL,CAAYO,QAAZ,CAAqBgB,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAID,KAAK,IAAI,CAAb,EAAgB;AACd,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACA,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4B,KAAKxB,MAAL,CAAYO,QAAZ,CAAqBkB,MAAjD,EAAyD,CAAzD,EAA4D,IAA5D;AACA,eAAKpB,SAAL,GAAiB,IAAjB;AACD;AACF;AACF;AAED;AACF;AACA;;;;WACE,sBAAa;AACX,UAAI,KAAKL,MAAT,EAAiB;AACf,YAAIsB,KAAK,GAAG,KAAKtB,MAAL,CAAYO,QAAZ,CAAqBgB,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAID,KAAK,IAAI,CAAb,EAAgB;AACd,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACA,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,IAAlC;AACA,eAAKnB,SAAL,GAAiB,IAAjB;AACD;AACF;AACF;AAGD;AACF;AACA;;;;WACE,uBAAc;AACZ,UAAI,KAAKL,MAAT,EAAiB;AACf,YAAIsB,KAAK,GAAG,KAAKtB,MAAL,CAAYO,QAAZ,CAAqBgB,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAID,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKtB,MAAL,CAAYO,QAAZ,CAAqBkB,MAArB,GAA8B,CAAxD,EAA2D;AACzD,eAAKzB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACA,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C,EAFyD,CAER;;AACjD,eAAKtB,MAAL,CAAY0B,mBAAZ;AACA,eAAKpB,WAAL,GAAmB,IAAnB;AACA,eAAKD,SAAL,GAAiB,IAAjB;AACD;AACF;AACF;AAED;AACF;AACA;;;;WACE,wBAAe;AACb,UAAI,KAAKL,MAAT,EAAiB;AACf,YAAIsB,KAAK,GAAG,KAAKtB,MAAL,CAAYO,QAAZ,CAAqBgB,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAID,KAAK,GAAG,CAAZ,EAAe;AACb,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAA5B,EAAmC,CAAnC;AACA,eAAKtB,MAAL,CAAYO,QAAZ,CAAqBiB,MAArB,CAA4BF,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C;AACA,eAAKtB,MAAL,CAAY0B,mBAAZ;AACA,eAAKpB,WAAL,GAAmB,IAAnB;AACA,eAAKD,SAAL,GAAiB,IAAjB;AACD;AACF;AACF;;;;EA1ZqCsB,sB","sourcesContent":["import {\n  Vector\n} from 'vectorious';\n\nimport {\n  drawImage,\n  clearRect\n} from './Renderer';\n\nimport {\n  EventEmitter\n} from 'micro-mvc';\n\nimport * as Defaults from './Defaults';\n\n//assign default values to an object so that the Object.assign function can be used\n/**\n * The default values to be passed to the renderer and overridden by any given object\n */\nlet defaults = {\n  //direction: 'inherit',\n  fillStyle: Defaults.FILL_STYLE,\n  //filter: 'none',\n  strokeStyle: Defaults.STROKE_STYLE,\n  lineCap: Defaults.LINE_CAP,\n  lineWidth: Defaults.LINE_WIDTH,\n  lineJoin: Defaults.LINE_JOIN,\n  miterLimit: Defaults.MITER_LIMIT,\n  font: Defaults.FONT,\n  textAlign: Defaults.TEXT_ALIGN,\n  textBaseline: Defaults.TEXT_BASELINE,\n  lineDash: []\n};\n\n/**\n * The base class of things that may be drawn on the canvas.\n * All drawable objects should inherit from this class.\n * Typically, it is unnecessary for application programmers to\n * call this directly, although they may wish to extend their own\n * classes with it.\n */\nexport class PrimitiveComponent extends EventEmitter {\n  /**\n   * construct a primitive component\n   * @param {object} options\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    //TODO: reimplement any flags for debug data\n    //this._flags = {};\n    //this._flags.DEBUG = options.debug || false;\n\n    /**\n     * does the object need to be redrawn?\n     * @type {boolean}\n     */\n    this._needsDraw = true;\n\n    /**\n     * does the object need to be rendered?\n     * @type {boolean}\n     */\n    this._needsRender = true;\n\n    /**\n     * the horizontal scale of the object. defaults to 1\n     * @type {number}\n     */\n    this._scaleWidth = 1;\n\n    /**\n     * the vertical scale of the object. defaults to 1\n     * @type {number}\n     */\n    this._scaleHeight = 1;\n\n    /**\n     * d is for \"displacement\": a 2D Vector object representing cartesian coordinate\n     * position relative to its parent composition (or [0,0] if this is the scene composition)\n     * @type {object}\n     */\n    this._d = new Vector([options.x || 0, options.y || 0]);\n\n    /**\n     * style options for this particular object. these are standard context styles\n     * @type {object}\n     */\n    this.style = Object.assign({}, defaults, options.style);\n\n    //TODO: determine whether this is the best place to implement click passthrough -\n    //it might be better left implemented by consuming modules\n    /**\n     * objects with pressPassThrough set to true will allow mouse clicks to pass\n     * through to objects behind them\n     * @type {boolean}\n     */\n    //this.pressPassThrough = options.pressPassThrough || false;\n\n    /**\n     * the prerendering canvas is used to avoid performing mutliple draw operations on the\n     * visible, main canvas. this minimizes the time needed to render by prerendering on a\n     * canvas only as large as necessary for the object\n     * @type {object}\n     */\n    this._prerenderingCanvas = document.createElement('canvas');\n\n    //TODO: enable alternative rendering contexts for WebGL and 3d\n    /**\n     * the 2D context of the prerendering canvas.\n     * @type {object}\n     */\n    this._prerenderingContext = this._prerenderingCanvas.getContext('2d');\n\n    /**\n     * the parent object of this object. with the exception of the scene composition itself,\n     * the root of all objects ancestry should be the scene composition\n     * @type {object}\n     */\n    this._parent = options.parent || null;\n  }\n\n  /**\n   * the global offset of the object on the canvas.\n   * this is the sum of this object's displacement\n   * and all of its ancestry. offset a 2D Vector\n   * representing displacement from [0, 0]\n   * @type {object}\n   */\n  get offset() {\n    return (this.parent ? Vector.add(this.d, this.parent.offset) : this.d);\n  }\n\n  /**\n   * returns true whenever the object needs to be re-drawn to canvas.\n   * when true, this will indicate to the parent tree of composing objects that\n   * the object needs to be re-drawn on the next animation loop.\n   *\n   * objects need to be updated when their displacement changes, or when any thing\n   * that requires a rerender occurs.\n   *\n   * @type {boolean}\n   */\n  get needsDraw() {\n    return this._needsDraw;\n  }\n\n  /**\n   * set to true whenever the object needs to be re-drawn to canvas.\n   * when true, this will indicate to the parent tree of composing objects that\n   * the object needs to be re-drawn on the next animation loop.\n   *\n   * objects need to be updated when their displacement changes, or when any thing\n   * that requires a rerender occurs.\n   *\n   * @type {boolean}\n   */\n  set needsDraw(val) {\n    if (this.parent && val) {\n      this.parent.needsDraw = val;\n      this.parent.needsRender = true; // if this needs to be redrawn, then the parent needs a full rerender\n    }\n    this._needsDraw = val;\n  }\n\n  /**\n   * returns true whenever the object's properties have changed such that\n   * it needs to be rendered differently\n   *\n   * 1. scale change\n   * 1. physical property change (height, width, radius, etc.)\n   * 1. color change\n   *\n   * @type {boolean}\n   */\n  get needsRender() {\n    return this._needsRender;\n  }\n\n  /**\n   * set to true whenever the object's properties have changed such that\n   * it needs to be rendered differently\n   *\n   * 1. scale change\n   * 1. physical property change (height, width, radius, etc.)\n   * 1. color change\n   *\n   * @type {boolean}\n   */\n  set needsRender(val) {\n    if (this.parent && val) {\n      this.parent.needsRender = val;\n    }\n    this._needsRender = val;\n  }\n\n  /**\n   * return the horizontal scale of the object - defaults to 1\n   * @type {number}\n   */\n  get scaleWidth() {\n    return this._scaleWidth;\n  }\n  /**\n   * set the horizontal scale of the object - defaults to 1\n   * @type {number}\n   */\n  set scaleWidth(val) {\n    this._scaleWidth = val;\n    this.needsRender = true;\n    this.needsDraw = true;\n    for (let c of this.children) {\n      c.needsRender = true;\n      c.needsDraw = true;\n    }\n  }\n\n  /**\n   * return the vertical scale of the object - defaults to 1\n   * @type {number}\n   */\n  get scaleHeight() {\n    return this._scaleHeight;\n  }\n\n  /**\n   * set the vertical scale of the object - defaults to 1\n   * @param {number} val the vertical scale\n   */\n  set scaleHeight(val) {\n    this._scaleHeight = val;\n    this.needsRender = true;\n    this.needsDraw = true;\n    for (let c of this.children) {\n      c.needsRender = true;\n      c.needsDraw = true;\n    }\n  }\n\n  /**\n   * return an object containing the vertical and horizontal scale\n   * @type {object}\n   */\n  get scale() {\n    return {\n      scaleWidth: this.scaleWidth,\n      scaleHeight: this.scaleHeight\n    };\n  }\n\n  /**\n   * set the scale width and height in one go\n   * @type {number}\n   */\n  set scale(val) {\n    this.scaleHeight = val;\n    this.scaleWidth = val;\n  }\n\n  /**\n   * return the scale of the object, compounded with the parent object's scale\n   * the scale multiplied by the compound scale of its parent or 1\n   * @type {{scaleWidth: number, scaleHeight: number}}\n   */\n  get compoundScale() {\n    return {\n      scaleWidth: this.parent ? this.scaleWidth * this.parent.compoundScale.scaleWidth : this.scaleWidth,\n      scaleHeight: this.parent ? this.scaleHeight * this.parent.compoundScale.scaleHeight : this.scaleHeight\n    };\n  }\n\n  /**\n   * d is for displacement - returns a vector\n   * @type {object}\n   */\n  get d() {\n    return this._d;\n  }\n\n  /**\n   * d is for displacement - accepts a vector\n   * @param {object} val\n   */\n  set d(val) {\n    this._d = val;\n  }\n\n  /**\n   * get the parent of the object. all objects except the scene graph should have a parent\n   * @type {object}\n   */\n  get parent() {\n    return this._parent;\n  }\n  //TODO: provide links to things\n  /**\n   * set the parent of the object. all objects except the scene graph should have a parent\n   * @param {object} val a composition\n   */\n  set parent(val) {\n    this._parent = val;\n  }\n\n  /**\n   * draw the object to canvas, render it if necessary\n   * @param {object} context the final canvas context where this will be drawn\n   * @param {object} offset the offset on the canvas - optional, used for prerendering\n   */\n  draw(context, offset) {\n    let boundingBox = this.boundingBox;\n\n    this.needsDraw = false;\n\n    if (this.needsRender && this.render) {\n      /*\n                TODO: AB-test this,\n                it may be faster than clearRect\n            */\n      //delete this._prerenderingCanvas;\n      //delete this._prerenderingContext;\n\n      //create a new canvas and context for rendering\n      //this._prerenderingCanvas = document.createElement('canvas');\n      //this._prerenderingContext = this._prerenderingCanvas.getContext('2d'); //text needs prerendering context defined for boundingBox measurements\n\n      //make sure the new canvas has the appropriate dimensions\n      this._prerenderingCanvas.width = boundingBox.right - boundingBox.left;\n      this._prerenderingCanvas.height = boundingBox.bottom - boundingBox.top;\n      //clear any old rendering artifacts - they are no longer viable\n      clearRect(0, 0, this._prerenderingCanvas.width, this._prerenderingCanvas.height, this._prerenderingContext);\n\n      this.render();\n      this.needsRender = false;\n    }\n\n    //TODO: handle debug options\n    //draw bounding boxes\n    /*if (this._flags.DEBUG) {\n            this._prerenderingContext.beginPath();\n            this._prerenderingContext.setLineDash([5, 15]);\n            this._prerenderingContext.lineWidth = 2.0;\n            this._prerenderingContext.strokeStyle = '#FF0000';\n            this._prerenderingContext.strokeStyle = '#FF0000';\n            this._prerenderingContext.strokeRect(0, 0, this._prerenderingCanvas.width, this._prerenderingCanvas.height);\n            this._prerenderingContext.closePath();\n        }*/\n\n    //offsets are for prerendering contexts of compositions\n    let x = boundingBox.left + (offset && offset.left ? offset.left : 0);\n    let y = boundingBox.top + (offset && offset.top ? offset.top : 0);\n    drawImage(x, y, this._prerenderingCanvas, context, this.style);\n  }\n\n  /**\n   * this method must be overridden by a subclass.\n   *\n   * the render method should be implemented by subclasses\n   * @abstract\n   */\n  render() {}\n\n  /**\n   * check whether the point specified lies *inside* this objects bounding box\n   *\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @return {boolean} whether the point is within the bounding box\n   */\n  pointIsInBoundingBox(x, y) {\n    let boundingBox = this.boundingBox;\n    return (\n      x > boundingBox.left &&\n            y > boundingBox.top &&\n            x < boundingBox.right &&\n            y < boundingBox.bottom\n    );\n  }\n\n  /**\n   * check whether the point is within the object.\n   * this method should be overridden by subclassess\n   *\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @return {boolean} whether the point is in the object, as implemented by inheriting classes\n   */\n  pointIsInObject(x, y) {\n    return this.pointIsInBoundingBox(x, y);\n  }\n\n  /**\n   * move the object on top of other objects (render last)\n   */\n  moveToFront() {\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      if (index >= 0) {\n        this.parent.children.splice(index, 1);\n        this.parent.children.splice(this.parent.children.length, 0, this);\n        this.needsDraw = true;\n      }\n    }\n  }\n\n  /**\n   * move the object below the other objects (render first)\n   */\n  moveToBack() {\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      if (index >= 0) {\n        this.parent.children.splice(index, 1);\n        this.parent.children.splice(0, 0, this);\n        this.needsDraw = true;\n      }\n    }\n  }\n\n\n  /**\n   * move the object forward in the stack (drawn later)\n   */\n  moveForward() {\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      if (index >= 0 && index < this.parent.children.length - 1) {\n        this.parent.children.splice(index, 1);\n        this.parent.children.splice(index + 1, 0, this); //if index + 1 > siblings.length, inserts it at end\n        this.parent.UpdateChildrenLists();\n        this.needsRender = true;\n        this.needsDraw = true;\n      }\n    }\n  }\n\n  /**\n   * move the object backward in the stack (drawn sooner)\n   */\n  moveBackward() {\n    if (this.parent) {\n      let index = this.parent.children.indexOf(this);\n      if (index > 0) {\n        this.parent.children.splice(index, 1);\n        this.parent.children.splice(index - 1, 0, this);\n        this.parent.UpdateChildrenLists();\n        this.needsRender = true;\n        this.needsDraw = true;\n      }\n    }\n  }\n}\n"],"file":"PrimitiveComponent.js"}