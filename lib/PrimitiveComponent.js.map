{"version":3,"sources":["../src/PrimitiveComponent.js"],"names":["PrimitiveComponent","options","_flags","DEBUG","debug","_needsDraw","_needsRender","_scaleWidth","_scaleHeight","_d","Vector","x","y","style","Object","assign","DEFAULTS","draggable","_prerenderingCanvas","document","createElement","_prerenderingContext","getContext","_parent","parent","onmousedown","onmouseup","onmousemove","onmouseout","onclick","enableDragging","dragStart","needsDraw","e","_mouseOffset","offsetX","offsetY","subtract","offset","drag","dragEnd","d","context","boundingBox","needsRender","render","width","right","left","height","bottom","top","beginPath","setLineDash","lineWidth","strokeStyle","strokeRect","closePath","Renderer","drawImage","pointIsInBoundingBox","index","children","indexOf","splice","length","UpdateChildrenLists","add","val","c","scaleWidth","scaleHeight","compoundScale"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAEA;;;;;;;IAOaA,kB;;;AACT;;;AAGA,8BAAYC,OAAZ,EAAqB;AAAA;;AAEjBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKA,MAAL,CAAYC,KAAZ,GAAoBF,OAAO,CAACG,KAAR,IAAiB,KAArC;AAEA;;;;;AAIA,SAAKC,UAAL,GAAkB,IAAlB;AAEA;;;;;AAIA,SAAKC,YAAL,GAAoB,IAApB;AAEA;;;;;AAIA,SAAKC,WAAL,GAAmB,CAAnB;AAEA;;;;;AAIA,SAAKC,YAAL,GAAoB,CAApB;AAEA;;;;;;AAKA,SAAKC,EAAL,GAAU,IAAIC,kBAAJ,CAAW,CAACT,OAAO,CAACU,CAAR,IAAa,CAAd,EAAiBV,OAAO,CAACW,CAAR,IAAa,CAA9B,CAAX,CAAV;AAEA;;;;;AAIA,SAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBC,kBAAlB,EAA4Bf,OAAO,CAACY,KAApC,CAAb;AAEA;;;;;AAKA;;AAEA;;;;;AAIA,SAAKI,SAAL,GAAiBhB,OAAO,CAACgB,SAAR,IAAqB,KAAtC;AAEA;;;;AAIA;AACA;;AAEA;;;;;;;AAMA,SAAKC,mBAAL,GAA2BC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA3B;AAEA;;;;;AAIA,SAAKC,oBAAL,GAA4B,KAAKH,mBAAL,CAAyBI,UAAzB,CAAoC,IAApC,CAA5B;AAEA;;;;;;AAKA,SAAKC,OAAL,GAAetB,OAAO,CAACuB,MAAR,IAAkB,IAAjC;AAEA;;;;;AAIA,SAAKC,WAAL,GAAmB,IAAnB;AAEA;;;;;AAIA,SAAKC,SAAL,GAAiB,IAAjB;AAEA;;;;;AAIA,SAAKC,WAAL,GAAmB,IAAnB;AAEA;;;;;AAIA,SAAKC,UAAL,GAAkB,IAAlB;AAEA;;;;;AAIA,SAAKC,OAAL,GAAe,IAAf;;AAGA,QAAI,KAAKZ,SAAT,EAAoB;AAChB,WAAKa,cAAL;AACH;AACJ;AAED;;;;;;;;;;;AAqLA;;;qCAGiB;AACb;AACA;AACA,WAAKL,WAAL,GAAmB,KAAKM,SAAxB;AACH;AAED;;;;;;sCAGkB;AACd;AACA;AACA,WAAKN,WAAL,GAAmB,IAAnB;AACA,WAAKE,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;AACA,WAAKE,UAAL,GAAkB,IAAlB;AACA,WAAKI,SAAL,GAAiB,IAAjB;AACH;AAED;;;;;;;8BAIUC,C,EAAG;AACT;AACA;AACA,WAAKC,YAAL,GAAoB,IAAIxB,kBAAJ,CAAW,CAACuB,CAAC,CAACE,OAAH,EAAYF,CAAC,CAACG,OAAd,CAAX,EAAmCC,QAAnC,CAA4C,KAAKC,MAAjD,CAApB;AACA,WAAKb,WAAL,GAAmB,IAAnB;AACA,WAAKE,WAAL,GAAmB,KAAKY,IAAxB;AACA,WAAKb,SAAL,GAAiB,KAAKc,OAAtB;AACA,WAAKZ,UAAL,GAAkB,KAAKY,OAAvB;AACH;AAED;;;;;;;yBAIKP,C,EAAG;AACJ,WAAKQ,CAAL,GAAS,IAAI/B,kBAAJ,CAAW,CAACuB,CAAC,CAACE,OAAH,EAAYF,CAAC,CAACG,OAAd,CAAX,EAAmCC,QAAnC,CAA4C,KAAKH,YAAjD,CAAT;AACA,WAAKF,SAAL,GAAiB,IAAjB;AACH;AAED;;;;;;;4BAIQC,C,EAAG;AACP,WAAKR,WAAL,GAAmB,KAAKM,SAAxB;AACA,WAAKJ,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;AACA,WAAKE,UAAL,GAAkB,IAAlB;AACA,WAAKI,SAAL,GAAiB,IAAjB;AACH;AAED;;;;;;;;yBAKKU,O,EAASJ,M,EAAQ;AAClB,UAAIK,WAAW,GAAG,KAAKA,WAAvB;AAEA,WAAKX,SAAL,GAAiB,KAAjB;;AAEA,UAAI,KAAKY,WAAL,IAAoB,KAAKC,MAA7B,EAAqC;AACjC;AACA,eAAO,KAAK3B,mBAAZ;AACA,eAAO,KAAKG,oBAAZ,CAHiC,CAKjC;;AACA,aAAKH,mBAAL,GAA2BC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA3B;AACA,aAAKC,oBAAL,GAA4B,KAAKH,mBAAL,CAAyBI,UAAzB,CAAoC,IAApC,CAA5B,CAPiC,CAOsC;AAEvE;;AACA,aAAKJ,mBAAL,CAAyB4B,KAAzB,GAAiCH,WAAW,CAACI,KAAZ,GAAoBJ,WAAW,CAACK,IAAjE;AACA,aAAK9B,mBAAL,CAAyB+B,MAAzB,GAAkCN,WAAW,CAACO,MAAZ,GAAqBP,WAAW,CAACQ,GAAnE;AAEA,aAAKN,MAAL;AACA,aAAKD,WAAL,GAAmB,KAAnB;AACH,OApBiB,CAsBlB;AACA;;;AACA,UAAI,KAAK1C,MAAL,CAAYC,KAAhB,EAAuB;AACtB,aAAKkB,oBAAL,CAA0B+B,SAA1B;;AACG,aAAK/B,oBAAL,CAA0BgC,WAA1B,CAAsC,CAAC,CAAD,EAAI,EAAJ,CAAtC;;AACH,aAAKhC,oBAAL,CAA0BiC,SAA1B,GAAoC,GAApC;AACG,aAAKjC,oBAAL,CAA0BkC,WAA1B,GAAsC,SAAtC;AACH,aAAKlC,oBAAL,CAA0BkC,WAA1B,GAAsC,SAAtC;;AACA,aAAKlC,oBAAL,CAA0BmC,UAA1B,CAAqC,CAArC,EAAuC,CAAvC,EAAyC,KAAKtC,mBAAL,CAAyB4B,KAAlE,EAAyE,KAAK5B,mBAAL,CAAyB+B,MAAlG;;AACA,aAAK5B,oBAAL,CAA0BoC,SAA1B;AACA,OAhCiB,CAkClB;;AACA;;;;;;;AAQA;;;AACA,UAAI9C,CAAC,GAAGgC,WAAW,CAACK,IAAZ,IAAoBV,MAAM,IAAIA,MAAM,CAACU,IAAjB,GAAwBV,MAAM,CAACU,IAA/B,GAAsC,CAA1D,CAAR;AACA,UAAIpC,CAAC,GAAG+B,WAAW,CAACQ,GAAZ,IAAmBb,MAAM,IAAIA,MAAM,CAACa,GAAjB,GAAuBb,MAAM,CAACa,GAA9B,GAAoC,CAAvD,CAAR;;AACAO,yBAASC,SAAT,CAAmBhD,CAAnB,EAAsBC,CAAtB,EAAyB,KAAKM,mBAA9B,EAAmDwB,OAAnD,EAA4D,KAAK7B,KAAjE;AACH,K,CAED;;AACA;;;;;;;;;6BAMS,CAAE;AAEX;;;;;;;;;;yCAOqBF,C,EAAGC,C,EAAG;AACvB,UAAI+B,WAAW,GAAG,KAAKA,WAAvB;AACA,aACIhC,CAAC,GAAGgC,WAAW,CAACK,IAAhB,IACApC,CAAC,GAAG+B,WAAW,CAACQ,GADhB,IAEAxC,CAAC,GAAGgC,WAAW,CAACI,KAFhB,IAGAnC,CAAC,GAAG+B,WAAW,CAACO,MAJpB;AAMH;AAED;;;;;;;;;;;oCAQgBvC,C,EAAGC,C,EAAG;AAClB,aAAO,KAAKgD,oBAAL,CAA0BjD,CAA1B,EAA6BC,CAA7B,CAAP;AACH;AAED;;;;;;kCAGc;AACV,UAAI,KAAKY,MAAT,EAAiB;AACb,YAAIqC,KAAK,GAAG,KAAKrC,MAAL,CAAYsC,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAb,EAAgB;AACZ,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4B,KAAKxC,MAAL,CAAYsC,QAAZ,CAAqBG,MAAjD,EAAyD,CAAzD,EAA4D,IAA5D;AACA,eAAKjC,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAED;;;;;;iCAGa;AACT,UAAI,KAAKR,MAAT,EAAiB;AACb,YAAIqC,KAAK,GAAG,KAAKrC,MAAL,CAAYsC,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAb,EAAgB;AACZ,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,IAAlC;AACA,eAAKhC,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAGD;;;;;;kCAGc;AACV,UAAI,KAAKR,MAAT,EAAiB;AACb,YAAIqC,KAAK,GAAG,KAAKrC,MAAL,CAAYsC,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKrC,MAAL,CAAYsC,QAAZ,CAAqBG,MAArB,GAA8B,CAAxD,EAA2D;AACvD,eAAKzC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C,EAFuD,CAEN;;AACjD,eAAKrC,MAAL,CAAY0C,mBAAZ;AACA,eAAKtB,WAAL,GAAmB,IAAnB;AACA,eAAKZ,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAED;;;;;;mCAGe;AACX,UAAI,KAAKR,MAAT,EAAiB;AACb,YAAIqC,KAAK,GAAG,KAAKrC,MAAL,CAAYsC,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,GAAG,CAAZ,EAAe;AACX,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKrC,MAAL,CAAYsC,QAAZ,CAAqBE,MAArB,CAA4BH,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C;AACA,eAAKrC,MAAL,CAAY0C,mBAAZ;AACA,eAAKtB,WAAL,GAAmB,IAAnB;AACA,eAAKZ,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;;;wBA/XY;AACT,aAAQ,KAAKR,MAAL,GAAcd,mBAAOyD,GAAP,CAAW,KAAK1B,CAAhB,EAAmB,KAAKjB,MAAL,CAAYc,MAA/B,CAAd,GAAuD,KAAKG,CAApE;AACH;AAED;;;;;;;;;;;;;wBAUgB;AACZ,aAAO,KAAKpC,UAAZ;AACH;AAED;;;;;;;;;;;sBAUc+D,G,EAAK;AACf,UAAI,KAAK5C,MAAL,IAAe4C,GAAnB,EAAwB;AACpB,aAAK5C,MAAL,CAAYQ,SAAZ,GAAwBoC,GAAxB;AACA,aAAK5C,MAAL,CAAYoB,WAAZ,GAA0B,IAA1B,CAFoB,CAEY;AACnC;;AACD,WAAKvC,UAAL,GAAkB+D,GAAlB;AACH;AAED;;;;;;;;;;;;;wBAUkB;AACd,aAAO,KAAK9D,YAAZ;AACH;AAED;;;;;;;;;;;sBAUgB8D,G,EAAK;AACjB,UAAI,KAAK5C,MAAL,IAAe4C,GAAnB,EAAwB;AACpB,aAAK5C,MAAL,CAAYoB,WAAZ,GAA0BwB,GAA1B;AACH;;AACD,WAAK9D,YAAL,GAAoB8D,GAApB;AACH;AAED;;;;;;;wBAIiB;AACb,aAAO,KAAK7D,WAAZ;AACH;AACD;;;;;sBAIe6D,G,EAAK;AAChB,WAAK7D,WAAL,GAAmB6D,GAAnB;AACA,WAAKxB,WAAL,GAAmB,IAAnB;AACA,WAAKZ,SAAL,GAAiB,IAAjB;AAHgB;AAAA;AAAA;;AAAA;AAIhB,6BAAc,KAAK8B,QAAnB,8HAA6B;AAAA,cAApBO,CAAoB;AACzBA,UAAAA,CAAC,CAACzB,WAAF,GAAgB,IAAhB;AACAyB,UAAAA,CAAC,CAACrC,SAAF,GAAc,IAAd;AACH;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnB;AAED;;;;;;;wBAIkB;AACd,aAAO,KAAKxB,YAAZ;AACH;AACD;;;;;;sBAKgB4D,G,EAAK;AACjB,WAAK5D,YAAL,GAAoB4D,GAApB;AACA,WAAKxB,WAAL,GAAmB,IAAnB;AACA,WAAKZ,SAAL,GAAiB,IAAjB;AAHiB;AAAA;AAAA;;AAAA;AAIjB,8BAAc,KAAK8B,QAAnB,mIAA6B;AAAA,cAApBO,CAAoB;AACzBA,UAAAA,CAAC,CAACzB,WAAF,GAAgB,IAAhB;AACAyB,UAAAA,CAAC,CAACrC,SAAF,GAAc,IAAd;AACH;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpB;AAED;;;;;;;wBAIY;AACR,aAAO;AACHsC,QAAAA,UAAU,EAAE,KAAKA,UADd;AAEHC,QAAAA,WAAW,EAAE,KAAKA;AAFf,OAAP;AAIH;AAED;;;;;sBAIUH,G,EAAK;AACX,WAAKG,WAAL,GAAmBH,GAAnB;AACA,WAAKE,UAAL,GAAkBF,GAAlB;AACH;AAED;;;;;;;wBAIoB;AAChB,aAAO;AACHE,QAAAA,UAAU,EAAE,KAAK9C,MAAL,GAAc,KAAK8C,UAAL,GAAkB,KAAK9C,MAAL,CAAYgD,aAAZ,CAA0BF,UAA1D,GAAuE,KAAKA,UADrF;AAEHC,QAAAA,WAAW,EAAE,KAAK/C,MAAL,GAAc,KAAK+C,WAAL,GAAmB,KAAK/C,MAAL,CAAYgD,aAAZ,CAA0BD,WAA3D,GAAyE,KAAKA;AAFxF,OAAP;AAIH;AAED;;;;;;;wBAIQ;AACJ,aAAO,KAAK9D,EAAZ;AACH;AAED;;;;;;sBAKM2D,G,EAAK;AACP,WAAK3D,EAAL,GAAU2D,GAAV;AACH;AAED;;;;;;;wBAIa;AACT,aAAO,KAAK7C,OAAZ;AACH,K,CACD;;AACA;;;;;;sBAKW6C,G,EAAK;AACZ,WAAK7C,OAAL,GAAe6C,GAAf;AACH","sourcesContent":["import { Vector } from 'vectorious';\nimport { DEFAULTS, Renderer } from './Renderer';\n\n/**\n * The base class of things that may be drawn on the canvas.\n * All drawable objects should inherit from this class.\n * Typically, it is unnecessary for application programmers to\n * call this directly, although they may wish to extend their own\n * classes with it.\n */\nexport class PrimitiveComponent {\n    /**\n     * @param {object} options\n     */\n    constructor(options) {\n\n        options = options || {};\n\n        this._flags = {};\n        this._flags.DEBUG = options.debug || false;\n\n        /**\n         * does the object need to be redrawn?\n         * @type {boolean} _needsDraw\n         */\n        this._needsDraw = true;\n\n        /**\n         * does the object need to be rendered?\n         * @type {boolean} _needsRender\n         */\n        this._needsRender = true;\n\n        /**\n         * the horizontal scale of the object. defaults to 1\n         * @type {number} _scaleWidth\n         */\n        this._scaleWidth = 1;\n\n        /**\n         * the vertical scale of the object. defaults to 1\n         * @type {number} _scaleHeight\n         */\n        this._scaleHeight = 1;\n\n        /**\n         * d is for \"displacement\": a 2D Vector object representing cartesian coordinate\n         * position relative to its parent composition (or [0,0] if this is the scene composition)\n         * @type {object} d\n         */\n        this._d = new Vector([options.x || 0, options.y || 0]);\n\n        /**\n         * style options for this particular object. these are standard context styles\n         * @type {object} style\n         */\n        this.style = Object.assign({}, DEFAULTS, options.style);\n\n        /**\n         * objects with pressPassThrough set to true will allow mouse clicks to pass\n         * through to objects behind them\n         * @type {boolean} pressPassThrough\n         */\n        //this.pressPassThrough = options.pressPassThrough || false;\n\n        /**\n         * if true, the object can be dragged around the canvas\n         * @type {boolean} draggable\n         */\n        this.draggable = options.draggable || false;\n\n        /**\n         * if true, the bounding box of the object will be draw\n         * @type {boolean} drawBoundingBox\n         */\n        //this.drawBoundingBox = false;\n        //this.boundingBoxColor = '#cccccc';\n\n        /**\n         * the prerendering canvas is used to avoid performing mutliple draw operations on the\n         * visible, main canvas. this minimizes the time needed to render by prerendering on a\n         * canvas only as large as necessary for the object\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingCanvas = document.createElement('canvas');\n\n        /**\n         * the 2D context of the prerendering canvas.\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingContext = this._prerenderingCanvas.getContext('2d');\n\n        /**\n         * the parent object of this object. with the exception of the scene composition itself,\n         * the root of all objects ancestry should be the scene composition\n         * @type {object} parent\n         */\n        this._parent = options.parent || null;\n\n        /**\n         * a callback for the mousedown event.\n         * @type {function} onmousedown\n         */\n        this.onmousedown = null;\n\n        /**\n         * a callback for the mouseup event.\n         * @type {function} onmouseup\n         */\n        this.onmouseup = null;\n\n        /**\n         * a callback for the mousemove event.\n         * @type {function} onmousemove\n         */\n        this.onmousemove = null;\n\n        /**\n         * a callback for the mouseout event.\n         * @type {function} onmouseout\n         */\n        this.onmouseout = null;\n\n        /**\n         * a callback for the click event.\n         * @type {function} onclick\n         */\n        this.onclick = null;\n\n\n        if (this.draggable) {\n            this.enableDragging();\n        }\n    }\n\n    /**\n     * the global offset of the object on the canvas.\n     * this is the sum of this object's displacement\n     * and all of its ancestry.\n     * @type {object} offset a 2D Vector representing displacement from [0, 0]\n     */\n    get offset() {\n        return (this.parent ? Vector.add(this.d, this.parent.offset) : this.d);\n    }\n\n    /**\n     * returns true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    get needsDraw() {\n        return this._needsDraw;\n    }\n\n    /**\n     * set to true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    set needsDraw(val) {\n        if (this.parent && val) {\n            this.parent.needsDraw = val;\n            this.parent.needsRender = true; // if this needs to be redrawn, then the parent needs a full rerender\n        }\n        this._needsDraw = val;\n    }\n\n    /**\n     * returns true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    get needsRender() {\n        return this._needsRender;\n    }\n\n    /**\n     * set to true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    set needsRender(val) {\n        if (this.parent && val) {\n            this.parent.needsRender = val;\n        }\n        this._needsRender = val;\n    }\n\n    /**\n     * return the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    get scaleWidth() {\n        return this._scaleWidth;\n    }\n    /**\n     * set the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    set scaleWidth(val) {\n        this._scaleWidth = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     */\n    get scaleHeight() {\n        return this._scaleHeight;\n    }\n    /**\n     * set the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     * @param {number} val the vertical scale\n     */\n    set scaleHeight(val) {\n        this._scaleHeight = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return an object containing the vertical and horizontal scale\n     * @type {object} scale\n     */\n    get scale() {\n        return {\n            scaleWidth: this.scaleWidth,\n            scaleHeight: this.scaleHeight\n        };\n    }\n\n    /**\n     * set the scale width and height in one go\n     * @type {number} scale\n     */\n    set scale(val) {\n        this.scaleHeight = val;\n        this.scaleWidth = val;\n    }\n\n    /**\n     * return the scale of the object, compounded with the parent object's scale\n     * @type {{scaleWidth: number, scaleHeight: number}} compoundScale the scale multiplied by the compound scale of its parent or 1\n     */\n    get compoundScale() {\n        return {\n            scaleWidth: this.parent ? this.scaleWidth * this.parent.compoundScale.scaleWidth : this.scaleWidth,\n            scaleHeight: this.parent ? this.scaleHeight * this.parent.compoundScale.scaleHeight : this.scaleHeight\n        };\n    }\n\n    /**\n     * d is for displacement - returns a vector\n     * @type {object} d\n     */\n    get d() {\n        return this._d;\n    }\n\n    /**\n     * d is for displacement - accepts a vector\n     * @type {object} d\n     * @param {object} val a vector\n     */\n    set d(val) {\n        this._d = val;\n    }\n\n    /**\n     * get the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     */\n    get parent() {\n        return this._parent;\n    }\n    //TODO: provide links to things\n    /**\n     * set the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     * @param {object} val a composition\n     */\n    set parent(val) {\n        this._parent = val;\n    }\n\n    /**\n     * enable dragging by setting the onmousedown event callback\n     */\n    enableDragging() {\n        //TODO: should probably be using an event registry so\n        //multiple event callbacks can be registered\n        this.onmousedown = this.dragStart;\n    }\n\n    /**\n     * disable dragging by removing event callbacks\n     */\n    disableDragging() {\n        //TODO: should probably be using an event registry so\n        //multiple event callbacks can be registered\n        this.onmousedown = null;\n        this.onmousemove = null;\n        this.onmouseup = null;\n        this.onmouseout = null;\n        this.needsDraw = true;\n    }\n\n    /**\n     * when dragging starts, update events\n     * @param {object} e the event object\n     */\n    dragStart(e) {\n        //TODO: should probably be using an event registry so\n        //multiple event callbacks can be registered\n        this._mouseOffset = new Vector([e.offsetX, e.offsetY]).subtract(this.offset);\n        this.onmousedown = null;\n        this.onmousemove = this.drag;\n        this.onmouseup = this.dragEnd;\n        this.onmouseout = this.dragEnd;\n    }\n\n    /**\n     * update d as the object is moved around\n     * @param {object} e the event object\n     */\n    drag(e) {\n        this.d = new Vector([e.offsetX, e.offsetY]).subtract(this._mouseOffset);\n        this.needsDraw = true;\n    }\n\n    /**\n     * when dragging ends, update events\n     * @param {object} e the event object\n     */\n    dragEnd(e) {\n        this.onmousedown = this.dragStart;\n        this.onmousemove = null;\n        this.onmouseup = null;\n        this.onmouseout = null;\n        this.needsDraw = true;\n    }\n\n    /**\n     * draw the object to canvas, render it if necessary\n     * @param {object} context the final canvas context where this will be drawn\n     * @param {object} offset the offset on the canvas - optional, used for prerendering\n     */\n    draw(context, offset) {\n        let boundingBox = this.boundingBox;\n\n        this.needsDraw = false;\n\n        if (this.needsRender && this.render) {\n            //ditch any old rendering artifacts - they are no longer viable\n            delete this._prerenderingCanvas;\n            delete this._prerenderingContext;\n\n            //create a new canvas and context for rendering\n            this._prerenderingCanvas = document.createElement('canvas');\n            this._prerenderingContext = this._prerenderingCanvas.getContext('2d'); //text needs prerendering context defined for boundingBox measurements\n\n            //make sure the new canvas has the appropriate dimensions\n            this._prerenderingCanvas.width = boundingBox.right - boundingBox.left;\n            this._prerenderingCanvas.height = boundingBox.bottom - boundingBox.top;\n\n            this.render();\n            this.needsRender = false;\n        }\n\n        //TODO: handle debug options\n        //draw bounding boxes\n        if (this._flags.DEBUG) {\n        \tthis._prerenderingContext.beginPath();\n            this._prerenderingContext.setLineDash([5, 15]);\n        \tthis._prerenderingContext.lineWidth=2.0;\n            this._prerenderingContext.strokeStyle='#FF0000';\n        \tthis._prerenderingContext.strokeStyle='#FF0000';\n        \tthis._prerenderingContext.strokeRect(0,0,this._prerenderingCanvas.width, this._prerenderingCanvas.height);\n        \tthis._prerenderingContext.closePath();\n        }\n\n        //TODO: handle bounding box drawing\n        /*if (this.drawBoundingBox){\n        \tthis._prerenderingContext.beginPath();\n        \tthis._prerenderingContext.lineWidth=2.0;\n        \tthis._prerenderingContext.strokeStyle=this.boundingBoxColor;\n        \tthis._prerenderingContext.strokeRect(0,0,this._prerenderingCanvas.width, this._prerenderingCanvas.height);\n        \tthis._prerenderingContext.closePath();\n        }*/\n\n        //offsets are for prerendering contexts of compositions\n        let x = boundingBox.left + (offset && offset.left ? offset.left : 0);\n        let y = boundingBox.top + (offset && offset.top ? offset.top : 0);\n        Renderer.drawImage(x, y, this._prerenderingCanvas, context, this.style);\n    }\n\n    //TODO: provide more doc details around this\n    /**\n     * this method must be overridden by a subclass.\n     *\n     * the render method should be implemented by subclasses\n     * @abstract\n     */\n    render() {}\n\n    /**\n     * check whether the point specified lies *inside* this objects bounding box\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is within the bounding box\n     */\n    pointIsInBoundingBox(x, y) {\n        let boundingBox = this.boundingBox;\n        return (\n            x > boundingBox.left &&\n            y > boundingBox.top &&\n            x < boundingBox.right &&\n            y < boundingBox.bottom\n        );\n    }\n\n    /**\n     * check whether the point is within the object.\n     * this method should be overridden by subclassess\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is in the object, as implemented by inheriting classes\n     */\n    pointIsInObject(x, y) {\n        return this.pointIsInBoundingBox(x, y);\n    }\n\n    /**\n     * move the object on top of other objects (render last)\n     */\n    moveToFront() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(this.parent.children.length, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object below the other objects (render first)\n     */\n    moveToBack() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(0, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n\n    /**\n     * move the object forward in the stack (drawn later)\n     */\n    moveForward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0 && index < this.parent.children.length - 1) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index + 1, 0, this); //if index + 1 > siblings.length, inserts it at end\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object backward in the stack (drawn sooner)\n     */\n    moveBackward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index > 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index - 1, 0, this);\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n}\n"],"file":"PrimitiveComponent.js"}