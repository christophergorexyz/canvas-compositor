{"version":3,"sources":["../src/PrimitiveComponent.js"],"names":["defaults","fillStyle","Defaults","FILL_STYLE","strokeStyle","STROKE_STYLE","lineCap","LINE_CAP","lineWidth","LINE_WIDTH","lineJoin","LINE_JOIN","miterLimit","MITER_LIMIT","font","FONT","textAlign","TEXT_ALIGN","textBaseline","TEXT_BASELINE","lineDash","PrimitiveComponent","options","_needsDraw","_needsRender","_scaleWidth","_scaleHeight","_d","Vector","x","y","style","Object","assign","_prerenderingCanvas","document","createElement","_prerenderingContext","getContext","_parent","parent","context","offset","boundingBox","needsDraw","needsRender","render","width","right","left","height","bottom","top","pointIsInBoundingBox","index","children","indexOf","splice","length","UpdateChildrenLists","add","d","val","c","scaleWidth","scaleHeight","compoundScale","EventEmitter"],"mappings":";;;;;;;AAAA;;AAIA;;AAKA;;AAIA;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;AAGA,IAAIA,QAAQ,GAAG;AACX;AACAC,EAAAA,SAAS,EAAEC,QAAQ,CAACC,UAFT;AAGX;AACAC,EAAAA,WAAW,EAAEF,QAAQ,CAACG,YAJX;AAKXC,EAAAA,OAAO,EAAEJ,QAAQ,CAACK,QALP;AAMXC,EAAAA,SAAS,EAAEN,QAAQ,CAACO,UANT;AAOXC,EAAAA,QAAQ,EAAER,QAAQ,CAACS,SAPR;AAQXC,EAAAA,UAAU,EAAEV,QAAQ,CAACW,WARV;AASXC,EAAAA,IAAI,EAAEZ,QAAQ,CAACa,IATJ;AAUXC,EAAAA,SAAS,EAAEd,QAAQ,CAACe,UAVT;AAWXC,EAAAA,YAAY,EAAEhB,QAAQ,CAACiB,aAXZ;AAYXC,EAAAA,QAAQ,EAAE;AAZC,CAAf;AAeA;;;;;;;;IAOaC,kB;;;;;AACT;;;;AAIA,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AAEAA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAHiB,CAKjB;AACA;AACA;;AAEA;;;;;AAIA,UAAKC,UAAL,GAAkB,IAAlB;AAEA;;;;;AAIA,UAAKC,YAAL,GAAoB,IAApB;AAEA;;;;;AAIA,UAAKC,WAAL,GAAmB,CAAnB;AAEA;;;;;AAIA,UAAKC,YAAL,GAAoB,CAApB;AAEA;;;;;;AAKA,UAAKC,EAAL,GAAU,IAAIC,kBAAJ,CAAW,CAACN,OAAO,CAACO,CAAR,IAAa,CAAd,EAAiBP,OAAO,CAACQ,CAAR,IAAa,CAA9B,CAAX,CAAV;AAEA;;;;;AAIA,UAAKC,KAAL,GAAaC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjC,QAAlB,EAA4BsB,OAAO,CAACS,KAApC,CAAb,CA5CiB,CA8CjB;AACA;;AACA;;;;;AAKA;;AAEA;;;;;;;AAMA,UAAKG,mBAAL,GAA2BC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA3B,CA7DiB,CA+DjB;;AACA;;;;;AAIA,UAAKC,oBAAL,GAA4B,MAAKH,mBAAL,CAAyBI,UAAzB,CAAoC,IAApC,CAA5B;AAEA;;;;;;AAKA,UAAKC,OAAL,GAAejB,OAAO,CAACkB,MAAR,IAAkB,IAAjC;AA3EiB;AA4EpB;AAED;;;;;;;;;;;AAsLA;;;;;yBAKKC,O,EAASC,M,EAAQ;AAClB,UAAIC,WAAW,GAAG,KAAKA,WAAvB;AAEA,WAAKC,SAAL,GAAiB,KAAjB;;AAEA,UAAI,KAAKC,WAAL,IAAoB,KAAKC,MAA7B,EAAqC;AACjC;;;;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA,aAAKZ,mBAAL,CAAyBa,KAAzB,GAAiCJ,WAAW,CAACK,KAAZ,GAAoBL,WAAW,CAACM,IAAjE;AACA,aAAKf,mBAAL,CAAyBgB,MAAzB,GAAkCP,WAAW,CAACQ,MAAZ,GAAqBR,WAAW,CAACS,GAAnE,CAdiC,CAejC;;AACA,iCAAU,CAAV,EAAa,CAAb,EAAgB,KAAKlB,mBAAL,CAAyBa,KAAzC,EAAgD,KAAKb,mBAAL,CAAyBgB,MAAzE,EAAiF,KAAKb,oBAAtF;AAEA,aAAKS,MAAL;AACA,aAAKD,WAAL,GAAmB,KAAnB;AACH,OAzBiB,CA2BlB;AACA;;AACA;;;;;;;;;AAUA;;;AACA,UAAIhB,CAAC,GAAGc,WAAW,CAACM,IAAZ,IAAoBP,MAAM,IAAIA,MAAM,CAACO,IAAjB,GAAwBP,MAAM,CAACO,IAA/B,GAAsC,CAA1D,CAAR;AACA,UAAInB,CAAC,GAAGa,WAAW,CAACS,GAAZ,IAAmBV,MAAM,IAAIA,MAAM,CAACU,GAAjB,GAAuBV,MAAM,CAACU,GAA9B,GAAoC,CAAvD,CAAR;AACA,+BAAUvB,CAAV,EAAaC,CAAb,EAAgB,KAAKI,mBAArB,EAA0CO,OAA1C,EAAmD,KAAKV,KAAxD;AACH;AAED;;;;;;;;;6BAMS,CAAE;AAEX;;;;;;;;;;yCAOqBF,C,EAAGC,C,EAAG;AACvB,UAAIa,WAAW,GAAG,KAAKA,WAAvB;AACA,aACId,CAAC,GAAGc,WAAW,CAACM,IAAhB,IACAnB,CAAC,GAAGa,WAAW,CAACS,GADhB,IAEAvB,CAAC,GAAGc,WAAW,CAACK,KAFhB,IAGAlB,CAAC,GAAGa,WAAW,CAACQ,MAJpB;AAMH;AAED;;;;;;;;;;;oCAQgBtB,C,EAAGC,C,EAAG;AAClB,aAAO,KAAKuB,oBAAL,CAA0BxB,CAA1B,EAA6BC,CAA7B,CAAP;AACH;AAED;;;;;;kCAGc;AACV,UAAI,KAAKU,MAAT,EAAiB;AACb,YAAIc,KAAK,GAAG,KAAKd,MAAL,CAAYe,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAb,EAAgB;AACZ,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4B,KAAKjB,MAAL,CAAYe,QAAZ,CAAqBG,MAAjD,EAAyD,CAAzD,EAA4D,IAA5D;AACA,eAAKd,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAED;;;;;;iCAGa;AACT,UAAI,KAAKJ,MAAT,EAAiB;AACb,YAAIc,KAAK,GAAG,KAAKd,MAAL,CAAYe,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAb,EAAgB;AACZ,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4B,CAA5B,EAA+B,CAA/B,EAAkC,IAAlC;AACA,eAAKb,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAGD;;;;;;kCAGc;AACV,UAAI,KAAKJ,MAAT,EAAiB;AACb,YAAIc,KAAK,GAAG,KAAKd,MAAL,CAAYe,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAG,KAAKd,MAAL,CAAYe,QAAZ,CAAqBG,MAArB,GAA8B,CAAxD,EAA2D;AACvD,eAAKlB,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C,EAFuD,CAEN;;AACjD,eAAKd,MAAL,CAAYmB,mBAAZ;AACA,eAAKd,WAAL,GAAmB,IAAnB;AACA,eAAKD,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;AAED;;;;;;mCAGe;AACX,UAAI,KAAKJ,MAAT,EAAiB;AACb,YAAIc,KAAK,GAAG,KAAKd,MAAL,CAAYe,QAAZ,CAAqBC,OAArB,CAA6B,IAA7B,CAAZ;;AACA,YAAIF,KAAK,GAAG,CAAZ,EAAe;AACX,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAA5B,EAAmC,CAAnC;AACA,eAAKd,MAAL,CAAYe,QAAZ,CAAqBE,MAArB,CAA4BH,KAAK,GAAG,CAApC,EAAuC,CAAvC,EAA0C,IAA1C;AACA,eAAKd,MAAL,CAAYmB,mBAAZ;AACA,eAAKd,WAAL,GAAmB,IAAnB;AACA,eAAKD,SAAL,GAAiB,IAAjB;AACH;AACJ;AACJ;;;wBAlUY;AACT,aAAQ,KAAKJ,MAAL,GAAcZ,mBAAOgC,GAAP,CAAW,KAAKC,CAAhB,EAAmB,KAAKrB,MAAL,CAAYE,MAA/B,CAAd,GAAuD,KAAKmB,CAApE;AACH;AAED;;;;;;;;;;;;;wBAUgB;AACZ,aAAO,KAAKtC,UAAZ;AACH;AAED;;;;;;;;;;;sBAUcuC,G,EAAK;AACf,UAAI,KAAKtB,MAAL,IAAesB,GAAnB,EAAwB;AACpB,aAAKtB,MAAL,CAAYI,SAAZ,GAAwBkB,GAAxB;AACA,aAAKtB,MAAL,CAAYK,WAAZ,GAA0B,IAA1B,CAFoB,CAEY;AACnC;;AACD,WAAKtB,UAAL,GAAkBuC,GAAlB;AACH;AAED;;;;;;;;;;;;;wBAUkB;AACd,aAAO,KAAKtC,YAAZ;AACH;AAED;;;;;;;;;;;sBAUgBsC,G,EAAK;AACjB,UAAI,KAAKtB,MAAL,IAAesB,GAAnB,EAAwB;AACpB,aAAKtB,MAAL,CAAYK,WAAZ,GAA0BiB,GAA1B;AACH;;AACD,WAAKtC,YAAL,GAAoBsC,GAApB;AACH;AAED;;;;;;;wBAIiB;AACb,aAAO,KAAKrC,WAAZ;AACH;AACD;;;;;sBAIeqC,G,EAAK;AAChB,WAAKrC,WAAL,GAAmBqC,GAAnB;AACA,WAAKjB,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;AAHgB;AAAA;AAAA;;AAAA;AAIhB,6BAAc,KAAKW,QAAnB,8HAA6B;AAAA,cAApBQ,CAAoB;AACzBA,UAAAA,CAAC,CAAClB,WAAF,GAAgB,IAAhB;AACAkB,UAAAA,CAAC,CAACnB,SAAF,GAAc,IAAd;AACH;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQnB;AAED;;;;;;;wBAIkB;AACd,aAAO,KAAKlB,YAAZ;AACH;AAED;;;;;;sBAKgBoC,G,EAAK;AACjB,WAAKpC,YAAL,GAAoBoC,GAApB;AACA,WAAKjB,WAAL,GAAmB,IAAnB;AACA,WAAKD,SAAL,GAAiB,IAAjB;AAHiB;AAAA;AAAA;;AAAA;AAIjB,8BAAc,KAAKW,QAAnB,mIAA6B;AAAA,cAApBQ,CAAoB;AACzBA,UAAAA,CAAC,CAAClB,WAAF,GAAgB,IAAhB;AACAkB,UAAAA,CAAC,CAACnB,SAAF,GAAc,IAAd;AACH;AAPgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQpB;AAED;;;;;;;wBAIY;AACR,aAAO;AACHoB,QAAAA,UAAU,EAAE,KAAKA,UADd;AAEHC,QAAAA,WAAW,EAAE,KAAKA;AAFf,OAAP;AAIH;AAED;;;;;sBAIUH,G,EAAK;AACX,WAAKG,WAAL,GAAmBH,GAAnB;AACA,WAAKE,UAAL,GAAkBF,GAAlB;AACH;AAED;;;;;;;wBAIoB;AAChB,aAAO;AACHE,QAAAA,UAAU,EAAE,KAAKxB,MAAL,GAAc,KAAKwB,UAAL,GAAkB,KAAKxB,MAAL,CAAY0B,aAAZ,CAA0BF,UAA1D,GAAuE,KAAKA,UADrF;AAEHC,QAAAA,WAAW,EAAE,KAAKzB,MAAL,GAAc,KAAKyB,WAAL,GAAmB,KAAKzB,MAAL,CAAY0B,aAAZ,CAA0BD,WAA3D,GAAyE,KAAKA;AAFxF,OAAP;AAIH;AAED;;;;;;;wBAIQ;AACJ,aAAO,KAAKtC,EAAZ;AACH;AAED;;;;;;sBAKMmC,G,EAAK;AACP,WAAKnC,EAAL,GAAUmC,GAAV;AACH;AAED;;;;;;;wBAIa;AACT,aAAO,KAAKvB,OAAZ;AACH,K,CACD;;AACA;;;;;;sBAKWuB,G,EAAK;AACZ,WAAKvB,OAAL,GAAeuB,GAAf;AACH;;;;EAvQmCK,sB","sourcesContent":["import {\n    Vector\n} from 'vectorious';\n\nimport {\n    drawImage,\n    clearRect\n} from './Renderer';\n\nimport {\n    EventEmitter\n} from 'micro-mvc';\n\nimport * as Defaults from './Defaults';\n\n//assign default values to an object so that the Object.assign function can be used\n/**\n * The default values to be passed to the renderer and overridden by any given object\n */\nlet defaults = {\n    //direction: 'inherit',\n    fillStyle: Defaults.FILL_STYLE,\n    //filter: 'none',\n    strokeStyle: Defaults.STROKE_STYLE,\n    lineCap: Defaults.LINE_CAP,\n    lineWidth: Defaults.LINE_WIDTH,\n    lineJoin: Defaults.LINE_JOIN,\n    miterLimit: Defaults.MITER_LIMIT,\n    font: Defaults.FONT,\n    textAlign: Defaults.TEXT_ALIGN,\n    textBaseline: Defaults.TEXT_BASELINE,\n    lineDash: []\n};\n\n/**\n * The base class of things that may be drawn on the canvas.\n * All drawable objects should inherit from this class.\n * Typically, it is unnecessary for application programmers to\n * call this directly, although they may wish to extend their own\n * classes with it.\n */\nexport class PrimitiveComponent extends EventEmitter {\n    /**\n     * construct a primitive component\n     * @param {object} options\n     */\n    constructor(options) {\n        super();\n\n        options = options || {};\n\n        //TODO: reimplement any flags for debug data\n        //this._flags = {};\n        //this._flags.DEBUG = options.debug || false;\n\n        /**\n         * does the object need to be redrawn?\n         * @type {boolean} _needsDraw\n         */\n        this._needsDraw = true;\n\n        /**\n         * does the object need to be rendered?\n         * @type {boolean} _needsRender\n         */\n        this._needsRender = true;\n\n        /**\n         * the horizontal scale of the object. defaults to 1\n         * @type {number} _scaleWidth\n         */\n        this._scaleWidth = 1;\n\n        /**\n         * the vertical scale of the object. defaults to 1\n         * @type {number} _scaleHeight\n         */\n        this._scaleHeight = 1;\n\n        /**\n         * d is for \"displacement\": a 2D Vector object representing cartesian coordinate\n         * position relative to its parent composition (or [0,0] if this is the scene composition)\n         * @type {object} d\n         */\n        this._d = new Vector([options.x || 0, options.y || 0]);\n\n        /**\n         * style options for this particular object. these are standard context styles\n         * @type {object} style\n         */\n        this.style = Object.assign({}, defaults, options.style);\n\n        //TODO: determine whether this is the best place to implement click passthrough -\n        //it might be better left implemented by consuming modules\n        /**\n         * objects with pressPassThrough set to true will allow mouse clicks to pass\n         * through to objects behind them\n         * @type {boolean} pressPassThrough\n         */\n        //this.pressPassThrough = options.pressPassThrough || false;\n\n        /**\n         * the prerendering canvas is used to avoid performing mutliple draw operations on the\n         * visible, main canvas. this minimizes the time needed to render by prerendering on a\n         * canvas only as large as necessary for the object\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingCanvas = document.createElement('canvas');\n\n        //TODO: enable alternative rendering contexts for WebGL and 3d\n        /**\n         * the 2D context of the prerendering canvas.\n         * @type {object} _prerenderingCanvas\n         */\n        this._prerenderingContext = this._prerenderingCanvas.getContext('2d');\n\n        /**\n         * the parent object of this object. with the exception of the scene composition itself,\n         * the root of all objects ancestry should be the scene composition\n         * @type {object} parent\n         */\n        this._parent = options.parent || null;\n    }\n\n    /**\n     * the global offset of the object on the canvas.\n     * this is the sum of this object's displacement\n     * and all of its ancestry.\n     * @type {object} offset a 2D Vector representing displacement from [0, 0]\n     */\n    get offset() {\n        return (this.parent ? Vector.add(this.d, this.parent.offset) : this.d);\n    }\n\n    /**\n     * returns true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    get needsDraw() {\n        return this._needsDraw;\n    }\n\n    /**\n     * set to true whenever the object needs to be re-drawn to canvas.\n     * when true, this will indicate to the parent tree of composing objects that\n     * the object needs to be re-drawn on the next animation loop.\n     *\n     * objects need to be updated when their displacement changes, or when any thing\n     * that requires a rerender occurs.\n     *\n     * @type {boolean} needsDraw\n     */\n    set needsDraw(val) {\n        if (this.parent && val) {\n            this.parent.needsDraw = val;\n            this.parent.needsRender = true; // if this needs to be redrawn, then the parent needs a full rerender\n        }\n        this._needsDraw = val;\n    }\n\n    /**\n     * returns true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    get needsRender() {\n        return this._needsRender;\n    }\n\n    /**\n     * set to true whenever the object's properties have changed such that\n     * it needs to be rendered differently\n     *\n     * 1. scale change\n     * 1. physical property change (height, width, radius, etc.)\n     * 1. color change\n     *\n     * @type {boolean} needsRender\n     */\n    set needsRender(val) {\n        if (this.parent && val) {\n            this.parent.needsRender = val;\n        }\n        this._needsRender = val;\n    }\n\n    /**\n     * return the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    get scaleWidth() {\n        return this._scaleWidth;\n    }\n    /**\n     * set the horizontal scale of the object - defaults to 1\n     * @type {number} scaleWidth\n     */\n    set scaleWidth(val) {\n        this._scaleWidth = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     */\n    get scaleHeight() {\n        return this._scaleHeight;\n    }\n\n    /**\n     * set the vertical scale of the object - defaults to 1\n     * @type {number} scaleHeight\n     * @param {number} val the vertical scale\n     */\n    set scaleHeight(val) {\n        this._scaleHeight = val;\n        this.needsRender = true;\n        this.needsDraw = true;\n        for (let c of this.children) {\n            c.needsRender = true;\n            c.needsDraw = true;\n        }\n    }\n\n    /**\n     * return an object containing the vertical and horizontal scale\n     * @type {object} scale\n     */\n    get scale() {\n        return {\n            scaleWidth: this.scaleWidth,\n            scaleHeight: this.scaleHeight\n        };\n    }\n\n    /**\n     * set the scale width and height in one go\n     * @type {number} scale\n     */\n    set scale(val) {\n        this.scaleHeight = val;\n        this.scaleWidth = val;\n    }\n\n    /**\n     * return the scale of the object, compounded with the parent object's scale\n     * @type {{scaleWidth: number, scaleHeight: number}} compoundScale the scale multiplied by the compound scale of its parent or 1\n     */\n    get compoundScale() {\n        return {\n            scaleWidth: this.parent ? this.scaleWidth * this.parent.compoundScale.scaleWidth : this.scaleWidth,\n            scaleHeight: this.parent ? this.scaleHeight * this.parent.compoundScale.scaleHeight : this.scaleHeight\n        };\n    }\n\n    /**\n     * d is for displacement - returns a vector\n     * @type {object} d\n     */\n    get d() {\n        return this._d;\n    }\n\n    /**\n     * d is for displacement - accepts a vector\n     * @type {object} d\n     * @param {object} val a vector\n     */\n    set d(val) {\n        this._d = val;\n    }\n\n    /**\n     * get the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     */\n    get parent() {\n        return this._parent;\n    }\n    //TODO: provide links to things\n    /**\n     * set the parent of the object. all objects except the scene graph should have a parent\n     * @type {object} parent\n     * @param {object} val a composition\n     */\n    set parent(val) {\n        this._parent = val;\n    }\n\n    /**\n     * draw the object to canvas, render it if necessary\n     * @param {object} context the final canvas context where this will be drawn\n     * @param {object} offset the offset on the canvas - optional, used for prerendering\n     */\n    draw(context, offset) {\n        let boundingBox = this.boundingBox;\n\n        this.needsDraw = false;\n\n        if (this.needsRender && this.render) {\n            /*\n                TODO: AB-test this,\n                it may be faster than clearRect\n            */\n            //delete this._prerenderingCanvas;\n            //delete this._prerenderingContext;\n\n            //create a new canvas and context for rendering\n            //this._prerenderingCanvas = document.createElement('canvas');\n            //this._prerenderingContext = this._prerenderingCanvas.getContext('2d'); //text needs prerendering context defined for boundingBox measurements\n\n            //make sure the new canvas has the appropriate dimensions\n            this._prerenderingCanvas.width = boundingBox.right - boundingBox.left;\n            this._prerenderingCanvas.height = boundingBox.bottom - boundingBox.top;\n            //clear any old rendering artifacts - they are no longer viable\n            clearRect(0, 0, this._prerenderingCanvas.width, this._prerenderingCanvas.height, this._prerenderingContext);\n\n            this.render();\n            this.needsRender = false;\n        }\n\n        //TODO: handle debug options\n        //draw bounding boxes\n        /*if (this._flags.DEBUG) {\n            this._prerenderingContext.beginPath();\n            this._prerenderingContext.setLineDash([5, 15]);\n            this._prerenderingContext.lineWidth = 2.0;\n            this._prerenderingContext.strokeStyle = '#FF0000';\n            this._prerenderingContext.strokeStyle = '#FF0000';\n            this._prerenderingContext.strokeRect(0, 0, this._prerenderingCanvas.width, this._prerenderingCanvas.height);\n            this._prerenderingContext.closePath();\n        }*/\n\n        //offsets are for prerendering contexts of compositions\n        let x = boundingBox.left + (offset && offset.left ? offset.left : 0);\n        let y = boundingBox.top + (offset && offset.top ? offset.top : 0);\n        drawImage(x, y, this._prerenderingCanvas, context, this.style);\n    }\n\n    /**\n     * this method must be overridden by a subclass.\n     *\n     * the render method should be implemented by subclasses\n     * @abstract\n     */\n    render() {}\n\n    /**\n     * check whether the point specified lies *inside* this objects bounding box\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is within the bounding box\n     */\n    pointIsInBoundingBox(x, y) {\n        let boundingBox = this.boundingBox;\n        return (\n            x > boundingBox.left &&\n            y > boundingBox.top &&\n            x < boundingBox.right &&\n            y < boundingBox.bottom\n        );\n    }\n\n    /**\n     * check whether the point is within the object.\n     * this method should be overridden by subclassess\n     *\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether the point is in the object, as implemented by inheriting classes\n     */\n    pointIsInObject(x, y) {\n        return this.pointIsInBoundingBox(x, y);\n    }\n\n    /**\n     * move the object on top of other objects (render last)\n     */\n    moveToFront() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(this.parent.children.length, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object below the other objects (render first)\n     */\n    moveToBack() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(0, 0, this);\n                this.needsDraw = true;\n            }\n        }\n    }\n\n\n    /**\n     * move the object forward in the stack (drawn later)\n     */\n    moveForward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index >= 0 && index < this.parent.children.length - 1) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index + 1, 0, this); //if index + 1 > siblings.length, inserts it at end\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n\n    /**\n     * move the object backward in the stack (drawn sooner)\n     */\n    moveBackward() {\n        if (this.parent) {\n            let index = this.parent.children.indexOf(this);\n            if (index > 0) {\n                this.parent.children.splice(index, 1);\n                this.parent.children.splice(index - 1, 0, this);\n                this.parent.UpdateChildrenLists();\n                this.needsRender = true;\n                this.needsDraw = true;\n            }\n        }\n    }\n}\n"],"file":"PrimitiveComponent.js"}