{"version":3,"sources":["../src/VectorPath.js"],"names":["VectorPath","options","_vertices","vertices","_normalizedBoundingBox","x","y","inside","l","Line","Vector","compoundScale","offset","i","_normalizedVertices","length","j","v","scaleVectorXY","scaleWidth","scaleHeight","add","w","edgeDirection","subtract","normalize","edge","intersection","intersectionWith","intersectToTheRight","negativeX","negativeY","leftVertex","rightVertex","topVertex","bottomVertex","intersectWithinSegment","boundingBox","pathToDraw","map","vertex","left","top","Renderer","drawPath","_prerenderingContext","style","right","_right","_left","bottom","_bottom","_top","lineWidth","verts","yCoordinates","xCoordinates","Math","min","apply","max","normalizationVector","d","needsDraw","needsRender","PrimitiveComponent","vector","scaleX","scaleY"],"mappings":"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","sourcesContent":["import {\n    Renderer\n} from './Renderer';\nimport {\n    PrimitiveComponent\n} from './PrimitiveComponent';\nimport {\n    Vector\n} from 'vectorious';\nimport {\n    Line\n} from './Line';\n\n//would name the file 'path', but damn near everything\n//relies on the filesystem 'path' module\n\n/**\n * An ordered set of vectors defining a path\n */\nexport class VectorPath extends PrimitiveComponent {\n    /**\n     * see PrimitiveComponent for more options\n     * @param {Object} options the options for the object\n     * @param {Object[]} options.vertices the vertices\n     * @param {number} options.vertices[].x the y coordinate for a vertex\n     * @param {number} options.vertices[].y the y coordinate for a vertex\n     */\n    constructor(options) {\n        super(options);\n\n        this._vertices = [];\n        this.vertices = options.vertices || [];\n\n        //this.unscaledLineWidth = this.style.lineWidth;\n\n\n\n        this._normalizedBoundingBox = null;\n    }\n\n    /**\n     * get the bounding box for the vertices\n     * @type {{top:number, left: number, bottom:number, right:number}} boundingBox\n     */\n    get boundingBox() {\n        this._normalizedBoundingBox = {\n            top: 0,\n            left: 0,\n            right: this._right - this._left,\n            bottom: this._bottom - this._top\n        };\n\n        return {\n            top: (this._normalizedBoundingBox.top * this.compoundScale.scaleHeight) + this.offset.y - this.style.lineWidth,\n            left: (this._normalizedBoundingBox.left * this.compoundScale.scaleWidth) + this.offset.x - this.style.lineWidth,\n            bottom: (this._normalizedBoundingBox.bottom * this.compoundScale.scaleHeight) + this.offset.y + this.style.lineWidth,\n            right: (this._normalizedBoundingBox.right * this.compoundScale.scaleWidth) + this.offset.x + this.style.lineWidth\n        };\n    }\n\n    get vertices() {\n        return this._vertices;\n    }\n\n    set vertices(verts) {\n        /**\n         * the list of vertices as vectorious Vectors\n         * @type {Vector[]} vertices\n         */\n        this._vertices = verts.map(v => new Vector([v.x, v.y]));\n\n        let yCoordinates = this.vertices.map(v => v.y);\n        let xCoordinates = this.vertices.map(v => v.x);\n\n        //uses `apply` so we can supply the list as a list of arguments\n        this._left = Math.min.apply(null, xCoordinates);\n        this._top = Math.min.apply(null, yCoordinates);\n        this._right = Math.max.apply(null, xCoordinates);\n        this._bottom = Math.max.apply(null, yCoordinates);\n\n        super.d = new Vector([this._left, this._top]);\n\n        let normalizationVector = this.d;\n\n        this._normalizedVertices = this.vertices.map(v => v.subtract(normalizationVector));\n\n        this.needsDraw = true;\n        this.needsRender = true;\n    }\n\n    /**\n     * determine whether the point is in the object\n     * even/odd line intersection test\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether or not the point is in the object\n     */\n    pointIsInObject(x, y) {\n        let inside = false;\n        if (super.pointIsInObject(x, y)) {\n            //create a line that travels from this point in any direction\n            //if it intersects the polygon an odd number of times, it is inside\n\n            //a line can be described as a vertex and a direction\n            let l = new Line(new Vector([x, y]), new Vector([1, 0]));\n\n            let compoundScale = this.compoundScale;\n            let offset = this.offset;\n\n            for (let i = 0; i < this._normalizedVertices.length; i++) {\n                let j = (i + 1) >= this._normalizedVertices.length ? 0 : i + 1;\n\n                let v = scaleVectorXY(this._normalizedVertices[i], compoundScale.scaleWidth, compoundScale.scaleHeight)\n                    .add(offset);\n\n                let w = scaleVectorXY(this._normalizedVertices[j], compoundScale.scaleWidth, compoundScale.scaleHeight)\n                    .add(offset);\n\n                let edgeDirection = Vector.subtract(w, v).normalize();\n                let edge = new Line(v, edgeDirection);\n                let intersection = edge.intersectionWith(l);\n\n                //if the lines are parallel/colocated, no need to count;\n                if (intersection === null) {\n                    continue;\n                }\n\n                //TODO: should replace 0s with epsilons, where epsilon is\n                //the threshhold for considering two things as touching/intersecting\n                let intersectToTheRight = intersection.x - x >= 0;\n\n                //if the intersection is not to the right, no need to count\n                if (!intersectToTheRight) {\n                    continue;\n                }\n\n                let negativeX = (edgeDirection.x < 0);\n                let negativeY = (edgeDirection.y < 0);\n\n                //technically speaking, bottom and top should be reversed,\n                //since y=0 is the top left corner of the screen - it's\n                //just easier to think about it mathematically this way\n                let leftVertex = negativeX ? w : v;\n                let rightVertex = negativeX ? v : w;\n                let topVertex = negativeY ? w : v;\n                let bottomVertex = negativeY ? v : w;\n\n                let intersectWithinSegment =\n                    (intersection.x - leftVertex.x >= 0) &&\n                    (rightVertex.x - intersection.x >= 0) &&\n                    (intersection.y - topVertex.y >= 0) &&\n                    (bottomVertex.y - intersection.y >= 0);\n\n                if (intersectWithinSegment) {\n                    inside = !inside;\n                }\n            }\n        }\n        return inside;\n    }\n\n    /**\n     * override the render function for drawing vector paths specifically\n     * @override\n     */\n    render() {\n        let boundingBox = this.boundingBox;\n        let offset = this.offset;\n        let compoundScale = this.compoundScale;\n        //normalize the vertices (left- and top-most x/y-values should be 0 and 0)\n        let pathToDraw = this._normalizedVertices.map(vertex =>\n            scaleVectorXY(vertex, compoundScale.scaleWidth, compoundScale.scaleHeight)\n            .subtract(new Vector([boundingBox.left, boundingBox.top]))\n            .add(offset));\n        Renderer.drawPath(pathToDraw, this._prerenderingContext, this.style);\n    };\n}\n\nfunction scaleVectorXY(vector, scaleX, scaleY) {\n    return new Vector([vector.x * scaleX, vector.y * scaleY]);\n}\n"],"file":"VectorPath.js"}