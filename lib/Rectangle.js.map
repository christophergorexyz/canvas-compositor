{"version":3,"sources":["../src/Rectangle.js"],"names":["Rectangle","options","width","height","offset","compoundScale","top","y","style","lineWidth","left","x","bottom","scaleHeight","right","scaleWidth","_prerenderingContext","PrimitiveComponent"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;IACaA,S;;;;;AACX;AACF;AACA;AACE,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA;AACJ;AACA;AACA;;AACI,UAAKC,KAAL,GAAaD,OAAO,CAACC,KAAR,IAAiB,CAA9B;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,MAAL,GAAcF,OAAO,CAACE,MAAR,IAAkB,CAAhC;AAZmB;AAapB;AAED;AACF;AACA;AACA;;;;;SACE,eAAkB;AAChB,UAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIC,aAAa,GAAG,KAAKA,aAAzB;AACA,aAAO;AACLC,QAAAA,GAAG,EAAEF,MAAM,CAACG,CAAP,GAAY,KAAKC,KAAL,CAAWC,SADvB;AAELC,QAAAA,IAAI,EAAEN,MAAM,CAACO,CAAP,GAAY,KAAKH,KAAL,CAAWC,SAFxB;AAGLG,QAAAA,MAAM,EAAER,MAAM,CAACG,CAAP,GAAYF,aAAa,CAACQ,WAAd,GAA4B,KAAKV,MAA7C,GAAwD,KAAKK,KAAL,CAAWC,SAHtE;AAILK,QAAAA,KAAK,EAAEV,MAAM,CAACO,CAAP,GAAYN,aAAa,CAACU,UAAd,GAA2B,KAAKb,KAA5C,GAAsD,KAAKM,KAAL,CAAWC;AAJnE,OAAP;AAMD;AAED;AACF;AACA;AACA;;;;WACE,kBAAS;AACP,UAAIJ,aAAa,GAAG,KAAKA,aAAzB;AACA,mCAAe,KAAKG,KAAL,CAAWC,SAA1B,EACG,KAAKD,KAAL,CAAWC,SADd,EAEE,KAAKP,KAAL,GAAaG,aAAa,CAACU,UAF7B,EAGE,KAAKZ,MAAL,GAAcE,aAAa,CAACQ,WAH9B,EAIE,KAAKG,oBAJP,EAKE,KAAKR,KALP;AAMD;;;;EA9C4BS,uC","sourcesContent":["import { drawRectangle } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * A rectangle\n */\nexport class Rectangle extends PrimitiveComponent {\n  /**\n   * @param {object} options the options for the object\n   */\n  constructor(options) {\n    super(options);\n    /**\n     * the width of the rectangle\n     * @type {number}\n     */\n    this.width = options.width || 0;\n\n    /**\n     * the height of the rectangle\n     * @type {number}\n     */\n    this.height = options.height || 0;\n  }\n\n  /**\n   * get the bounding box of the rectangle\n   * @type {{top:number, left:number, bottom:number, right:number}}\n   */\n  get boundingBox() {\n    let offset = this.offset;\n    let compoundScale = this.compoundScale;\n    return {\n      top: offset.y - (this.style.lineWidth),\n      left: offset.x - (this.style.lineWidth),\n      bottom: offset.y + (compoundScale.scaleHeight * this.height) + (this.style.lineWidth),\n      right: offset.x + (compoundScale.scaleWidth * this.width) + (this.style.lineWidth)\n    };\n  }\n\n  /**\n   * render the rectangle\n   * @override\n   */\n  render() {\n    let compoundScale = this.compoundScale;\n    drawRectangle((this.style.lineWidth),\n      (this.style.lineWidth),\n      this.width * compoundScale.scaleWidth,\n      this.height * compoundScale.scaleHeight,\n      this._prerenderingContext,\n      this.style);\n  }\n}\n"],"file":"Rectangle.js"}