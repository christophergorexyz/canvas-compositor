{"version":3,"sources":["../src/Rectangle.js"],"names":["Rectangle","options","width","height","compoundScale","Renderer","drawRectangle","style","lineWidth","scaleWidth","scaleHeight","_prerenderingContext","offset","top","y","left","x","bottom","right","PrimitiveComponent"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGaA,S;;;;;AACT;;;AAGA,qBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,mFAAMA,OAAN;AACA;;;;;AAIA,UAAKC,KAAL,GAAaD,OAAO,CAACC,KAAR,IAAiB,CAA9B;AAEA;;;;;AAIA,UAAKC,MAAL,GAAcF,OAAO,CAACE,MAAR,IAAkB,CAAhC;AAZiB;AAapB;AAED;;;;;;;;;AAeA;;;;6BAIS;AACL,UAAIC,aAAa,GAAG,KAAKA,aAAzB;;AACAC,yBAASC,aAAT,CAAwB,KAAKC,KAAL,CAAWC,SAAnC,EACK,KAAKD,KAAL,CAAWC,SADhB,EAEI,KAAKN,KAAL,GAAaE,aAAa,CAACK,UAF/B,EAGI,KAAKN,MAAL,GAAcC,aAAa,CAACM,WAHhC,EAII,KAAKC,oBAJT,EAKI,KAAKJ,KALT;AAMH;;;wBAvBiB;AACd,UAAIK,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIR,aAAa,GAAG,KAAKA,aAAzB;AACA,aAAO;AACHS,QAAAA,GAAG,EAAED,MAAM,CAACE,CAAP,GAAY,KAAKP,KAAL,CAAWC,SADzB;AAEHO,QAAAA,IAAI,EAAEH,MAAM,CAACI,CAAP,GAAY,KAAKT,KAAL,CAAWC,SAF1B;AAGHS,QAAAA,MAAM,EAAEL,MAAM,CAACE,CAAP,GAAYV,aAAa,CAACM,WAAd,GAA4B,KAAKP,MAA7C,GAAwD,KAAKI,KAAL,CAAWC,SAHxE;AAIHU,QAAAA,KAAK,EAAEN,MAAM,CAACI,CAAP,GAAYZ,aAAa,CAACK,UAAd,GAA2B,KAAKP,KAA5C,GAAsD,KAAKK,KAAL,CAAWC;AAJrE,OAAP;AAMH;;;;EAhC0BW,uC","sourcesContent":["import { Renderer } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * A rectangle\n */\nexport class Rectangle extends PrimitiveComponent {\n    /**\n     * @param {object} options the options for the object\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * the width of the rectangle\n         * @type {number} width\n         */\n        this.width = options.width || 0;\n\n        /**\n         * the height of the rectangle\n         * @type {number} height\n         */\n        this.height = options.height || 0;\n    }\n\n    /**\n     * get the bounding box of the rectangle\n     * @type {{top:number, left:number, bottom:number, right:number}} boundingBox\n     */\n    get boundingBox() {\n        let offset = this.offset;\n        let compoundScale = this.compoundScale;\n        return {\n            top: offset.y - (this.style.lineWidth),\n            left: offset.x - (this.style.lineWidth),\n            bottom: offset.y + (compoundScale.scaleHeight * this.height) + (this.style.lineWidth),\n            right: offset.x + (compoundScale.scaleWidth * this.width) + (this.style.lineWidth)\n        };\n    }\n\n    /**\n     * render the rectangle\n     * @override\n     */\n    render() {\n        let compoundScale = this.compoundScale;\n        Renderer.drawRectangle((this.style.lineWidth),\n            (this.style.lineWidth),\n            this.width * compoundScale.scaleWidth,\n            this.height * compoundScale.scaleHeight,\n            this._prerenderingContext,\n            this.style);\n    }\n}\n"],"file":"Rectangle.js"}