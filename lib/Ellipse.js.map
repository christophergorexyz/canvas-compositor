{"version":3,"sources":["../src/Ellipse.js"],"names":["Ellipse","options","radius","minorRadius","offset","scale","compoundScale","lineWidth","style","top","y","scaleHeight","left","x","scaleWidth","bottom","right","_prerenderingContext","a","b","c1","c2","PrimitiveComponent"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;IACaA,O;;;;;AACX;AACF;AACA;AACA;AACA;AACE,mBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA;AACJ;AACA;AACA;;AACI,UAAKC,MAAL,GAAcD,OAAO,CAACC,MAAR,IAAkB,CAAhC;AAEA;AACJ;AACA;AACA;;AACI,UAAKC,WAAL,GAAmBF,OAAO,CAACE,WAAR,IAAuB,MAAKD,MAA5B,IAAsC,CAAzD;AAZmB;AAapB;AAED;AACF;AACA;AACA;;;;;SACE,eAAkB;AAChB,UAAIE,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIC,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B;AACA,aAAO;AACLE,QAAAA,GAAG,EAAEL,MAAM,CAACM,CAAP,IACO,KAAKP,WAAL,GAAmBE,KAAK,CAACM,WAA1B,GAAyCJ,SAD/C,CADA;AAGLK,QAAAA,IAAI,EAAER,MAAM,CAACS,CAAP,IACM,KAAKX,MAAL,GAAcG,KAAK,CAACS,UAArB,GAAmCP,SADxC,CAHD;AAKLQ,QAAAA,MAAM,EAAEX,MAAM,CAACM,CAAP,GACG,KAAKP,WAAL,GAAmBE,KAAK,CAACM,WAD5B,GAC2CJ,SAN9C;AAOLS,QAAAA,KAAK,EAAEZ,MAAM,CAACS,CAAP,GACI,KAAKX,MAAL,GAAcG,KAAK,CAACS,UADxB,GACsCP;AARxC,OAAP;AAUD;AAED;AACF;AACA;AACA;;;;WACE,kBAAS;AACP,UAAIF,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B,CAFO,CAGP;AACA;;AACA,iCACG,KAAKL,MAAL,GAAcG,KAAK,CAACS,UAArB,GAAmCP,SADrC,EAEG,KAAKJ,WAAL,GAAmBE,KAAK,CAACM,WAA1B,GAAyCJ,SAF3C,EAGG,KAAKL,MAAL,GAAcG,KAAK,CAACS,UAHvB,EAIG,KAAKX,WAAL,GAAmBE,KAAK,CAACM,WAJ5B,EAKE,KAAKM,oBALP,EAME,KAAKT,KANP;AAQD;AACD;AACF;AACA;AACA;AACA;AACA;AACA;;;;WACE,yBAAgBK,CAAhB,EAAmBH,CAAnB,EAAsB;AACpB,UAAIL,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIF,MAAM,GAAG,KAAKA,MAAlB;AAEA,UAAIc,CAAC,GAAGL,CAAC,GAAGT,MAAM,CAACS,CAAnB;AACA,UAAIM,CAAC,GAAGT,CAAC,GAAGN,MAAM,CAACM,CAAnB;AAEA,UAAIU,EAAE,GAAG,KAAKlB,MAAL,GAAcG,KAAK,CAACS,UAA7B;AACA,UAAIO,EAAE,GAAG,KAAKlB,WAAL,GAAmBE,KAAK,CAACM,WAAlC,CARoB,CAUpB;;AACA,aAASO,CAAC,GAACA,CAAH,IAASE,EAAE,GAACA,EAAZ,CAAD,GAAsBD,CAAC,GAACA,CAAH,IAASE,EAAE,GAACA,EAAZ,CAArB,IAAyC,CAAhD;AACD;;;;EA9E0BC,uC","sourcesContent":["import { drawEllipse } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * An ellipse\n */\nexport class Ellipse extends PrimitiveComponent {\n  /**\n   * @param {object} options options for the ellipse\n   * @param {number} options.radius the major (horizontal) radius of the ellipse\n   * @param {number} options.minorRadius the minor (vertical) radius of the ellipse\n   */\n  constructor(options) {\n    super(options);\n    /**\n     * the major radius (horizontal) of the ellipse\n     * @type {number}\n     */\n    this.radius = options.radius || 0;\n\n    /**\n     *  the minor radius (vertical) of the ellipse\n     * @type {number}\n     */\n    this.minorRadius = options.minorRadius || this.radius || 0;\n  }\n\n  /**\n   * the bounding box for the ellipse\n   * @type {{top: number, left: number, bottom: number, right: number}}\n   */\n  get boundingBox() {\n    let offset = this.offset;\n    let scale = this.compoundScale;\n    let lineWidth = this.style.lineWidth;\n    return {\n      top: offset.y -\n                ((this.minorRadius * scale.scaleHeight) + lineWidth),\n      left: offset.x -\n                ((this.radius * scale.scaleWidth) + lineWidth),\n      bottom: offset.y +\n                (this.minorRadius * scale.scaleHeight) + lineWidth,\n      right: offset.x +\n                (this.radius * scale.scaleWidth) + lineWidth\n    };\n  }\n\n  /**\n   * override the render function specifically for ellipses\n   * @override\n   */\n  render() {\n    let scale = this.compoundScale;\n    let lineWidth = this.style.lineWidth;\n    //TODO: work out scaling of major/minor radius\n    //this doesn't make sense\n    drawEllipse(\n      (this.radius * scale.scaleWidth) + lineWidth,\n      (this.minorRadius * scale.scaleHeight) + lineWidth,\n      (this.radius * scale.scaleWidth),\n      (this.minorRadius * scale.scaleHeight),\n      this._prerenderingContext,\n      this.style\n    );\n  }\n  /**\n   * determine whether the point is in the object\n   * basically just the pythagorean theorem\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @return {boolean} whether or not the point is in the object\n   */\n  pointIsInObject(x, y) {\n    let scale = this.compoundScale;\n    let offset = this.offset;\n\n    let a = x - offset.x;\n    let b = y - offset.y;\n\n    let c1 = this.radius * scale.scaleWidth;\n    let c2 = this.minorRadius * scale.scaleHeight;\n\n    //see: http://math.stackexchange.com/questions/76457/check-if-a-point-is-within-an-ellipse\n    return ((a*a) / (c1*c1)) + ((b*b) / (c2*c2)) <= 1;\n  }\n}\n"],"file":"Ellipse.js"}