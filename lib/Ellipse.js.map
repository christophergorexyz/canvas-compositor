{"version":3,"sources":["../src/Ellipse.js"],"names":["Ellipse","options","radius","minorRadius","scale","compoundScale","lineWidth","style","scaleWidth","scaleHeight","_prerenderingContext","x","y","offset","a","b","c1","c2","top","left","bottom","right","PrimitiveComponent"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;IAGaA,O;;;;;AACT;;;;;AAKA,mBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB,iFAAMA,OAAN;AACA;;;;AAGA,UAAKC,MAAL,GAAcD,OAAO,CAACC,MAAR,IAAkB,CAAhC;AACA;;;;AAGA,UAAKC,WAAL,GAAmBF,OAAO,CAACE,WAAR,IAAuB,MAAKD,MAA5B,IAAsC,CAAzD;AATiB;AAUpB;AAED;;;;;;;;;AAoBA;;;;6BAIS;AACL,UAAIE,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B,CAFK,CAGL;AACA;;AACA,iCACK,KAAKJ,MAAL,GAAcE,KAAK,CAACI,UAArB,GAAmCF,SADvC,EAEK,KAAKH,WAAL,GAAmBC,KAAK,CAACK,WAA1B,GAAyCH,SAF7C,EAGK,KAAKJ,MAAL,GAAcE,KAAK,CAACI,UAHzB,EAIK,KAAKL,WAAL,GAAmBC,KAAK,CAACK,WAJ9B,EAKI,KAAKC,oBALT,EAMI,KAAKH,KANT;AAQH;AACD;;;;;;;;;;oCAOgBI,C,EAAGC,C,EAAG;AAClB,UAAIR,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIQ,MAAM,GAAG,KAAKA,MAAlB;AAEA,UAAIC,CAAC,GAAGH,CAAC,GAAGE,MAAM,CAACF,CAAnB;AACA,UAAII,CAAC,GAAGH,CAAC,GAAGC,MAAM,CAACD,CAAnB;AAEA,UAAII,EAAE,GAAG,KAAKd,MAAL,GAAcE,KAAK,CAACI,UAA7B;AACA,UAAIS,EAAE,GAAG,KAAKd,WAAL,GAAmBC,KAAK,CAACK,WAAlC,CARkB,CAUlB;;AACA,aAASK,CAAC,GAACA,CAAH,IAASE,EAAE,GAACA,EAAZ,CAAD,GAAsBD,CAAC,GAACA,CAAH,IAASE,EAAE,GAACA,EAAZ,CAArB,IAAyC,CAAhD;AACH;;;wBArDiB;AACd,UAAIJ,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIT,KAAK,GAAG,KAAKC,aAAjB;AACA,UAAIC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA3B;AACA,aAAO;AACHY,QAAAA,GAAG,EAAEL,MAAM,CAACD,CAAP,IACC,KAAKT,WAAL,GAAmBC,KAAK,CAACK,WAA1B,GAAyCH,SADzC,CADF;AAGHa,QAAAA,IAAI,EAAEN,MAAM,CAACF,CAAP,IACA,KAAKT,MAAL,GAAcE,KAAK,CAACI,UAArB,GAAmCF,SADlC,CAHH;AAKHc,QAAAA,MAAM,EAAEP,MAAM,CAACD,CAAP,GACH,KAAKT,WAAL,GAAmBC,KAAK,CAACK,WADtB,GACqCH,SAN1C;AAOHe,QAAAA,KAAK,EAAER,MAAM,CAACF,CAAP,GACF,KAAKT,MAAL,GAAcE,KAAK,CAACI,UADlB,GACgCF;AARpC,OAAP;AAUH;;;;EApCwBgB,uC","sourcesContent":["import { drawEllipse } from './Renderer';\nimport { PrimitiveComponent } from './PrimitiveComponent';\n\n/**\n * An ellipse\n */\nexport class Ellipse extends PrimitiveComponent {\n    /**\n     * @param {object} options options for the ellipse\n     * @param {number} options.radius the major (horizontal) radius of the ellipse\n     * @param {number} options.minorRadius the minor (vertical) radius of the ellipse\n     */\n    constructor(options) {\n        super(options);\n        /**\n         * @type {number} radius the major radius (horizontal) of the ellipse\n         */\n        this.radius = options.radius || 0;\n        /**\n         * @type {number} minorRadius the minor radius (vertical) of the ellipse\n         */\n        this.minorRadius = options.minorRadius || this.radius || 0;\n    }\n\n    /**\n     * the bounding box for the ellipse\n     * @type {{top: number, left: number, bottom: number, right: number}} boundingBox\n     */\n    get boundingBox() {\n        let offset = this.offset;\n        let scale = this.compoundScale;\n        let lineWidth = this.style.lineWidth;\n        return {\n            top: offset.y -\n                ((this.minorRadius * scale.scaleHeight) + lineWidth),\n            left: offset.x -\n                ((this.radius * scale.scaleWidth) + lineWidth),\n            bottom: offset.y +\n                (this.minorRadius * scale.scaleHeight) + lineWidth,\n            right: offset.x +\n                (this.radius * scale.scaleWidth) + lineWidth\n        };\n    }\n\n    /**\n     * override the render function specifically for ellipses\n     * @override\n     */\n    render() {\n        let scale = this.compoundScale;\n        let lineWidth = this.style.lineWidth;\n        //TODO: work out scaling of major/minor radius\n        //this doesn't make sense\n        drawEllipse(\n            (this.radius * scale.scaleWidth) + lineWidth,\n            (this.minorRadius * scale.scaleHeight) + lineWidth,\n            (this.radius * scale.scaleWidth),\n            (this.minorRadius * scale.scaleHeight),\n            this._prerenderingContext,\n            this.style\n        );\n    }\n    /**\n     * determine whether the point is in the object\n     * basically just the pythagorean theorem\n     * @param {number} x the x coordinate\n     * @param {number} y the y coordinate\n     * @return {boolean} whether or not the point is in the object\n     */\n    pointIsInObject(x, y) {\n        let scale = this.compoundScale;\n        let offset = this.offset;\n\n        let a = x - offset.x;\n        let b = y - offset.y;\n\n        let c1 = this.radius * scale.scaleWidth;\n        let c2 = this.minorRadius * scale.scaleHeight;\n\n        //see: http://math.stackexchange.com/questions/76457/check-if-a-point-is-within-an-ellipse\n        return ((a*a) / (c1*c1)) + ((b*b) / (c2*c2)) <= 1;\n    };\n}\n"],"file":"Ellipse.js"}