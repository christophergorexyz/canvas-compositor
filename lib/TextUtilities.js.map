{"version":3,"sources":["../src/TextUtilities.js"],"names":["ALL_CHARS","getTextHeight","font","fontHolder","document","createElement","innerText","style","baselineRuler","display","width","height","verticalAlign","wrapper","appendChild","whiteSpace","body","fontRect","getBoundingClientRect","baselineRect","fontTop","top","scrollTop","fontBottom","baseline","removeChild","ascentFromBaseline","descentFromBaseline","ascent","descent","formatFontString","fontStyle","fontVariant","fontWeight","fontSize","lineHeight","fontFamily","measureText","text","context","Object","assign"],"mappings":";;;;;;;;;AAAA;;;AAGA,IAAMA,SAAS,kGAAf;AAEA;;;;;;;AAMO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAChC;AACA;AAEA;AACA,MAAIC,UAAU,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAjB;AACAF,EAAAA,UAAU,CAACG,SAAX,GAAuBN,SAAvB;AACAG,EAAAA,UAAU,CAACI,KAAX,CAAiBL,IAAjB,GAAwBA,IAAxB,CAPgC,CAShC;;AACA,MAAIM,aAAa,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAApB;AACAG,EAAAA,aAAa,CAACD,KAAd,CAAoBE,OAApB,GAA8B,cAA9B;AACAD,EAAAA,aAAa,CAACD,KAAd,CAAoBG,KAApB,GAA4B,KAA5B;AACAF,EAAAA,aAAa,CAACD,KAAd,CAAoBI,MAApB,GAA6B,GAA7B;AACAH,EAAAA,aAAa,CAACD,KAAd,CAAoBK,aAApB,GAAoC,UAApC,CAdgC,CAgBhC;;AACA,MAAIC,OAAO,GAAGT,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAd;AACAQ,EAAAA,OAAO,CAACC,WAAR,CAAoBX,UAApB;AACAU,EAAAA,OAAO,CAACC,WAAR,CAAoBN,aAApB;AACAK,EAAAA,OAAO,CAACN,KAAR,CAAcQ,UAAd,GAA2B,QAA3B;AACAX,EAAAA,QAAQ,CAACY,IAAT,CAAcF,WAAd,CAA0BD,OAA1B,EArBgC,CAuBhC;;AACA,MAAII,QAAQ,GAAGd,UAAU,CAACe,qBAAX,EAAf;AACA,MAAIC,YAAY,GAAGX,aAAa,CAACU,qBAAd,EAAnB,CAzBgC,CA2BhC;;AACA,MAAIE,OAAO,GAAGH,QAAQ,CAACI,GAAT,GAAejB,QAAQ,CAACY,IAAT,CAAcM,SAA3C;AACA,MAAIC,UAAU,GAAGH,OAAO,GAAGH,QAAQ,CAACN,MAApC;AAEA,MAAIa,QAAQ,GAAGL,YAAY,CAACE,GAAb,GAAmBjB,QAAQ,CAACY,IAAT,CAAcM,SAAhD;AAEAlB,EAAAA,QAAQ,CAACY,IAAT,CAAcS,WAAd,CAA0BZ,OAA1B,EAjCgC,CAmChC;;AACA,MAAIa,kBAAkB,GAAGF,QAAQ,GAAGJ,OAApC,CApCgC,CAsChC;;AACA,MAAIO,mBAAmB,GAAGJ,UAAU,GAAGC,QAAvC;AAEA,SAAO;AACHb,IAAAA,MAAM,EAAEM,QAAQ,CAACN,MADd;AAEHiB,IAAAA,MAAM,EAAEF,kBAFL;AAGHG,IAAAA,OAAO,EAAEF;AAHN,GAAP;AAKH;AAGD;;;;;;;;;;;AASO,SAASG,gBAAT,CAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,UAAlD,EAA8DC,QAA9D,EAAwEC,UAAxE,EAAoFC,UAApF,EAAgG;AACnG,mBAAUL,SAAV,cAAuBC,WAAvB,cAAsCC,UAAtC,cAAoDC,QAApD,cAAgEC,UAAhE,cAA8EC,UAA9E;AACH;AAED;;;;;;;;;AAOO,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoChC,KAApC,EAA2C;AAC9CiC,EAAAA,MAAM,CAACC,MAAP,CAAcF,OAAd,EAAuBhC,KAAvB;AACA,SAAOgC,OAAO,CAACF,WAAR,CAAoBC,IAApB,CAAP;AACH","sourcesContent":["/**\r\n * As many basic characters as possible to fit into a string in order to measure the height\r\n */\r\nconst ALL_CHARS = `1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm.,\\`~;:'\"!?@#$%^&*()_+={}[]|\\<>/`;\r\n\r\n/**\r\n * this technique is informed by\r\n * http://stackoverflow.com/questions/1134586/how-can-you-find-the-height-of-text-on-an-html-canvas\r\n * it's a pretty awful hack, and will not work in canvases on non-browser runtimes\r\n * @param {string} font the long form font string\r\n */\r\nexport function getTextHeight(font) {\r\n    //\r\n    //TODO: figure out how cross-browser this is\r\n\r\n    //create an element with every character in it with this font\r\n    let fontHolder = document.createElement('span');\r\n    fontHolder.innerText = ALL_CHARS;\r\n    fontHolder.style.font = font;\r\n\r\n    //create an inline-block to place after the element\r\n    let baselineRuler = document.createElement('div');\r\n    baselineRuler.style.display = 'inline-block';\r\n    baselineRuler.style.width = '1px';\r\n    baselineRuler.style.height = '0';\r\n    baselineRuler.style.verticalAlign = 'baseline';\r\n\r\n    //place them in a wrapper and add it to the body\r\n    let wrapper = document.createElement('div');\r\n    wrapper.appendChild(fontHolder);\r\n    wrapper.appendChild(baselineRuler);\r\n    wrapper.style.whiteSpace = 'nowrap';\r\n    document.body.appendChild(wrapper);\r\n\r\n    //get their bounding rectangles and...\r\n    let fontRect = fontHolder.getBoundingClientRect();\r\n    let baselineRect = baselineRuler.getBoundingClientRect();\r\n\r\n    //calculate their offset from top\r\n    let fontTop = fontRect.top + document.body.scrollTop;\r\n    let fontBottom = fontTop + fontRect.height;\r\n\r\n    let baseline = baselineRect.top + document.body.scrollTop;\r\n\r\n    document.body.removeChild(wrapper);\r\n\r\n    //ascent equals the baseline location minus text top location\r\n    let ascentFromBaseline = baseline - fontTop;\r\n\r\n    //decent equals the text bottom location minuse the baseline location\r\n    let descentFromBaseline = fontBottom - baseline;\r\n\r\n    return {\r\n        height: fontRect.height,\r\n        ascent: ascentFromBaseline,\r\n        descent: descentFromBaseline\r\n    };\r\n}\r\n\r\n\r\n/**\r\n * format a longform font style\r\n * @param {string} fontStyle the font style\r\n * @param {string} fontVariant the font variant\r\n * @param {string} fontWeight the font weight\r\n * @param {string} fontSize the font size\r\n * @param {string} lineHeight the font height\r\n * @param {string} fontFamily the font family\r\n */\r\nexport function formatFontString(fontStyle, fontVariant, fontWeight, fontSize, lineHeight, fontFamily) {\r\n    return `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} ${fontFamily}`;\r\n}\r\n\r\n/**\r\n * Measure the text\r\n * @param {string} text the text to be measured\r\n * @param {object} context the 2D Context object for a canvas - required for measurement to occur, but may be arbitrary\r\n * @param {object} style the style options to be used when measuring the text\r\n * @return {object} [TextMetrics](https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics) object containing info like Width\r\n */\r\nexport function measureText(text, context, style) {\r\n    Object.assign(context, style);\r\n    return context.measureText(text);\r\n}\r\n"],"file":"TextUtilities.js"}